%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Jeff Erickson at 2025-07-03 17:12:51 -0500 


%% Saved with string encoding Unicode (UTF-8) 



@inproceedings{nw-ct-20,
	author = {Nugent, Coleman and Wortman, Kevin A.},
	booktitle = {Proc. 10th Ann. IEEE Comput. Commun. Workshop Conf. {CCWC}},
	date-added = {2025-06-25 17:00:53 -0500},
	date-modified = {2025-06-25 17:02:23 -0500},
	doi = {10.1109/CCWC47524.2020.9031134},
	keywords = {Balanced binary trees, WAVL trees, brother trees},
	pages = {31--37},
	publisher = {{IEEE}},
	title = {Crumple Trees},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.1109/CCWC47524.2020.9031134}}

@article{ss-scokh-90,
	abstract = { The problem of constructing a dense static hash-based lookup table T for a set of n elements belonging to a universe \$U = \{ 0, 1, 2,\cdots , m -1 \}\$ is considered. Nearly tight bounds on the spatial complexity of oblivious \$O(1)\$-probe hash functions, which are defined to depend solely on their search key argument, are provided. This establishes a significant gap between oblivious and nonoblivious search. In particular, the results include the following: * A lower bound showing that oblivious k-probe hash functions require a program size of \$\Omega(({n / k}^{2})e^{-k}+\log \log m)\$ bits, on average. * A probabilistic construction of a family of oblivious k-probe hash functions that can be specified in \$O(n e^{-k} +\log \log m)\$ bits, which nearly matches the above lower bound. * A variation of an explicit \$O(1)\$ time 1-probe (perfect) hash function family that can be specified in \$O(n+\log \log m)\$ bits, which is tight to within a constant factor of the lower bound. },
	author = {Schmidt, Jeanette P. and Siegel, Alan},
	date-added = {2025-06-25 10:36:27 -0500},
	date-modified = {2025-06-25 10:36:56 -0500},
	doi = {10.1137/0219054},
	journal = {SIAM J. Comput.},
	number = {5},
	pages = {775--786},
	title = {The Spatial Complexity of Oblivious $k$-Probe Hash Functions},
	volume = {19},
	year = {1990},
	bdsk-url-1 = {https://doi.org/10.1137/0219054}}

@inproceedings{b-snta-68,
	abstract = {To achieve high throughput rates today's computers perform several operations simultaneously. Not only are I/O operations performed concurrently with computing, but also, in multiprocessors, several computing operations are done concurrently. A major problem in the design of such a computing system is the connecting together of the various parts of the system (the I/O devices, memories, processing units, etc.) in such a way that all the required data transfers can be accommodated. One common scheme is a high-speed bus which is time-shared by the various parts; speed of available hardware limits this scheme. Another scheme is a cross-bar switch or matrix; limiting factors here are the amount of hardware (an m \texttimes{} n matrix requires m \texttimes{} n cross-points) and the fan-in and fan-out of the hardware.},
	author = {Batcher, Kenneth E.},
	booktitle = {Proc. AFIPS Spring Joint Computer Conference},
	date-added = {2025-05-19 11:18:11 -0500},
	date-modified = {2025-05-19 11:22:19 -0500},
	doi = {10.1145/1468075.1468121},
	number = {32},
	pages = {307--314},
	series = {{AFIPS} Conf. Proc.},
	title = {Sorting networks and their applications},
	url = {https://oaks.kent.edu/kenneth-e-batcher-collection/sorting-networks-and-their-applications},
	year = {1968},
	bdsk-url-1 = {https://oaks.kent.edu/kenneth-e-batcher-collection/sorting-networks-and-their-applications},
	bdsk-url-2 = {https://doi.org/10.1145/1468075.1468121}}

@article{ah-ipisw-97,
	abstract = {We show thatnintegers in the range 1,{\ldots},ncan be sorted stably on an EREW PRAM usingO(t) time andO(n(lognloglogn+(logn)2/t)) operations, for arbitrary givent⩾lognloglogn, and on a CREW PRAM usingO(t) time andO(n(logn+logn/2t/logn)) operations, for arbitrary givent⩾logn. In addition, we are able to sortnarbitrary integers on a randomized CREW PRAM within the same resource bounds with high probability. In each case our algorithm is a factor of almostΘ:(logn) closer to optimality than all previous algorithms for the stated problem in the stated model, and our third result matches the operation count of the best previous sequential algorithm. We also show thatnintegers in the range 1,{\ldots},mcan be sorted inO((logn)2) time withO(n) operations on an EREW PRAM using a nonstandard word length ofO(lognloglognlogm) bits, thereby greatly improving the upper bound on the word length necessary to sort integers with a linear time--processor product, even sequentially. Our algorithms were inspired by, and in one case directly use, the fusion trees of Fredman and Willard.},
	author = {Albers, Susanne and Hagerup, Torben},
	date-added = {2025-05-19 11:12:45 -0500},
	date-modified = {2025-05-19 11:13:11 -0500},
	doi = {10.1006/inco.1997.2632},
	journal = {Inf. Comput.},
	number = {1},
	pages = {25--51},
	title = {Improved Parallel Integer Sorting without Concurrent Writing},
	volume = {136},
	year = {1997},
	bdsk-url-1 = {https://www.sciencedirect.com/science/article/pii/S0890540197926328},
	bdsk-url-2 = {https://doi.org/10.1006/inco.1997.2632}}

@article{ahnr-slt-98,
	abstract = {We show that a unit-cost RAM with a word length ofwbits can sortnintegers in the range 0{\ldots}2w−1 inO(nloglogn) time for arbitraryw⩾logn, a significant improvement over the bound ofO(nlogn) achieved by the fusion trees of Fredman and Willard. Provided thatw⩾(logn)2+εfor some fixedε>0, the sorting can even be accomplished in linear expected time with a randomized algorithm. Both of our algorithms parallelize without loss on a unit-cost PRAM with a word length ofwbits. The first one yields an algorithm that usesO(logn) time andO(nloglogn) operations on a deterministic CRCW PRAM. The second one yields an algorithm that usesO(logn) expected time andO(n) expected operations on a randomized EREW PRAM, provided thatw⩾(logn)2+εfor some fixedε>0. Our deterministic and randomized sequential and parallel algorithms generalize to the lexicographic sorting of multiple-precision integers represented in several words.},
	author = {Andersson, Arne and Hagerup, Torben and Nilsson, Stefan and Raman, Rajeev},
	date-added = {2025-05-17 16:07:39 +0200},
	date-modified = {2025-05-17 16:07:57 +0200},
	doi = {10.1006/jcss.1998.1580},
	journal = {J. Comput. Syst. Sci.},
	number = {1},
	pages = {74--93},
	title = {Sorting in Linear Time?},
	volume = {57},
	year = {1998},
	bdsk-url-1 = {https://doi.org/10.1006/jcss.1998.1580}}

@article{kr-ubsir-83,
	abstract = {The complexity of integer sorting is investigated on two random access machine (RAM) models. The main results show that (i) on a RAM with addition, subtraction, multiplication and integer division, n integers in the range [0, 2cn) can be sorted in O(n(1 + log c)) steps, (ii) on a RAM with addition, subtraction, and left and right shifts, n integers in any range can be sorted in linear time, and (iii) on either of the above models, n integers in the range [0, nc can be sorted in O(n(1 + log c)) steps, even if all register addresses and capacities are bounded above by nc.},
	author = {Kirkpatrick, David and Reisch, Stefan},
	date-added = {2025-05-17 16:05:02 +0200},
	date-modified = {2025-05-17 16:05:25 +0200},
	doi = {10.1016/0304-3975(83)90023-3},
	journal = {Theor. Comput. Sci.},
	number = {3},
	pages = {263--276},
	title = {Upper bounds for sorting integers on random access machines},
	volume = {28},
	year = {1983},
	bdsk-url-1 = {https://doi.org/10.1016/0304-3975(83)90023-3}}

@inproceedings{ds-amol-87,
	abstract = {The order maintenance problem is that of maintaining a list under a sequence of Insert and Delete operations, while answering Order queries (determine which of two elements comes first in the list). We give two new algorithms for this problem. The first algorithm matches the O(1) amortized time per operation of the best previously known algorithm, and is much simpler. The second algorithm permits all operations to be performed in O(1) worst-case time.},
	author = {Dietz, Paul F. and Sleator, Daniel D.},
	booktitle = {Proc., 19th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-03-23 15:27:57 -0500},
	date-modified = {2025-03-23 15:29:06 -0500},
	doi = {10.1145/28395.28434},
	pages = {365--372},
	title = {Two algorithms for maintaining order in a list},
	year = {1987},
	bdsk-url-1 = {https://doi.org/10.1145/28395.28434}}

@article{hst-rt-15,
	abstract = {Since the invention of AVL trees in 1962, many kinds of binary search trees have been proposed. Notable are red-black trees, in which bottom-up rebalancing after an insertion or deletion takes O(1) amortized time and O(1) rotations worst-case. But the design space of balanced trees has not been fully explored. We continue the exploration. Our contributions are three: We systematically study the use of ranks and rank differences to define height-based balance in binary trees. Different invariants on rank differences yield AVL trees, red-black trees, and other kinds of balanced trees. By relaxing AVL trees, we obtain a new kind of balanced binary tree, the weak AVL tree (wavl tree), whose properties we develop. Bottom-up rebalancing after an insertion or deletion takes O(1) amortized time and at most two rotations, improving the three or more rotations per deletion needed in all other kinds of balanced trees of which we are aware. The height bound of a wavl tree degrades gracefully from that of an AVL tree as the number of deletions increases and is never worse than that of a red-black tree. Wavl trees also support top-down, fixed look-ahead rebalancing in O(1) amortized time. Finally, we use exponential potential functions to prove that in wavl trees rebalancing steps occur exponentially infrequently in rank. Thus, most of the rebalancing is at the bottom of the tree, which is crucial in concurrent applications and in those in which rotations take time that depends on the subtree size.},
	author = {Haeupler, Bernhard and Sen, Siddhartha and Tarjan, Robert E.},
	date-added = {2025-03-23 15:20:25 -0500},
	date-modified = {2025-03-23 15:22:04 -0500},
	doi = {10.1145/2689412},
	journal = {ACM Trans. Algorithms},
	keywords = {AVL trees, Balanced binary trees, amortized complexity, data structures, exponential potential function, red-black trees, search trees},
	number = {4},
	pages = {30:1--30:26},
	title = {Rank-Balanced Trees},
	volume = {11},
	year = {2015},
	bdsk-url-1 = {https://doi.org/10.1145/2689412}}

@article{h-z-97,
	author = {Huet, G{\'e}rard},
	date-added = {2025-03-23 14:48:51 -0500},
	date-modified = {2025-03-23 14:49:16 -0500},
	doi = {10.1017/S0956796897002864},
	journal = {J. Functional Prog.},
	number = {5},
	pages = {549---554},
	title = {The Zipper},
	volume = {7},
	year = {1997},
	bdsk-url-1 = {https://doi.org/10.1017/S0956796897002864}}

@article{m-sstca-76,
	abstract = {A new algorithm is presented for constructing auxiliary digital search trees to aid in exact-match substring searching. This algorithm has the same asymptotic running time bound as previously published algorithms, but is more economical in space. Some implementation considerations are discussed, and new work on the modification of these search trees in response to incremental changes in the strings they index (the update problem) is presented.},
	author = {McCreight, Edward M.},
	date-added = {2025-03-21 09:23:37 -0500},
	date-modified = {2025-03-21 09:33:05 -0500},
	doi = {10.1145/321941.321946},
	journal = {J. ACM},
	number = {2},
	pages = {262--272},
	title = {A Space-Economical Suffix Tree Construction Algorithm},
	volume = {23},
	year = {1976},
	bdsk-url-1 = {https://doi.org/10.1145/321941.321946}}

@article{bbhec-sarst-85,
	author = {Blumer, Anselm and Blumer, J. and Haussler, David and Ehrenfeucht, Andrzej and Chen, M. T. and Seiferas, Joel I.},
	date-added = {2025-03-21 09:17:36 -0500},
	date-modified = {2025-03-21 09:17:46 -0500},
	doi = {10.1016/0304-3975(85)90157-4},
	journal = {Theor. Comput. Sci.},
	pages = {31--55},
	title = {The Smallest Automaton Recognizing the Subwords of a Text},
	volume = {40},
	year = {1985},
	bdsk-url-1 = {https://doi.org/10.1016/0304-3975(85)90157-4}}

@misc{cdmsx-noidm-24,
	arxiv = {2312.11873},
	author = {Chen, Jingbang and Dai, Jiangqi and Mang, Qiuyang and Shi, Qingyu and Xu, Tingqiang},
	date-added = {2025-03-21 09:13:55 -0500},
	date-modified = {2025-03-21 09:14:13 -0500},
	howpublished = {Preprint},
	title = {Nearly Optimal Internal Dictionary Matching},
	year = {2024}}

@article{s-apuug-95,
	abstract = {We present an algorithm, APD, that solves the distance version of the all-pairs-shortest-path problem for undirected, unweighted n-vertex graphs in time O(M(n) log n), where M(n) denotes the time necessary to multiply two n × n matrices of small integers (which is currently known to be o(n2.376)). We also address the problem of actually finding a shortest path between each pair of vertices and present a randomized algorithm that matches APD in its simplicity and in its expected running time.},
	author = {Seidel, Raimund},
	date-added = {2025-03-21 09:11:08 -0500},
	date-modified = {2025-03-21 09:11:31 -0500},
	doi = {10.1006/jcss.1995.1078},
	journal = {J. Comput. Syst. Sci.},
	number = {3},
	pages = {400--403},
	title = {On the All-Pairs-Shortest-Path Problem in Unweighted Undirected Graphs},
	volume = {51},
	year = {1995},
	bdsk-url-1 = {https://doi.org/10.1006/jcss.1995.1078}}

@inproceedings{bfkkl-ottht-22,
	author = {Bender, Michael A. and Farach{-}Colton, Martin and Kuszmaul, John and Kuszmaul, William and Liu, Mingmou},
	booktitle = {Proc. 54th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-03-21 09:06:58 -0500},
	date-modified = {2025-03-21 09:07:30 -0500},
	doi = {10.1145/3519935.3519969},
	pages = {1284--1297},
	title = {On the optimal time/space tradeoff for hash tables},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1145/3519935.3519969}}

@article{ksb-lwsac-06,
	author = {K{\"a}rkk{\"a}inen, Juha and Sanders, Peter and Burkhardt, Stefan},
	date-added = {2025-03-21 08:58:51 -0500},
	date-modified = {2025-03-21 09:00:10 -0500},
	doi = {10.1145/1217856.1217858},
	journal = {J. {ACM}},
	number = {6},
	pages = {918--936},
	title = {Linear work suffix array construction},
	volume = {53},
	year = {2006},
	bdsk-url-1 = {http://doi.acm.org/10.1145/1217856.1217858}}

@inproceedings{kk-ssssc-19,
	abstract = {Burrows--Wheeler transform (BWT) is an invertible text transformation that, given a text T of length n, permutes its symbols according to the lexicographic order of suffixes of T. BWT is one of the most heavily studied algorithms in data compression with numerous applications in indexing, sequence analysis, and bioinformatics. Its construction is a bottleneck in many scenarios, and settling the complexity of this task is one of the most important unsolved problems in sequence analysis that has remained open for 25 years. Given a binary string of length n, occupying O(n/logn) machine words, the BWT construction algorithm due to Hon et al. (SIAM J. Comput., 2009) runs in O(n) time and O(n/logn) space. Recent advancements (Belazzougui, STOC 2014, and Munro et al., SODA 2017) focus on removing the alphabet-size dependency in the time complexity, but they still require Ω(n) time. Despite the clearly suboptimal running time, the existing techniques appear to have reached their limits. In this paper, we propose the first algorithm that breaks the O(n)-time barrier for BWT construction. Given a binary string of length n, our procedure builds the Burrows--Wheeler transform in O(n/√logn) time and O(n/logn) space. We complement this result with a conditional lower bound proving that any further progress in the time complexity of BWT construction would yield faster algorithms for the very well studied problem of counting inversions: it would improve the state-of-the-art O(m√logm)-time solution by Chan and P\u{a}tra\c{s}cu (SODA 2010). Our algorithm is based on a novel concept of string synchronizing sets, which is of independent interest. As one of the applications, we show that this technique lets us design a data structure of the optimal size O(n/logn) that answers Longest Common Extension queries (LCE queries) in O(1) time and, furthermore, can be deterministically constructed in the optimal O(n/logn) time.},
	arxiv = {1904.04228},
	author = {Kempa, Dominik and Kociumaka, Tomasz},
	booktitle = {Proc. 51st Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-03-21 08:56:01 -0500},
	date-modified = {2025-03-21 09:03:04 -0500},
	doi = {10.1145/3313276.3316368},
	keywords = {packed strings, Longest Common Prefix queries, Longest Common Extension queries, Burrows-Wheeler transform},
	pages = {756---767},
	title = {String synchronizing sets: {Sublinear}-time {BWT} construction and optimal {LCE} data structure},
	year = {2019},
	bdsk-url-1 = {https://doi.org/10.1145/3313276.3316368}}

@article{amt-ftiwa-99,
	abstract = {Addressing a problem of Fredman and Willard, we implement fusion trees in deterministic linear space using AC0 instructions only. More precisely, we show that a subset of {0,{\ldots},2w - 1} of size n can be maintained using linear space under insertion, deletion, predecessor, and successor queries, with O(log nlog log n) amortized time per operation on a RAM with word size w, where the only computational instructions allowed on the RAM are functions in AC0. The AC0 instructions used are not all available on today's computers.},
	author = {Andersson, Arne and Miltersen, Peter Bro and Thorup, Mikkel},
	date-added = {2025-03-21 08:35:50 -0500},
	date-modified = {2025-03-21 08:36:39 -0500},
	doi = {10.1016/S0304-3975(98)00172-8},
	journal = {Theor. Comput. Sci.},
	number = {1},
	pages = {337--344},
	title = {Fusion trees can be implemented with {$AC^0$} instructions only},
	volume = {215},
	year = {1999},
	bdsk-url-1 = {https://doi.org/10.1016/S0304-3975(98)00172-8}}

@article{w-lwrqp-83,
	abstract = {Let S denote a set of N records whose keys are distinct nonnegative integers less than some initially specified bound M. This paper introduces a new data structure, called the y-fast trie, which uses Θ(N) space and Θ(log log M) time for range queries on a random access machine. We will also define a simpler but less efficient structure, called the x-fast trie.},
	author = {Willard, Dan E.},
	date-added = {2025-03-21 08:34:15 -0500},
	date-modified = {2025-03-21 08:34:55 -0500},
	doi = {10.1016/0020-0190(83)90075-3},
	journal = {Inf. Process. Lett.},
	keywords = {Priority queues, stratified trees (often called `Van Emde Boas trees'), sparse tables, special search algorithm of Fredmann, Komol{\'o}s and Szemer{\'e}di},
	number = {2},
	pages = {81--84},
	title = {Log-logarithmic worst-case range queries are possible in space {$\Theta(N)$}},
	volume = {17},
	year = {1983},
	bdsk-url-1 = {https://doi.org/10.1016/0020-0190(83)90075-3}}

@inproceedings{fw-btitb-90,
	author = {Fredman, Michael L. and Willard, Dan E.},
	booktitle = {Proc. 22nd Ann. {ACM} Symp. Theory Comput. (STOC)},
	date-added = {2025-03-21 08:30:21 -0500},
	date-modified = {2025-07-03 17:12:47 -0500},
	doi = {10.1145/100216.100217},
	pages = {1--7},
	title = {{BLASTING} through the Information Theoretic Barrier with {FUSION} {TREES}},
	year = {1990}}

@article{fks-sstwc-84,
	author = {Fredman, Michael L. and Koml\'{o}s, J\'{a}nos and Szemer\'{e}di, Endre},
	date-added = {2025-03-21 08:25:50 -0500},
	date-modified = {2025-03-21 08:26:34 -0500},
	doi = {10.1145/828.1884},
	journal = {J. ACM},
	number = {3},
	pages = {538---544},
	title = {Storing a Sparse Table with {$O(1)$} Worst Case Access Time},
	volume = {31},
	year = {1984},
	bdsk-url-1 = {https://doi.org/10.1145/828.1884}}

@inproceedings{dm-uchfd-90,
	author = {Dietzfelbinger, Martin and {Meyer auf der Heide}, Friedhelm},
	booktitle = {Proc. 17th Int. Colloq. Automata Lang. Programming (ICALP)},
	date-added = {2025-03-21 08:23:07 -0500},
	date-modified = {2025-03-21 08:23:57 -0500},
	doi = {10.1007/BFB0032018},
	pages = {6--19},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {A New Universal Class of Hash Functions and Dynamic Hashing in Real Time},
	volume = {443},
	year = {1990},
	bdsk-url-1 = {https://doi.org/10.1007/BFB0032018}}

@article{rrpm-afsoc-21,
	author = {Rottenstreich, Ori and Reviriego, Pedro and Porat, Ely and Muthukrishnan, Shan},
	date-added = {2025-03-21 08:18:21 -0500},
	date-modified = {2025-03-21 08:18:53 -0500},
	doi = {10.1109/TNSM.2021.3068604},
	journal = {{IEEE} Trans. Netw. Serv. Manag.},
	number = {3},
	pages = {3662--3676},
	title = {Avoiding Flow Size Overestimation in Count-Min Sketch With {Bloom} Filter Constructions},
	volume = {18},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1109/TNSM.2021.3068604}}

@article{cm-idssc-05,
	abstract = {We introduce a new sublinear space data structure---the count-min sketch---for summarizing data streams. Our sketch allows fundamental queries in data stream summarization such as point, range, and inner product queries to be approximately answered very quickly; in addition, it can be applied to solve several important problems in data streams such as finding quantiles, frequent items, etc. The time and space bounds we show for using the CM sketch to solve these problems significantly improve those previously known---typically from 1/ε2 to 1/ε in factor.},
	author = {Cormode, Graham and Muthukrishnan, Shan},
	date-added = {2025-03-21 08:12:24 -0500},
	date-modified = {2025-03-21 08:16:25 -0500},
	doi = {10.1016/j.jalgor.2003.12.001},
	journal = {J. Algorithms},
	number = {1},
	pages = {58--75},
	title = {An improved data stream summary: {The} count-min sketch and its applications},
	volume = {55},
	year = {2005},
	bdsk-url-1 = {https://doi.org/10.1016/j.jalgor.2003.12.001}}

@article{kmw-mrhch-10,
	abstract = { Cuckoo hashing holds great potential as a high-performance hashing scheme for real applications. Up to this point, the greatest drawback of cuckoo hashing appears to be that there is a polynomially small but practically significant probability that a failure will occur during the insertion of an item, requiring an expensive rehashing of all items in the table. In this paper, we show that this failure probability can be dramatically reduced by the addition of a very small constant-sized stash. We demonstrate both analytically and through simulations that stashes of size equivalent to only three or four items yield tremendous improvements, enhancing cuckoo hashing's practical viability in both hardware and software. Our analysis naturally extends previous analyses of multiple cuckoo hashing variants, and the approach may prove useful in further related schemes. },
	author = {Kirsch, Adam and Mitzenmacher, Michael and Wieder, Udi},
	date-added = {2025-03-20 17:20:56 -0500},
	date-modified = {2025-03-20 17:21:14 -0500},
	doi = {10.1137/080728743},
	journal = {SIAM J. Comput.},
	number = {4},
	pages = {1543--1561},
	title = {More Robust Hashing: Cuckoo Hashing with a Stash},
	volume = {39},
	year = {2010},
	bdsk-url-1 = {https://doi.org/10.1137/080728743}}

@inproceedings{ans-dchpw-09,
	arxiv = {0903.0391},
	author = {Arbitman, Yuriy and Naor, Moni and Segev, Gil},
	booktitle = {Proc. 37th Int. Colloq. Automata Lang. Prog. (ICALP)},
	date-added = {2025-03-20 17:19:07 -0500},
	date-modified = {2025-03-20 17:20:13 -0500},
	doi = {10.1007/978-3-642-02927-1_11},
	pages = {107--118},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {De-amortized Cuckoo Hashing: Provable Worst-Case Performance and Experimental Results},
	volume = {5555},
	year = {2009},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-02927-1_11}}

@article{fpss-sehtw-05,
	author = {Fotakis, Dimitris and Pagh, Rasmus and Sanders, Peter and Spirakis, Paul G.},
	date-added = {2025-03-20 17:12:58 -0500},
	date-modified = {2025-03-20 17:13:12 -0500},
	doi = {10.1007/S00224-004-1195-X},
	journal = {Theory Comput. Syst.},
	number = {2},
	pages = {229--248},
	title = {Space Efficient Hash Tables with Worst Case Constant Access Time},
	volume = {38},
	year = {2005},
	bdsk-url-1 = {https://doi.org/10.1007/s00224-004-1195-x}}

@article{dw-badwt-07,
	author = {Dietzfelbinger, Martin and Weidling, Christoph},
	date-added = {2025-03-20 17:10:34 -0500},
	date-modified = {2025-03-20 17:11:16 -0500},
	doi = {10.1016/J.TCS.2007.02.054},
	journal = {Theor. Comput. Sci.},
	number = {1--2},
	pages = {47--68},
	title = {Balanced allocation and dictionaries with tightly packed constant size bins},
	volume = {380},
	year = {2007},
	bdsk-url-1 = {https://doi.org/10.1016/J.TCS.2007.02.054}}

@article{f-pgdps-91,
	author = {Frederickson, Greg N.},
	date-added = {2025-03-20 16:57:32 -0500},
	date-modified = {2025-03-20 16:58:12 -0500},
	doi = {10.1145/102782.102788},
	journal = {J. {ACM}},
	number = {1},
	pages = {162--204},
	title = {Planar Graph Decomposition and All Pairs Shortest Paths},
	volume = {38},
	year = {1991},
	bdsk-url-1 = {https://doi.org/10.1145/102782.102788}}

@inproceedings{dpz-cspdp-91,
	author = {Djidjev, Hristo N. and Pantziou, Grammati E. and Zaroliagis, Christos D.},
	booktitle = {Proc. 18th Int. Colloq. Automata Lang. Prog. (ICALP)},
	date-added = {2025-03-20 16:55:05 -0500},
	date-modified = {2025-03-20 16:56:15 -0500},
	doi = {10.1007/3-540-54233-7_145},
	pages = {327--338},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Computing Shortest Paths and Distances in Planar Graphs},
	volume = {510},
	year = {1991},
	bdsk-url-1 = {https://doi.org/10.1007/3-540-54233-7_145}}

@inproceedings{av-pcisl-14,
	arxiv = {1402.0054},
	author = {Abboud, Amir and {Vassilevska Williams}, Virginia},
	booktitle = {Proc. 55th IEEE Ann. Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-03-20 16:44:50 -0500},
	date-modified = {2025-03-20 16:48:25 -0500},
	doi = {10.1109/FOCS.2014.53},
	pages = {434--443},
	title = {Popular Conjectures Imply Strong Lower Bounds for Dynamic Problems},
	year = {2014},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS.2014.53}}

@article{p-ulclb-11,
	author = {P{\u{a}}tra{\c{s}}cu, Mihai},
	date-added = {2025-03-20 16:40:13 -0500},
	date-modified = {2025-03-20 16:40:26 -0500},
	doi = {10.1137/09075336X},
	journal = {SIAM J. Comput.},
	number = {3},
	pages = {827--847},
	title = {Unifying the Landscape of Cell-Probe Lower Bounds},
	volume = {40},
	year = {2011},
	bdsk-url-1 = {https://doi.org/10.1137/09075336X}}

@article{mnsw-dsacc-98,
	abstract = {In this paper we consider two-party communication complexity, the ``asymmetric case'', when the input sizes of the two players differ significantly. Most of previous work on communication complexity only considers the total number of bits sent, but we study trade-offs between the number of bits the first player sends and the number of bits the second sends. These types of questions are closely related to the complexity of static data structure problems in the cell probe model. We derive two generally applicable methods of proving lower bounds and obtain several applications. These applications include new lower bounds for data structures in the cell probe model. Of particular interest is our ``round elimination'' lemma, which is interesting also for the usual symmetric communication case. This lemma generalizes and abstracts in a very clean form the ``round reduction'' techniques used in many previous lower bound proofs.},
	author = {Miltersen, Peter Bro and Nisan, Noam and Safra, Shmuel and Wigderson, Avi},
	date-added = {2025-03-20 16:38:10 -0500},
	date-modified = {2025-03-20 16:38:51 -0500},
	doi = {10.1006/jcss.1998.1577},
	journal = {J. Comput. Syst. Sci.},
	number = {1},
	pages = {37--49},
	title = {On Data Structures and Asymmetric Communication Complexity},
	volume = {57},
	year = {1998},
	bdsk-url-1 = {https://doi.org/10.1006/jcss.1998.1577}}

@inproceedings{s-dtcdm-04,
	author = {Sankowski, Piotr},
	booktitle = {Proc. 45th IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-03-20 16:26:57 -0500},
	date-modified = {2025-03-20 16:48:36 -0500},
	doi = {10.1109/FOCS.2004.25},
	pages = {509--517},
	title = {Dynamic Transitive Closure via Dynamic Matrix Inverse (Extended Abstract)},
	year = {2004},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS.2004.25}}

@inbook{k-dsa-97,
	author = {Knuth, Donald Ervin},
	booktitle = {The Art of Computer Programming, Volume~{I:} Fundamental Algorithms},
	chapter = {2.5},
	date-added = {2025-03-20 15:59:01 -0500},
	date-modified = {2025-03-20 16:05:17 -0500},
	edition = {3rd},
	pages = {435--456},
	publisher = {Addison-Wesley},
	title = {Dynamic storage allocation},
	year = {1997}}

@book{k-cpvfa-97,
	author = {Knuth, Donald Ervin},
	date-added = {2025-03-20 15:55:38 -0500},
	date-modified = {2025-03-20 15:56:05 -0500},
	edition = {3rd},
	publisher = {Addison-Wesley},
	title = {The Art of Computer Programming, Volume {I:} Fundamental Algorithms},
	year = {1997},
	bdsk-url-1 = {https://www.worldcat.org/oclc/312910844}}

@inproceedings{bcdms-raots-99,
	author = {Brodnik, Andrej and Carlsson, Svante and Demaine, Erik D. and Munro, J. Ian and Sedgewick, Robert},
	booktitle = {Proc. 6th Int. Workshop Algorithms Data Struct. (WADS)},
	date-added = {2025-03-20 15:53:04 -0500},
	date-modified = {2025-03-20 15:54:18 -0500},
	doi = {10.1007/3-540-48447-7_4},
	number = {1663},
	pages = {37--48},
	publisher = {Springer},
	series = {Lecture Notes in Computer Science},
	title = {Resizable Arrays in Optimal Time and Space},
	year = {1999},
	bdsk-url-1 = {https://doi.org/10.1007/3-540-48447-7_4}}

@article{gbbrj-tcret-15,
	author = {Galhotra, Sainyam and Bagchi, Amitabha and Bedathur, Srikanta and Ramanath, Maya and Jain, Vidit},
	date-added = {2025-03-20 15:09:14 -0500},
	date-modified = {2025-03-20 15:09:22 -0500},
	doi = {10.14778/2831360.2831370},
	journal = {Proc. {VLDB} Endow.},
	number = {13},
	pages = {2170--2181},
	title = {Tracking the Conductance of Rapidly Evolving Topic-Subgraphs},
	volume = {8},
	year = {2015},
	bdsk-url-1 = {https://doi.org/10.14778/2831360.2831370}}

@article{pr-ch-04,
	author = {Pagh, Rasmus and Rodler, Flemming Friche},
	date-added = {2025-03-20 14:36:50 -0500},
	date-modified = {2025-03-20 14:37:03 -0500},
	doi = {10.1016/J.JALGOR.2003.12.002},
	journal = {J. Algorithms},
	number = {2},
	pages = {122--144},
	title = {Cuckoo hashing},
	volume = {51},
	year = {2004},
	bdsk-url-1 = {https://doi.org/10.1016/J.JALGOR.2003.12.002}}

@inproceedings{bg-shhwa-07,
	author = {Blelloch, Guy E. and Golovin, Daniel},
	booktitle = {Proc. 48th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-03-20 14:34:38 -0500},
	date-modified = {2025-03-20 16:48:18 -0500},
	doi = {10.1109/FOCS.2007.36},
	pages = {272--282},
	title = {Strongly History-Independent Hashing with Applications},
	year = {2007},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS.2007.36}}

@inproceedings{n-fdcou-17,
	annote = {Keywords: Dynamic Graph, Connectivity, Depth-First Search},
	author = {Nakamura, Kengo},
	booktitle = {Proc. 28th Int. Symp. Algorithms Comput. (ISAAC)},
	date-added = {2025-03-20 13:56:50 -0500},
	date-modified = {2025-03-20 16:34:06 -0500},
	doi = {10.4230/LIPIcs.ISAAC.2017.59},
	pages = {59:1--59:12},
	publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Fully Dynamic Connectivity Oracles under General Vertex Updates},
	volume = {92},
	year = {2017},
	bdsk-url-1 = {https://doi.org/10.4230/LIPIcs.ISAAC.2017.59}}

@inproceedings{kms-sca-21,
	author = {Klinkby, Kristine Vitting and Misra, Pranabendu and Saurabh, Saket},
	booktitle = {Proc. 32nd Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-03-20 13:54:37 -0500},
	date-modified = {2025-03-20 13:55:10 -0500},
	doi = {10.1137/1.9781611976465.15},
	pages = {219--234},
	title = {Strong Connectivity Augmentation is {FPT}},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611976465.15}}

@article{y-sts-81,
	author = {Yao, Andrew Chi-Chih},
	date-added = {2025-03-10 11:12:53 -0500},
	date-modified = {2025-03-10 11:13:07 -0500},
	doi = {10.1145/322261.322274},
	journal = {J. ACM},
	number = {3},
	pages = {615---628},
	title = {Should Tables Be Sorted?},
	volume = {28},
	year = {1981},
	bdsk-url-1 = {https://doi.org/10.1145/322261.322274}}

@article{f-cmacp-82,
	author = {Fredman, Michael L.},
	date-added = {2025-03-10 11:09:51 -0500},
	date-modified = {2025-03-10 11:13:13 -0500},
	doi = {10.1145/322290.322305},
	journal = {J. ACM},
	number = {1},
	pages = {250--260},
	title = {The Complexity of Maintaining an Array and Computing Its Partial Sums},
	volume = {29},
	year = {1982},
	bdsk-url-1 = {https://doi.org/10.1145/322290.322305}}

@article{hr-hrdpe-97,
	author = {Husfeldt, Thore and Rauhe, Theis},
	date-added = {2025-03-10 11:06:33 -0500},
	date-modified = {2025-03-10 11:07:52 -0500},
	doi = {10.7146/brics.v4i32.18958},
	journal = {BRICS Report Series},
	month = {Jun.},
	number = {32},
	title = {Hardness Results for Dynamic Problems by Extensions of {Fredman} and {Saks'} Chronogram Method},
	volume = {4},
	year = {1997},
	bdsk-url-1 = {https://doi.org/10.7146/brics.v4i32.18958}}

@inproceedings{fs-cpcdd-89,
	author = {Fredman, Michael L. and Saks, Michael E.},
	booktitle = {Proc. 21st Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-03-10 11:03:56 -0500},
	date-modified = {2025-03-10 11:04:23 -0500},
	doi = {10.1145/73007.73040},
	pages = {345--354},
	title = {The Cell Probe Complexity of Dynamic Data Structures},
	year = {1989},
	bdsk-url-1 = {https://doi.org/10.1145/73007.73040}}

@incollection{p-lbdc-16,
	author = {P{\u a}tra{\c s}cu, Mihai},
	booktitle = {Encyclopedia of Algorithms},
	date-added = {2025-03-10 10:57:17 -0500},
	date-modified = {2025-03-10 10:58:52 -0500},
	doi = {10.1007/978-1-4939-2864-4_214},
	pages = {1162--1167},
	publisher = {Springer},
	title = {Lower Bounds for Dynamic Connectivity},
	year = {2016},
	bdsk-url-1 = {https://doi.org/10.1007/978-1-4939-2864-4_214}}

@inproceedings{pd-lbdc-04,
	author = {P{\u a}tra{\c s}cu, Mihai and Demaine, Erik D.},
	booktitle = {Proc. 36th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-03-10 10:54:47 -0500},
	date-modified = {2025-03-10 10:58:47 -0500},
	doi = {10.1145/1007352.1007435},
	pages = {546--553},
	title = {Lower bounds for dynamic connectivity},
	year = {2004},
	bdsk-url-1 = {https://doi.org/10.1145/1007352.1007435}}

@inproceedings{kkm-dgcpw-13,
	author = {Kapron, Bruce M. and King, Valerie and Mountjoy, Ben},
	booktitle = {Proc. 24th ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-03-10 10:32:11 -0500},
	date-modified = {2025-03-10 10:36:22 -0500},
	doi = {10.1137/1.9781611973105.81},
	pages = {1131--1142},
	title = {Dynamic graph connectivity in polylogarithmic worst case time},
	year = {2013},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611973105.81}}

@inproceedings{cglnp-dabwa-20,
	arxiv = {1910.08025},
	author = {Chuzhoy, Julia and Gao, Yu and Li, Jason and Nanongkai, Danupon and Peng, Richard and Saranurak, Thatchaphol},
	booktitle = {Proc. 61st Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-03-10 10:29:51 -0500},
	date-modified = {2025-03-10 10:51:38 -0500},
	doi = {10.1109/FOCS46700.2020.00111},
	pages = {1158--1167},
	title = {A Deterministic Algorithm for Balanced Cut with Applications to Dynamic Connectivity, Flows, and Beyond},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS46700.2020.00111}}

@article{egin-stsdg-97,
	author = {Eppstein, David and Galil, Zvi and Italiano, Giuseppe F. and Nissenzweig, Amnon},
	date-added = {2025-03-10 10:28:56 -0500},
	date-modified = {2025-03-10 10:29:17 -0500},
	doi = {10.1145/265910.265914},
	journal = {J. ACM},
	number = {5},
	pages = {669--696},
	title = {Sparsification: {A} technique for speeding up dynamic graph algorithms},
	volume = {44},
	year = {1997},
	bdsk-url-1 = {https://doi.org/10.1145/265910.265914}}

@article{f-dsoum-85,
	author = {Frederickson, Greg N.},
	date-added = {2025-03-10 10:27:43 -0500},
	date-modified = {2025-03-10 10:28:00 -0500},
	doi = {10.1137/0214055},
	journal = {SIAM J. Comput.},
	number = {4},
	pages = {781--798},
	title = {Data Structures for On-Line Updating of Minimum Spanning Trees, with Applications},
	volume = {14},
	year = {1985},
	bdsk-url-1 = {https://doi.org/10.1137/0214055}}

@article{hhkpt-fdcoa-23,
	author = {Huang, Shang-En and Huang, Dawei and Kopelowitz, Tsvi and Pettie, Seth and Thorup, Mikkel},
	date-added = {2025-03-10 10:24:07 -0500},
	date-modified = {2025-03-10 10:25:54 -0500},
	doi = {10.46298/THEORETICS.23.6},
	journal = {TheoretiCS},
	number = {6},
	title = {Fully Dynamic Connectivity in {$O(\log n (\log\log n)^2)$} Amortized Expected Time},
	volume = {2},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.46298/theoretics.23.6}}

@article{hlt-pdfac-01,
	abstract = {Deterministic fully dynamic graph algorithms are presented for connectivity, minimum spanning tree, 2-edge connectivity, and biconnectivity. Assuming that we start with no edges in a graph with n vertices, the amortized operation costs are O(log2 n) for connectivity, O(log4 n) for minimum spanning forest, 2-edge connectivity, and O(log5 n) biconnectivity.},
	author = {Holm, Jacob and de Lichtenberg, Kristian and Thorup, Mikkel},
	date-added = {2025-03-10 10:12:39 -0500},
	date-modified = {2025-03-10 10:13:46 -0500},
	doi = {10.1145/502090.502095},
	journal = {J. ACM},
	keywords = {minimum spanning tree, dynamic graph algorithms, connectivity, Biconnectivity, 2-edge connectivity},
	number = {4},
	pages = {723--760},
	title = {Poly-logarithmic deterministic fully-dynamic algorithms for connectivity, minimum spanning tree, 2-edge, and biconnectivity},
	volume = {48},
	year = {2001},
	bdsk-url-1 = {https://doi.org/10.1145/502090.502095}}

@article{hhkpt-fdcon-23,
	arxiv = {1609.05867v4},
	author = {Huang, Shang-En and Huang, Dawei and Kopelowitz, Tsvi and Pettie, Seth and Thorup, Mikkel},
	date-added = {2025-03-04 15:01:39 -0600},
	date-modified = {2025-03-04 15:06:29 -0600},
	doi = {10.46298/THEORETICS.23.6},
	journal = {TheoretiCS},
	pages = {6:1--6:56},
	title = {Fully Dynamic Connectivity in {$O(\log n(\log\log n)^2)$} Amortized Expected Time},
	volume = {2},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.46298/theoretics.23.6}}

@inproceedings{sk-dbsti-23,
	annote = {Keywords: Binary Search Trees, Greedy Future, Geometric Greedy, Lower Bounds, Dynamic Optimality Conjecture},
	author = {Sadeh, Yaniv and Kaplan, Haim},
	booktitle = {Proc. 40th Int. Symp. Theoretical Aspects Comput. Sci. (STACS)},
	date-added = {2025-02-11 14:08:57 -0600},
	date-modified = {2025-02-11 14:55:42 -0600},
	doi = {10.4230/LIPIcs.STACS.2023.53},
	editor = {Berenbrink, Petra and Bouyer, Patricia and Dawar, Anuj and Kant\'{e}, Mamadou Moustapha},
	pages = {53:1--53:21},
	publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Dynamic Binary Search Trees: {Improved} Lower Bounds for the Greedy-Future Algorithm},
	volume = {254},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.4230/LIPIcs.STACS.2023.53}}

@inproceedings{ds-staub-09,
	author = {Derryberry, Jonathan and Sleator, Daniel Dominic},
	booktitle = {Algorithms and Data Structures, 11th International Symposium, {WADS} 2009, Banff, Canada, August 21-23, 2009. Proceedings},
	date-added = {2025-02-11 13:48:45 -0600},
	date-modified = {2025-02-11 13:49:48 -0600},
	doi = {10.1007/978-3-642-03367-4\_18},
	editor = {Dehne, Frank K. H. A. and Gavrilova, Marina L. and Sack, J{\"o}rg-R{\"u}diger and T{\'o}th, Csaba D.},
	keywords = {better tango trees},
	pages = {194--205},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Skip-Splay: {Toward} Achieving the Unified Bound in the {BST} Model},
	volume = {5664},
	year = {2009},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-03367-4%5C_18}}

@inproceedings{ae-lisub-23,
	author = {Agarwal, Pankaj K. and Ezra, Esther},
	booktitle = {Proc. 39th Int. Symp. Comput. Geom. (SOCG)},
	date-added = {2025-02-10 07:36:55 -0600},
	date-modified = {2025-02-10 07:46:54 -0600},
	doi = {10.4230/LIPICS.SOCG.2023.5},
	editor = {Chambers, Erin W. and Gudmundsson, Joachim},
	pages = {5:1--5:14},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Line Intersection Searching Amid Unit Balls in 3-Space},
	volume = {258},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.SOCG.2023.5}}

@inproceedings{ac-lbira-23,
	author = {Afshani, Peyman and Cheng, Pingan},
	booktitle = {Proc. 39th Int. Symp. Comput. Geom. (SOCG)},
	date-added = {2025-02-10 07:35:58 -0600},
	date-modified = {2025-02-10 07:46:48 -0600},
	doi = {10.4230/LIPICS.SOCG.2023.3},
	editor = {Chambers, Erin W. and Gudmundsson, Joachim},
	pages = {3:1--3:16},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Lower Bounds for Intersection Reporting Among Flat Objects},
	volume = {258},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.SOCG.2023.3}}

@inproceedings{afkr-dfdo-24,
	author = {Aronov, Boris and Farhana, Tsuri and Katz, Matthew J. and Ramesh, Indu},
	booktitle = {Proc. 40th Int. Symp. Comput. Geom. (SOCG)},
	date-added = {2025-02-10 07:31:42 -0600},
	date-modified = {2025-02-10 07:46:40 -0600},
	doi = {10.4230/LIPICS.SOCG.2024.10},
	editor = {Mulzer, Wolfgang and Phillips, Jeff M.},
	pages = {10:1--10:14},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Discrete {Fr{\'e}chet} Distance Oracles},
	volume = {293},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.SOCG.2024.10}}

@inproceedings{kw-qssan-24,
	author = {Kisfaludi-Bak, S{\'a}ndor and van Wordragen, Geert},
	booktitle = {Proc. 40th Int. Symp. Comput. Geom. (SOCG)},
	date-added = {2025-02-10 07:30:49 -0600},
	date-modified = {2025-02-10 07:55:48 -0600},
	doi = {10.4230/LIPICS.SOCG.2024.68},
	editor = {Mulzer, Wolfgang and Phillips, Jeff M.},
	pages = {68:1--68:15},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"u}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {A Quadtree, a {Steiner} Spanner, and Approximate Nearest Neighbours in Hyperbolic Space},
	volume = {293},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.SOCG.2024.68}}

@inproceedings{bbw-dchsp-24,
	author = {Brewer, Bruce W. and Brodal, Gerth St{\o}lting and Wang, Haitao},
	booktitle = {Proc. 40th Int. Symp. Comput. Geom. (SOCG)},
	date-added = {2025-02-10 07:25:20 -0600},
	date-modified = {2025-02-10 07:46:28 -0600},
	doi = {10.4230/LIPICS.SOCG.2024.24},
	editor = {Mulzer, Wolfgang and Phillips, Jeff M.},
	pages = {24:1--24:15},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Dynamic Convex Hulls for Simple Paths},
	volume = {293},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.SOCG.2024.24}}

@inproceedings{ch-dgcpw-24,
	author = {Chan, Timothy M. and Huang, Zhengcheng},
	booktitle = {Proc. 40th Int. Symp. Comput. Geom. (SOCG)},
	date-added = {2025-02-10 07:22:07 -0600},
	date-modified = {2025-02-10 07:46:37 -0600},
	doi = {10.4230/LIPICS.SOCG.2024.36},
	editor = {Mulzer, Wolfgang and Phillips, Jeff M.},
	pages = {36:1--36:13},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Dynamic Geometric Connectivity in the Plane with Constant Query Time},
	volume = {293},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.SOCG.2024.36}}

@article{mp-gchws-23,
	arxiv = {2010.01890},
	author = {Minaud, Brice and Papamanthou, Charalampos},
	date-added = {2025-02-09 16:28:14 -0600},
	date-modified = {2025-03-20 17:09:42 -0500},
	doi = {10.1016/J.IPL.2022.106356},
	journal = {Inf. Process. Lett.},
	pages = {106356},
	title = {Generalized cuckoo hashing with a stash, revisited},
	volume = {181},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1016/J.IPL.2022.106356}}

@inproceedings{ks-fdscc-23,
	author = {Karczmarz, Adam and Smulewicz, Marcin},
	booktitle = {Proc. 31st Ann. European Symp. Algorithms (ESA)},
	date-added = {2025-02-09 16:16:00 -0600},
	date-modified = {2025-02-09 22:47:52 -0600},
	doi = {10.4230/LIPICS.ESA.2023.68},
	editor = {G{\o}rtz, Inge Li and Farach-Colton, Mart{\'\i}n and Puglisi, Simon J. and Herman, Grzegorz},
	pages = {68:1--68:15},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {On Fully Dynamic Strongly Connected Components},
	volume = {274},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.ESA.2023.68}}

@inproceedings{lmn-tsds-24,
	author = {Lipt{\'a}k, Zsuzsanna and Masillo, Francesco and Navarro, Gonzalo},
	booktitle = {Proc. 32nd Ann. European Symp. Algorithms (ESA)},
	date-added = {2025-02-09 16:08:53 -0600},
	date-modified = {2025-02-09 22:47:38 -0600},
	doi = {10.4230/LIPICS.ESA.2024.86},
	editor = {Chan, Timothy M. and Fischer, Johannes and Iacono, John and Herman, Grzegorz},
	pages = {86:1--86:16},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {A Textbook Solution for Dynamic Strings},
	volume = {308},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.ESA.2024.86}}

@inproceedings{flos-ibltwl-24,
	author = {Fleischhacker, Nils and Larsen, Kasper Green and Obremski, Maciej and Simkin, Mark},
	booktitle = {Proc. 32nd Ann. European Symp. Algorithms (ESA)},
	date-added = {2025-02-09 16:06:41 -0600},
	date-modified = {2025-02-09 22:47:33 -0600},
	doi = {10.4230/LIPICS.ESA.2024.54},
	editor = {Chan, Timothy M. and Fischer, Johannes and Iacono, John and Herman, Grzegorz},
	pages = {54:1--54:17},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Invertible Bloom Lookup Tables with Less Memory and Randomness},
	volume = {308},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.ESA.2024.54}}

@article{dhip-doa-07,
	author = {Demaine, Erik D. and Harmon*, Dion and Iacono, John and P\u{a}tra\c{s}cu**, Mihai},
	date-added = {2025-02-09 15:26:09 -0600},
	date-modified = {2025-02-09 15:27:24 -0600},
	doi = {10.1137/S0097539705447347},
	journal = {{SIAM} J. Comput.},
	number = {1},
	pages = {240--251},
	title = {Dynamic Optimality---Almost},
	volume = {37},
	year = {2007},
	bdsk-url-1 = {https://doi.org/10.1137/S0097539705447347}}

@misc{wz-durr-25,
	arxiv = {2501.00120},
	author = {Wang, Haitao and Zhao, Yiming},
	date-added = {2025-02-09 14:28:11 -0600},
	date-modified = {2025-02-09 17:00:48 -0600},
	howpublished = {Preprint},
	title = {Dynamic Unit-Disk Range Reporting},
	year = {2025}}

@misc{szr-bbfwc-25,
	arxiv = {2501.18977},
	author = {Schmitz, Johanna Elena and Zentgraf, Jens and Rahmann, Sven},
	date-added = {2025-02-09 14:24:38 -0600},
	date-modified = {2025-02-09 14:24:55 -0600},
	howpublished = {Preprint},
	title = {Blocked Bloom Filters with Choices},
	year = {2025}}

@inproceedings{ht-sjtuf-23,
	annote = {Keywords: dimensionality reduction, hashing, concentration bounds, moment bounds},
	author = {Houen, Jakob B{\ae}k Tejs and Thorup, Mikkel},
	booktitle = {Proc. 50th Int. Colloq. Automata Lang. Prog. {ICALP}},
	date-added = {2025-02-09 14:17:52 -0600},
	date-modified = {2025-02-09 14:18:19 -0600},
	doi = {10.4230/LIPIcs.ICALP.2023.76},
	editor = {Etessami, Kousha and Feige, Uriel and Puppis, Gabriele},
	pages = {76:1--76:20},
	publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {{A Sparse Johnson-Lindenstrauss Transform Using Fast Hashing}},
	volume = {261},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.4230/LIPIcs.ICALP.2023.76}}

@inproceedings{bd-gts-23,
	author = {Blelloch, Guy E. and Dobson, Magdalen},
	booktitle = {Proc. 50th Int. Colloq. Automata Lang. Prog. (ICALP)},
	date-added = {2025-02-09 14:15:30 -0600},
	date-modified = {2025-02-09 22:44:32 -0600},
	doi = {10.4230/LIPICS.ICALP.2023.26},
	editor = {Etessami, Kousha and Feige, Uriel and Puppis, Gabriele},
	pages = {26:1--26:19},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {The Geometry of Tree-Based Sorting},
	volume = {261},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.ICALP.2023.26}}

@inproceedings{acrw-rsq-23,
	author = {Afshani, Peyman and Cheng, Pingan and Roy, Aniket Basu and Wei, Zhewei},
	booktitle = {Proc. 50th Int. Colloq. Automata Lang. Prog. {ICALP}},
	date-added = {2025-02-09 14:12:23 -0600},
	date-modified = {2025-02-09 14:12:46 -0600},
	doi = {10.4230/LIPICS.ICALP.2023.7},
	editor = {Etessami, Kousha and Feige, Uriel and Puppis, Gabriele},
	pages = {7:1--7:17},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {On Range Summary Queries},
	volume = {261},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.ICALP.2023.7}}

@inproceedings{ks-fdscc-24,
	author = {Karczmarz, Adam and Smulewicz, Marcin},
	booktitle = {Proc. 51st Int. Colloq. Automata Lang. Prog. {ICALP}},
	date-added = {2025-02-09 14:08:26 -0600},
	date-modified = {2025-02-09 14:09:28 -0600},
	doi = {10.4230/LIPICS.ICALP.2024.95},
	editor = {Bringmann, Karl and Grohe, Martin and Puppis, Gabriele and Svensson, Ola},
	pages = {95:1--95:20},
	publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Fully Dynamic Strongly Connected Components in Planar Digraphs},
	volume = {297},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.ICALP.2024.95}}

@article{cdk-dscsb-24,
	author = {Conradi, Jacobus and Driemel, Anne and Kolbe, Benedikt},
	date-added = {2025-02-09 14:02:08 -0600},
	date-modified = {2025-02-09 14:03:15 -0600},
	doi = {10.57717/cgt.v3i2.45},
	journal = {Comput. Geom. Topol.},
	number = {2},
	pages = {6:1--6:22},
	title = {$(1+\epsilon)$-{ANN} Data Structure for Curves via Subspaces of Bounded Doubling Dimension},
	volume = {3},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.57717/cgt.v3i2.45}}

@article{bkkkm-dcdg-24,
	author = {Baumann, Alexander and Kaplan, Haim and Klost, Katharina and Knorr, Kristin and Mulzer, Wolfgang and Roditty, Liam and Seiferth, Paul},
	date-added = {2025-02-09 13:56:26 -0600},
	date-modified = {2025-02-09 16:19:24 -0600},
	doi = {10.1007/S00454-023-00621-X},
	journal = {Discrete Comput. Geom.},
	number = {1},
	pages = {214--277},
	title = {Dynamic Connectivity in Disk Graphs},
	volume = {71},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1007/S00454-023-00621-X}}

@article{dsm-lifh-24,
	author = {Demin, Danila and Sirotkin, Dmitry and Moiseev, Stanislav},
	date-added = {2025-02-09 13:52:04 -0600},
	date-modified = {2025-02-09 17:32:52 -0600},
	doi = {10.7155/JGAA.V28I1.2926},
	journal = {J. Graph Algorithms Appl.},
	number = {1},
	pages = {27--50},
	title = {Linear-algebraic implementation of {Fibonacci} heap},
	volume = {28},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.7155/JGAA.V28I1.2926}}

@article{gu-bdlup-23,
	author = {Gawrychowski, Pawel and Uznanski, Przemyslaw},
	date-added = {2025-02-09 13:50:43 -0600},
	date-modified = {2025-02-09 13:51:00 -0600},
	doi = {10.1007/S00453-023-01133-Z},
	journal = {Algorithmica},
	number = {6},
	pages = {1805--1823},
	title = {Better Distance Labeling for Unweighted Planar Graphs},
	volume = {85},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1007/S00453-023-01133-Z}}

@article{bms-sbpqo-23,
	author = {Bacic, Joyce and Mehrabi, Saeed and Smid, Michiel},
	date-added = {2025-02-09 13:48:16 -0600},
	date-modified = {2025-02-09 13:48:27 -0600},
	doi = {10.1007/S00453-022-01045-4},
	journal = {Algorithmica},
	number = {6},
	pages = {1679--1705},
	title = {Shortest Beer Path Queries in Outerplanar Graphs},
	volume = {85},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1007/S00453-022-01045-4}}

@article{dkst-lsdsfg-24,
	author = {Das, Bireswar and Kumar, Anant and Sharma, Shivdutt and Thakkar, Dhara},
	date-added = {2025-02-09 13:44:55 -0600},
	date-modified = {2025-02-09 13:45:05 -0600},
	doi = {10.1007/S00453-024-01212-9},
	journal = {Algorithmica},
	number = {6},
	pages = {1979--2025},
	title = {Linear Space Data Structures for Finite Groups with Constant Query-Time},
	volume = {86},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1007/S00453-024-01212-9}}

@article{bgs-puw-24,
	author = {Bille, Philip and G{\o}rtz, Inge Li and Stordalen, Tord},
	date-added = {2025-02-09 13:41:23 -0600},
	date-modified = {2025-02-09 13:41:39 -0600},
	doi = {10.1007/S00453-023-01193-1},
	journal = {Algorithmica},
	number = {5},
	pages = {1578--1599},
	title = {Predecessor on the Ultra-Wide Word {RAM}},
	volume = {86},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1007/S00453-023-01193-1}}

@article{bcfkt-ihomh-23,
	author = {Bender, Michael A. and Conway, Alex and Farach-Colton, Mart{\'\i}n and Kuszmaul, William and Tagliavini, Guido},
	date-added = {2025-02-09 13:38:12 -0600},
	date-modified = {2025-02-09 13:38:33 -0600},
	doi = {10.1145/3625817},
	journal = {J. {ACM}},
	number = {6},
	pages = {40:1--40:51},
	title = {Iceberg Hashing: Optimizing Many Hash-Table Criteria at Once},
	volume = {70},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3625817}}

@article{cglmp-aoedo-23,
	author = {Charalampopoulos, Panagiotis and Gawrychowski, Pawel and Long, Yaowei and Mozes, Shay and Pettie, Seth and Weimann, Oren and Wulff{-}Nilsen, Christian},
	date-added = {2025-02-09 13:36:21 -0600},
	date-modified = {2025-02-09 13:36:33 -0600},
	doi = {10.1145/3580474},
	journal = {J. {ACM}},
	number = {2},
	pages = {12:1--12:50},
	title = {Almost Optimal Exact Distance Oracles for Planar Graphs},
	volume = {70},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3580474}}

@article{ac-lbsrs-23,
	author = {Afshani, Peyman and Cheng, Pingan},
	date-added = {2025-02-09 13:35:25 -0600},
	date-modified = {2025-02-09 13:35:41 -0600},
	doi = {10.1145/3578574},
	journal = {J. {ACM}},
	number = {2},
	pages = {16:1--16:26},
	title = {Lower Bounds for Semialgebraic Range Searching and Stabbing Problems},
	volume = {70},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3578574}}

@article{krrw-ipmqta-24,
	author = {Kociumaka, Tomasz and Radoszewski, Jakub and Rytter, Wojciech and Walen, Tomasz},
	date-added = {2025-02-09 13:31:48 -0600},
	date-modified = {2025-02-09 13:31:55 -0600},
	doi = {10.1137/23M1567618},
	journal = {{SIAM} J. Comput.},
	number = {5},
	pages = {1524--1577},
	title = {Internal Pattern Matching Queries in a Text and Applications},
	volume = {53},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/23M1567618}}

@article{tz-ora-24,
	arxiv = {2211.11009},
	author = {Tarjan, Robert E. and Zwick, Uri},
	date-added = {2025-02-09 13:26:37 -0600},
	date-modified = {2025-02-09 13:27:05 -0600},
	doi = {10.1137/23M1575792},
	journal = {{SIAM} J. Comput.},
	number = {5},
	pages = {1354--1380},
	title = {Optimal Resizable Arrays},
	volume = {53},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/23M1575792}}

@misc{ccclp-lb-23,
	arxiv = {2211.09251v2},
	author = {Cao, Xinyuan and Chen, Jingbang and Chen, Li and Lambert, Chris and Peng, Richard and Sleator, Daniel},
	date-added = {2025-02-06 13:05:50 -0600},
	date-modified = {2025-02-06 13:06:46 -0600},
	howpublished = {Preprint},
	title = {Learning-Augmented B-Trees},
	year = {2023},
	bdsk-url-1 = {https://arxiv.org/abs/2211.09251}}

@inproceedings{dfps-doc-24,
	author = {Dallot, Julien and Fesharaki, Amirmehdi Jafari and Pacut, Maciej and Schmid, Stefan},
	booktitle = {Proc. 43rd {IEEE} Conf. Comput. Commun. (INFOCOM)},
	date-added = {2025-02-06 12:50:53 -0600},
	date-modified = {2025-02-06 12:51:14 -0600},
	doi = {10.1109/INFOCOM52122.2024.10621422},
	keywords = {Directed acyclic graph;Costs;Classification algorithms},
	pages = {871--880},
	title = {Dependency-Aware Online Caching},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1109/INFOCOM52122.2024.10621422}}

@inproceedings{pass-sdolst-23,
	author = {Pourdamghani, Arash and Avin, Chen and Sama, Robert and Schmid, Stefan},
	booktitle = {Proc. 42nd {IEEE} Conf. Comput. Commun. (INFOCOM)},
	date-added = {2025-02-06 12:46:16 -0600},
	date-modified = {2025-02-06 12:47:46 -0600},
	doi = {10.1109/INFOCOM53939.2023.10228999},
	keywords = {Costs;Heuristic algorithms;Data structures;Routing;Reconfigurable datacenters;Online algorithms;Self-adjusting data structure},
	pages = {1--10},
	title = {SeedTree: A Dynamically Optimal and Local Self-Adjusting Tree},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/INFOCOM53939.2023.10228999}}

@inproceedings{cgjap-ipbgb-23,
	abstract = { Greedy BST (or simply Greedy) is an online self-adjusting binary search tree defined in the geometric view ([Lucas, 1988; Munro, 2000; Demaine, Harmon, Iacono, Kane, Patrascu, SODA 2009). Along with Splay trees (Sleator, Tarjan 1985), Greedy is considered the most promising candidate for being dynamically optimal, i.e., starting with any initial tree, their access costs on any sequence is conjectured to be within O(1) factor of the offline optimal. However, despite having received a lot of attention in the past four decades, the question has remained elusive even for highly restricted input. In this paper, we prove new bounds on the cost of Greedy in the ``pattern avoidance'' regime. Our new results include: * The (preorder) traversal conjecture for Greedy holds up to a factor of O(2α(n)), improving upon the bound of 2α(n)O(1) in (Chalermsook et al., FOCS 2015) where α(n) is the inverse Ackermann function of n. This is the best known bound obtained by any online BSTs. * We settle the postorder traversal conjecture for Greedy. Previously this was shown for Splay trees only in certain special cases (Levy and Tarjan, WADS 2019). * The deque conjecture for Greedy holds up to a factor of O(α(n)), improving upon the bound 2O(α(n)) in (Chalermsook, et al., WADS 2015). This is arguably ``one step away'' from the bound O(α*(n)) for Splay trees (Pettie, SODA 2010). * The split conjecture holds for Greedy up to a factor of O(2α(n)). Previously the factor of O(α(n)) was shown for Splay trees only in a special case (Lucas, 1988). The input sequences in traversal and deque conjectures are perhaps ``easiest'' in the pattern-avoiding input classes and yet among the most notorious special cases of the dynamic optimality conjecture. Key to all these results is to partition (based on the input structures) the execution log of Greedy into several simpler-to-analyze subsets for which classical forbidden submatrix bounds can be leveraged. We believe that this simple method will find further applications in doing amortized analysis of data structures via extremal combinatorics. Finally, we show the applicability of this technique to handle a class of increasingly complex pattern-avoiding input sequences, called k-increasing sequences. As a bonus, we discover a new class of permutation matrices whose extremal bounds are polynomially bounded. This gives a partial progress on an open question by Jacob Fox (2013). * The full version of the paper can be accessed at https://arxiv.org/abs/2211.04112 },
	author = {Chalermsook, Parinya and Gupta, Manoj and Jiamjitrak, Wanchote and Acosta, Nidia Obscura and Pareek, Akash and Yingchareonthawornchai, Sorrachai},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-02-06 12:41:33 -0600},
	date-modified = {2025-02-06 12:42:42 -0600},
	doi = {10.1137/1.9781611977554.ch22},
	keywords = {dynamic optimality},
	pages = {509--534},
	title = {Improved Pattern-Avoidance Bounds for Greedy {BSTs} via Matrix Decomposition},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.ch22}}

@inproceedings{bko-owpi-24,
	abstract = {Permutation pattern-avoidance is a central concept of both enumerative and extremal combinatorics. In this paper we study the effect of permutation pattern-avoidance on the complexity of optimization problems.    In the context of the dynamic optimality conjecture (Sleator, Tarjan, STOC 1983), Chalermsook, Goswami, Kozma, Mehlhorn, and Saranurak (FOCS 2015) conjectured that the amortized search cost of an optimal binary search tree (BST) is constant whenever the search sequence is pattern-avoiding. The best known bound to date is 2α(n)(1+o(1)) recently obtained by Chalermsook, Pettie, and Yingchareonthawornchai (SODA 2024); here n is the BST size and α(·) the inverse-Ackermann function. In this paper we resolve the conjecture, showing a tight (1) bound. This indicates a barrier to dynamic optimality: any candidate online BST (e.g., splay trees or greedy trees) must match this optimum, but current analysis techniques only give superconstant bounds.    More broadly, we argue that the easiness of pattern-avoiding input is a general phenomenon, not limited to BSTs or even to data structures. To illustrate this, we show that when the input avoids an arbitrary, fixed, a priori unknown pattern, one can efficiently compute: (1) a k-server solution of n requests from a unit interval, with total cost n(1/logk), in contrast to the worst-case Θ(n/k) bound, and (2) a traveling salesman tour of n points from a unit box, of length (logn), in contrast to the worst-case Θ(√n) bound; similar results hold for the euclidean minimum spanning tree, Steiner tree, and nearest-neighbor graphs.    We show both results to be tight. Our techniques build on the Marcus-Tardos proof of the Stanley-Wilf conjecture, and on the recently emerging concept of twin-width.},
	arxiv = {2310.04236},
	author = {Berendsohn, Benjamin Aram and Kozma, L{\'a}szl{\'o} and Opler, Michal},
	booktitle = {Proc. 56th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-06 12:34:57 -0600},
	date-modified = {2025-02-09 22:46:51 -0600},
	doi = {10.1145/3618260.3649631},
	keywords = {Pattern avoidance, TSP, binary search trees, k-server, twin-width, dynamic optimzality},
	pages = {671---682},
	title = {Optimization with Pattern-Avoiding Input},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3618260.3649631}}

@inproceedings{bhp-dbf-24,
	author = {Bercea, Ioana O. and Houen, Jakob B{\ae}k Tejs and Pagh, Rasmus},
	booktitle = {Proc. 19th Scand. Symp. Workshops Algorithm Theory (SWAT)},
	date-added = {2025-02-03 10:22:17 -0600},
	date-modified = {2025-03-21 08:10:31 -0500},
	doi = {10.4230/LIPICS.SWAT.2024.9},
	editor = {Bodlaender, Hans L.},
	pages = {9:1--9:19},
	publisher = {Schloss Dagstuhl--Leibniz-Zentrum f{\"u}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Daisy {Bloom} Filters},
	volume = {294},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.SWAT.2024.9}}

@inproceedings{bcns-sdscg-24,
	author = {Balakrishnan, Girish and Chakraborty, Sankardeep and Narayanaswamy, N. S. and Sadakane, Kunihiko},
	booktitle = {Proc. 19th Scand. Symp. Workshops Algorithm Theory {SWAT}},
	date-added = {2025-02-03 10:20:52 -0600},
	date-modified = {2025-02-03 10:22:06 -0600},
	doi = {10.4230/LIPICS.SWAT.2024.4},
	editor = {Bodlaender, Hans L.},
	pages = {4:1--4:16},
	publisher = {Schloss Dagstuhl--Leibniz-Zentrum f{\"u}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {Succinct Data Structure for Chordal Graphs with Bounded Vertex Leafage},
	volume = {294},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.4230/LIPICS.SWAT.2024.4}}

@inproceedings{kptw-phscw-23,
	author = {Kacham, Praneeth and Pagh, Rasmus and Thorup, Mikkel and Woodruff, David P.},
	booktitle = {Proc. 64th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 10:17:54 -0600},
	date-modified = {2025-02-03 10:18:14 -0600},
	doi = {10.1109/FOCS57990.2023.00093},
	pages = {1515--1550},
	title = {Pseudorandom Hashing for Space-bounded Computation with Applications in Streaming},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS57990.2023.00093}}

@inproceedings{bccfk-cdowl-23,
	author = {Bil{\`{o}}, Davide and Choudhary, Keerti and Cohen, Sarel and Friedrich, Tobias and Krogmann, Simon and Schirneck, Martin},
	booktitle = {Proc. 18th Int. Symp. Algorithms Data Struct. (WADS)},
	date-added = {2025-02-03 10:15:41 -0600},
	date-modified = {2025-02-03 10:16:02 -0600},
	doi = {10.1007/978-3-031-38906-1_11},
	editor = {Morin, Pat and Suri, Subhash},
	pages = {149--163},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Compact Distance Oracles with Large Sensitivity and Low Stretch},
	volume = {14079},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-031-38906-1_11}}

@inproceedings{dguw-dprqs-23,
	author = {Deng, Chengyuan and Gao, Jie and Upadhyay, Jalaj and Wang, Chen},
	booktitle = {Proc. 18th Int. Symp. Algorithms Data Struct. (WADS)},
	date-added = {2025-02-03 10:14:05 -0600},
	date-modified = {2025-02-03 10:15:04 -0600},
	doi = {10.1007/978-3-031-38906-1_23},
	editor = {Morin, Pat and Suri, Subhash},
	pages = {340--370},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Differentially Private Range Query on Shortest Paths},
	volume = {14079},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-031-38906-1_23}}

@inproceedings{brs-emfps-23,
	author = {Brodal, Gerth St{\o}lting and Rysgaard, Casper Moldrup and Svenning, Rolf},
	booktitle = {Proc. 55th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 10:11:05 -0600},
	date-modified = {2025-02-09 22:45:50 -0600},
	doi = {10.1145/3564246.3585140},
	editor = {Saha, Barna and Servedio, Rocco A.},
	pages = {1410--1423},
	title = {External Memory Fully Persistent Search Trees},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3564246.3585140}}

@inproceedings{bcccf-adsoss-23,
	author = {Bil{\`{o}}, Davide and Chechik, Shiri and Choudhary, Keerti and Cohen, Sarel and Friedrich, Tobias and Krogmann, Simon and Schirneck, Martin},
	booktitle = {Proc. 55th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 10:10:40 -0600},
	date-modified = {2025-02-09 22:45:54 -0600},
	doi = {10.1145/3564246.3585251},
	editor = {Saha, Barna and Servedio, Rocco A.},
	pages = {1396--1409},
	title = {Approximate Distance Sensitivity Oracles in Subquadratic Space},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3564246.3585251}}

@inproceedings{cz-dafda-23,
	author = {Chuzhoy, Julia and Zhang, Ruimin},
	booktitle = {Proc. 55th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 10:09:21 -0600},
	date-modified = {2025-02-09 22:45:59 -0600},
	doi = {10.1145/3564246.3585196},
	editor = {Saha, Barna and Servedio, Rocco A.},
	pages = {1159--1172},
	title = {A New Deterministic Algorithm for Fully Dynamic All-Pairs Shortest Paths},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3564246.3585196}}

@inproceedings{fng-diawp-23,
	author = {Forster, Sebastian and Nazari, Yasamin and Gutenberg, Maximilian Probst},
	booktitle = {Proc. 55th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 10:08:57 -0600},
	date-modified = {2025-02-09 22:46:09 -0600},
	doi = {10.1145/3564246.3585213},
	editor = {Saha, Barna and Servedio, Rocco A.},
	pages = {1173--1186},
	title = {Deterministic Incremental {APSP} with Polylogarithmic Update Time and Stretch},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3564246.3585213}}

@inproceedings{su-dnamc-23,
	author = {Solomon, Shay and Uzrad, Amitai},
	booktitle = {Proc. 55th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 10:07:23 -0600},
	date-modified = {2025-02-09 22:46:06 -0600},
	doi = {10.1145/3564246.3585211},
	editor = {Saha, Barna and Servedio, Rocco A.},
	pages = {1187--1200},
	title = {Dynamic $((1+\epsilon)\ln n)$-Approximation Algorithms for Minimum Set Cover and Dominating Set},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3564246.3585211}}

@inproceedings{cnr-idcsg-23,
	author = {Christiansen, Aleksander Bj{\o}rn Grodt and Nowicki, Krzysztof and Rotenberg, Eva},
	booktitle = {Proc. 55th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 10:07:00 -0600},
	date-modified = {2025-02-09 22:46:03 -0600},
	doi = {10.1145/3564246.3585111},
	editor = {Saha, Barna and Servedio, Rocco A.},
	pages = {1201--1214},
	title = {Improved Dynamic Colouring of Sparse Graphs},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3564246.3585111}}

@inproceedings{bls-dmdip-23,
	author = {van den Brand, Jan and Liu, Yang P. and Sidford, Aaron},
	booktitle = {Proc. 55th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 10:06:02 -0600},
	date-modified = {2025-02-09 22:46:21 -0600},
	doi = {10.1145/3564246.3585135},
	editor = {Saha, Barna and Servedio, Rocco A.},
	pages = {1215--1228},
	title = {Dynamic Maxflow via Dynamic Interior Point Methods},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3564246.3585135}}

@inproceedings{gg-docpw-24,
	author = {Ghaffari, Mohsen and Grunau, Christoph},
	booktitle = {Proc. 56th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 10:00:59 -0600},
	date-modified = {2025-02-09 22:46:54 -0600},
	doi = {10.1145/3618260.3649782},
	editor = {Mohar, Bojan and Shinkar, Igor and O'Donnell, Ryan},
	pages = {1184--1191},
	title = {Dynamic {$O($}Arboricity$)$ Coloring in Polylogarithmic Worst-Case Time},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3618260.3649782}}

@inproceedings{kmg-dsptl-24,
	author = {Kyng, Rasmus and Meierhans, Simon and Gutenberg, Maximilian Probst},
	booktitle = {Proc. 56th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 10:00:15 -0600},
	date-modified = {2025-02-09 22:47:11 -0600},
	doi = {10.1145/3618260.3649767},
	editor = {Mohar, Bojan and Shinkar, Igor and O'Donnell, Ryan},
	pages = {1174--1183},
	title = {A Dynamic Shortest Paths Toolbox: Low-Congestion Vertex Sparsifiers and Their Applications},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3618260.3649767}}

@inproceedings{cklmg-ataig-24,
	author = {Chen, Li and Kyng, Rasmus and Liu, Yang P. and Meierhans, Simon and Gutenberg, Maximilian Probst},
	booktitle = {Proc. 56th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 09:59:14 -0600},
	date-modified = {2025-02-09 22:47:07 -0600},
	doi = {10.1145/3618260.3649745},
	editor = {Mohar, Bojan and Shinkar, Igor and O'Donnell, Ryan},
	pages = {1165--1173},
	title = {Almost-Linear Time Algorithms for Incremental Graphs: {Cycle} Detection, {SCC}s, {$s$-$t$} Shortest Path, and Minimum-Cost Flow},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3618260.3649745}}

@inproceedings{kw-slbdf-24,
	author = {Kuszmaul, William and Walzer, Stefan},
	booktitle = {Proc. 56th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 09:40:03 -0600},
	date-modified = {2025-02-09 22:47:00 -0600},
	doi = {10.1145/3618260.3649649},
	editor = {Mohar, Bojan and Shinkar, Igor and O'Donnell, Ryan},
	pages = {1153--1164},
	title = {Space Lower Bounds for Dynamic Filters and Value-Dynamic Retrieval},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3618260.3649649}}

@inproceedings{m-fdasp-24,
	author = {Mao, Xiao},
	booktitle = {Proc. 56th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-02-03 09:38:03 -0600},
	date-modified = {2025-02-09 22:47:04 -0600},
	doi = {10.1145/3618260.3649695},
	editor = {Mohar, Bojan and Shinkar, Igor and O'Donnell, Ryan},
	pages = {1141--1152},
	title = {Fully Dynamic All-Pairs Shortest Paths: {Likely} Optimal Worst-Case Update Time},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3618260.3649695}}

@inproceedings{kmnps-dt-23,
	author = {Korhonen, Tuukka and Majewski, Konrad and Nadara, Wojciech and Pilipczuk, Michal and Sokolowski, Marek},
	booktitle = {Proc. 64th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:31:33 -0600},
	date-modified = {2025-02-03 09:31:50 -0600},
	doi = {10.1109/FOCS57990.2023.00105},
	pages = {1734--1744},
	title = {Dynamic treewidth},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS57990.2023.00105}}

@inproceedings{ks-sddog-23,
	author = {Karczmarz, Adam and Sankowski, Piotr},
	booktitle = {Proc. 64th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:31:06 -0600},
	date-modified = {2025-02-03 09:31:23 -0600},
	doi = {10.1109/FOCS57990.2023.00106},
	pages = {1745--1756},
	title = {Sensitivity and Dynamic Distance Oracles via Generic Matrices and Frobenius Form},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS57990.2023.00106}}

@inproceedings{llyz-tclbd-23,
	author = {Li, Tianxiao and Liang, Jingxun and Yu, Huacheng and Zhou, Renfei},
	booktitle = {Proc. 64th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:30:09 -0600},
	date-modified = {2025-02-03 09:30:29 -0600},
	doi = {10.1109/FOCS57990.2023.00112},
	pages = {1842--1862},
	title = {Tight Cell-Probe Lower Bounds for Dynamic Succinct Dictionaries},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS57990.2023.00112}}

@inproceedings{k-shsau-23,
	author = {Kuszmaul, William},
	booktitle = {Proc. 64th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:29:40 -0600},
	date-modified = {2025-02-03 09:30:00 -0600},
	doi = {10.1109/FOCS57990.2023.00111},
	pages = {1822--1841},
	title = {Strongly History-Independent Storage Allocation: New Upper and Lower Bounds},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS57990.2023.00111}}

@inproceedings{bk-dfdsm-23,
	author = {van den Brand, Jan and Karczmarz, Adam},
	booktitle = {Proc. 64th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:28:54 -0600},
	date-modified = {2025-02-03 09:29:09 -0600},
	doi = {10.1109/FOCS57990.2023.00142},
	pages = {2312--2321},
	title = {Deterministic Fully Dynamic {SSSP} and More},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS57990.2023.00142}}

@inproceedings{es-pdowl-23,
	author = {Elkin, Michael and Shabat, Idan},
	booktitle = {Proc. 64th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:27:56 -0600},
	date-modified = {2025-02-03 09:28:50 -0600},
	doi = {10.1109/FOCS57990.2023.00141},
	pages = {2278--2311},
	title = {Path-Reporting Distance Oracles with Logarithmic Stretch and Size {$O(n \log \log n)$}},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS57990.2023.00141}}

@inproceedings{llyz-ds-23,
	author = {Li, Tianxiao and Liang, Jingxun and Yu, Huacheng and Zhou, Renfei},
	booktitle = {Proc. 64th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:24:53 -0600},
	date-modified = {2025-02-03 09:25:08 -0600},
	doi = {10.1109/FOCS57990.2023.00104},
	pages = {1715--1733},
	title = {Dynamic "Succincter"},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS57990.2023.00104}}

@inproceedings{bbkht-luh-23,
	author = {Bercea, Ioana O. and Beretta, Lorenzo and Klausen, Jonas and Houen, Jakob B{\ae}k Tejs and Thorup, Mikkel},
	booktitle = {Proc. 64th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:23:53 -0600},
	date-modified = {2025-02-03 09:24:10 -0600},
	doi = {10.1109/FOCS57990.2023.00089},
	pages = {1440--1470},
	title = {Locally Uniform Hashing},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS57990.2023.00089}}

@inproceedings{hhrtt-uodbh-24,
	author = {Haeupler, Bernhard and Hlad{\'{\i}}k, Richard and Rozhon, V{\'{a}}clav and Tarjan, Robert E. and Tetek, Jakub},
	booktitle = {Proc. 65th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:16:46 -0600},
	date-modified = {2025-02-03 09:17:09 -0600},
	doi = {10.1109/FOCS61266.2024.00125},
	pages = {2099--2130},
	title = {Universal Optimality of {Dijkstra} Via Beyond-Worst-Case Heaps},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS61266.2024.00125}}

@inproceedings{bcccf-idsowss-24,
	arxiv = {2408.10014},
	author = {Bil{\`{o}}, Davide and Chechik, Shiri and Choudhary, Keerti and Cohen, Sarel and Friedrich, Tobias and Schirneck, Martin},
	booktitle = {Proc. 65th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:15:52 -0600},
	date-modified = {2025-02-03 09:16:33 -0600},
	doi = {10.1109/FOCS61266.2024.00097},
	pages = {1550--1558},
	title = {Improved Distance (Sensitivity) Oracles with Subquadratic Space},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS61266.2024.00097}}

@inproceedings{hls-ddcdo-24,
	author = {Haeupler, Bernhard and Long, Yaowei and Saranurak, Thatchaphol},
	booktitle = {Proc. 65th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:12:58 -0600},
	date-modified = {2025-02-03 09:13:20 -0600},
	doi = {10.1109/FOCS61266.2024.00121},
	pages = {2033--2044},
	title = {Dynamic Deterministic Constant-Approximate Distance Oracles with n\({}^{\mbox{{\(\epsilon\)}}}\) Worst-Case Update Time},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS61266.2024.00121}}

@inproceedings{bkz-tbcoa-24,
	arxiv = {2409.11280},
	author = {Bender, Michael A. and Kuszmaul, William and Zhou, Renfei},
	booktitle = {Proc. 65th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:10:19 -0600},
	date-modified = {2025-02-03 09:10:51 -0600},
	doi = {10.1109/FOCS61266.2024.00047},
	pages = {636--657},
	title = {Tight Bounds for Classical Open Addressing},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS61266.2024.00047}}

@inproceedings{fkk-oboaw-24,
	arxiv = {2501.02305},
	author = {Farach-Colton, Mart{\'\i}n and Krapivin, Andrew and Kuszmaul, William},
	booktitle = {Proc. 65th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-02-03 09:09:00 -0600},
	date-modified = {2025-02-03 09:09:57 -0600},
	doi = {10.1109/FOCS61266.2024.00045},
	pages = {594--605},
	title = {Optimal Bounds for Open Addressing Without Reordering},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS61266.2024.00045}}

@article{nr-bstbb-73,
	abstract = { A new class of binary search trees, called trees of bounded balance, is introduced. These trees are easy to maintain in their form despite insertions and deletions of nodes, and the search time is only moderately longer than in completely balanced trees. Trees of bounded balance differ from other classes of binary search trees in that they contain a parameter which can be varied so the compromise between short search time and infrequent restructuring can be chosen arbitrarily. },
	author = {Nievergelt, J{\"u}rg and Reingold, Edward M.},
	date-added = {2025-02-01 15:26:06 -0600},
	date-modified = {2025-02-01 15:29:58 -0600},
	doi = {10.1137/0202005},
	journal = {SIAM J. Comput.},
	number = {1},
	pages = {33-43},
	title = {Binary Search Trees of Bounded Balance},
	volume = {2},
	year = {1973},
	bdsk-url-1 = {https://doi.org/10.1137/0202005}}

@article{f-gtwrb-12,
	abstract = {Wilber's logarithmic lower bound, concerning off-line binary search tree access costs, is generalized to encompass binary trees that are not constrained to satisfy the search tree property. Rotation operations in this extended model can be preceded by subtree swaps. A separation between the power of processing with search trees versus unordered trees is demonstrated.},
	author = {Fredman, Michael L.},
	date-added = {2025-02-01 11:15:07 -0600},
	date-modified = {2025-02-01 11:20:29 -0600},
	doi = {10.1007/s00453-011-9489-2},
	journal = {Algorithmica},
	keywords = {rotations, subtree swaps, diameter},
	number = {3},
	pages = {863--878},
	title = {Generalizing a Theorem of {Wilber} on Rotations in Binary Search Trees to Encompass Unordered Binary Trees},
	volume = {62},
	year = {2012},
	bdsk-url-1 = {https://doi.org/10.1007/s00453-011-9489-2}}

@article{cs-wbbst-00,
	abstract = { We develop a new class of weight balanced binary search trees called β-balanced binary search trees (β-BBSTs). β-BBSTs are designed to have reduced internal path length. As a result, they are expected to exhibit good search time characteristics. Individual search, insert, and delete operations in an n node β-BBST take O(log n) time for \$O< \beta\le \sqrt{2} -1\$. Experimental results comparing the performance of β-BBSTs, WB(α) trees, AVL-trees, red/black trees, treaps, deterministic skip lists and skip lists are presented. Two simplified versions of, β-BBSTs are also developed. },
	author = {Cho, Seonghun and Sahni, Sartaj},
	date-added = {2025-01-30 15:03:41 -0600},
	date-modified = {2025-01-30 15:05:41 -0600},
	doi = {10.1142/S0129054100000296},
	journal = {Int. J. Found. Comput. Sci.},
	number = {03},
	pages = {485--513},
	title = {A new weight balanced binary tree},
	volume = {11},
	year = {2000},
	bdsk-url-1 = {https://doi.org/10.1142/S0129054100000296}}

@article{bcfkk-lll-24,
	abstract = {The list-labeling problem is one of the most basic and well-studied algorithmic primitives in data structures, with an extensive literature spanning upper bounds, lower bounds, and data management applications. The classical algorithm for this problem, dating back to 1981, has amortized cost O(log bn). Subsequent work has led to improvements in three directions: low-latency (worst-case) bounds; high-throughput (expected) bounds; and (adaptive) bounds for important workloads.Perhaps surprisingly, these three directions of research have remained almost entirely disjoint---this is because, so far, the techniques that allow for progress in one direction have forced worsening bounds in the others. Thus there would appear to be a tension between worst-case, adaptive, and expected bounds. List labeling has been proposed for use in databases at least as early as PODS'99, but a database needs good throughput, response time, and needs to adapt to common workloads (e.g., bulk loads), and no current list-labeling algorithm achieve good bounds for all three.We show that this tension is not fundamental. In fact, with the help of new data-structural techniques, one can actually combine any three list-labeling solutions in order to cherry-pick the best worst-case, adaptive, and expected bounds from each of them.},
	arxiv = {2404.16623},
	author = {Bender, Michael A. and Conway, Alex and Farach-Colton, Mart{\'\i}n and Koml{\'o}s, Hanna and Kuszmaul, William},
	date-added = {2025-01-30 14:53:22 -0600},
	date-modified = {2025-02-09 17:36:37 -0600},
	doi = {10.1145/3651602},
	journal = {Proc. ACM Manag. Data},
	keywords = {algorithms, data structures, history independence, online algorithms, randomized algorithms},
	number = {2},
	pages = {101:1--101:19},
	title = {Layered List Labeling},
	volume = {2},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3651602}}

@inproceedings{bcfkk-noll-24,
	arxiv = {2405.00807},
	author = {Bender, Michael A. and Conway, Alex and Farach-Colton, Mart{\'\i}n and Koml{\'{o}}s, Hanna and Kouck{\'{y}}, Michal and Kuszmaul, William and Saks, Michael E.},
	booktitle = {Proc. 65th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-01-30 14:49:47 -0600},
	date-modified = {2025-02-01 15:39:28 -0600},
	doi = {10.1109/FOCS61266.2024.00132},
	pages = {2253--2274},
	title = {Nearly Optimal List Labeling},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS61266.2024.00132}}

@inproceedings{sz-shols-22,
	author = {Sandlund, Bryce and Zhang, Lingyi},
	booktitle = {Proc. 33rd {ACM-SIAM} Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-30 13:54:25 -0600},
	date-modified = {2025-01-30 13:55:14 -0600},
	doi = {10.1137/1.9781611977073.78},
	editor = {Naor, Joseph (Seffi) and Buchbinder, Niv},
	pages = {1962--1975},
	title = {Selectable Heaps and Optimal Lazy Search Trees},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977073.78}}

@inproceedings{sw-lst-20,
	author = {Sandlund, Bryce and Wild, Sebastian},
	booktitle = {Proc. 61st Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-01-30 13:52:48 -0600},
	date-modified = {2025-01-30 13:53:21 -0600},
	doi = {10.1109/FOCS46700.2020.00071},
	pages = {704--715},
	title = {Lazy Search Trees},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS46700.2020.00071}}

@inproceedings{bcdfz-samol-02,
	abstract = {In the Order-Maintenance Problem, the objective is to maintain a total order subject to insertions, deletions, and precedence queries. Known optimal solutions, due to Dietz and Sleator, are complicated. We present new algorithms that match the bounds of Dietz and Sleator. Our solutions are simple, and we present experimental evidence that suggests that they are superior in practice.},
	author = {Bender, Michael A. and Cole, Richard and Demaine, Erik D. and Farach-Colton, Mart{\'\i}n and Zito, Jack},
	booktitle = {Proc. 10th Ann. European Symp. Algorithms (ESA)},
	date-added = {2025-01-30 11:33:25 -0600},
	date-modified = {2025-03-23 15:29:08 -0500},
	doi = {10.1007/3-540-45749-6_17},
	editor = {M{\"o}hring, Rolf and Raman, Rajeev},
	number = {2461},
	pages = {152--164},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Two Simplified Algorithms for Maintaining Order in a List},
	year = {2002},
	bdsk-url-1 = {https://doi.org/10.1007/3-540-45749-6_17}}

@inproceedings{ikr-stipq-81,
	author = {Itai, Alon and Konheim, Alan G. and Rodeh, Michael},
	booktitle = {Proc. 8th Int. Colloq. Automata Lang. Prog. (ICALP)},
	date-added = {2025-01-30 11:24:39 -0600},
	date-modified = {2025-02-09 14:09:37 -0600},
	doi = {10.1007/3-540-10843-2_34},
	editor = {Even, Shimon and Kariv, Oded},
	keywords = {packed memory array},
	pages = {417--431},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {A Sparse Table Implementation of Priority Queues},
	volume = {115},
	year = {1981},
	bdsk-url-1 = {https://doi.org/10.1007/3-540-10843-2_34}}

@article{bdf-cb-05,
	abstract = { This paper presents two dynamic search trees attaining near-optimal performance on any hierarchical memory. The data structures are independent of the parameters of the memory hierarchy, e.g., the number of memory levels, the block-transfer size at each level, and the relative speeds of memory levels. The performance is analyzed in terms of the number of memory transfers between two memory levels with an arbitrary block-transfer size of B; this analysis can then be applied to every adjacent pair of levels in a multilevel memory hierarchy. Both search trees match the optimal search bound of \$\Theta(1+\log\_{B+1}N)\$ memory transfers. This bound is also achieved by the classic B-tree data structure on a two-level memory hierarchy with a known block-transfer size B. The first search tree supports insertions and deletions in \$\Theta(1+\log\_{B+1}N)\$ amortized memory transfers, which matches the B-tree's worst-case bounds. The second search tree supports scanning S consecutive elements optimally in \$\Theta(1+S/B)\$ memory transfers and supports insertions and deletions in \$\Theta(1+\log\_{B+1}N + \frac{\log^2N}{B})\$ amortized memory transfers, matching the performance of the B-tree for \$B = \Omega(\log N \log\log N)\$. },
	author = {Bender, Michael A. and Demaine, Erik D. and Farach-Colton, Mart{\'\i}n},
	date-added = {2025-01-30 11:22:01 -0600},
	date-modified = {2025-02-01 15:41:27 -0600},
	doi = {10.1137/S0097539701389956},
	journal = {SIAM J. Comput.},
	keywords = {packed memory array},
	number = {2},
	pages = {341--358},
	title = {Cache-Oblivious {B}-Trees},
	volume = {35},
	year = {2005},
	bdsk-url-1 = {https://doi.org/10.1137/S0097539701389956}}

@article{bfm-is-06,
	abstract = {Traditional Insertion Sort runs in O(n2) time because each insertion takes   O(n) time.  When people run Insertion Sort in the physical world, they leave   gaps between items to accelerate insertions.  Gaps help in computers   as well.  This paper shows that Gapped Insertion Sort has insertion times of O(log n) with high probability, yielding a total running time of O(n log n) with high probability.},
	arxiv = {cs/0407003},
	author = {Bender, Michael A. and Farach-Colton, Mart{\'\i}n and Mosteiro, Miguel A.},
	date-added = {2025-01-30 11:17:39 -0600},
	date-modified = {2025-02-01 15:43:58 -0600},
	doi = {10.1007/s00224-005-1237-z},
	journal = {Theory Comput. Sys.},
	keywords = {packed memory array},
	number = {3},
	pages = {391--397},
	title = {Insertion Sort is {$O(n \log n)$}},
	volume = {39},
	year = {2006},
	bdsk-url-1 = {https://doi.org/10.1007/s00224-005-1237-z}}

@article{w-gwaid-86,
	abstract = {Consider a file which arranges records in sequential order, and stores them with possible empty spaces in M consecutive pages of memory. We develop an insertion-deletion algorithm which runs in a worst-case time approximately proportional to log2M divided by the page-size when the set of manipulated records has cardinality O(M).},
	author = {Willard, Dan E.},
	date-added = {2025-01-30 11:11:34 -0600},
	date-modified = {2025-01-30 11:12:20 -0600},
	doi = {10.1145/16856.16879},
	journal = {SIGMOD Rec.},
	note = {\emph{Proc. SIGMOD 1986}},
	number = {2},
	pages = {251---260},
	title = {Good worst-case algorithms for inserting and deleting records in dense sequential files},
	volume = {15},
	year = {1986},
	bdsk-url-1 = {https://doi.org/10.1145/16856.16879}}

@inproceedings{bkk-lprtm-21,
	arxiv = {2107.01250},
	author = {Bender, Michael A. and Kuszmaul, Bradley C. and Kuszmaul, William},
	booktitle = {Proc. 62nd Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2025-01-30 11:05:35 -0600},
	date-modified = {2025-01-30 11:06:35 -0600},
	doi = {10.1109/FOCS52979.2021.00115},
	pages = {1171--1182},
	title = {Linear Probing Revisited: {Tombstones} Mark the Demise of Primary Clustering},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS52979.2021.00115}}

@inproceedings{at-ooht-77,
	author = {Adolphson, Donald L. and Thomas, Glenn N.},
	booktitle = {Proc. 32nd Ann. ACM Conf.},
	date-added = {2025-01-30 10:51:13 -0600},
	date-modified = {2025-01-30 11:35:13 -0600},
	doi = {10.1145/800179.810184},
	editor = {Ketchel, James S. and Kriloff, Harvey Z. and Burner, H. Blair and Crockett, Patricia E. and Herriot, Robert G. and Houston, George B. and Kitto, Cathy S.},
	pages = {74--78},
	title = {Optimum ordered hash tables},
	year = {1977},
	bdsk-url-1 = {https://doi.org/10.1145/800179.810184}}

@article{ak-oht-74,
	abstract = {Some variants of the traditional hash method, making use of the numerical or alphabetical order of the keys, lead to faster searching at the expense of a little extra work when items are inserted. This paper presents the new algorithms and analyses their average running time.},
	author = {Amble, Ole and Knuth, Donald E.},
	date-added = {2025-01-30 10:50:09 -0600},
	date-modified = {2025-01-30 10:50:55 -0600},
	doi = {10.1093/comjnl/17.2.135},
	journal = {Computer J.},
	number = {2},
	pages = {135--142},
	title = {Ordered hash tables},
	volume = {17},
	year = {1974},
	bdsk-url-1 = {https://doi.org/10.1093/comjnl/17.2.135}}

@incollection{s-arq-13,
	abstract = {Array range queries are of current interest in the field of data structures. Given an array of numbers or arbitrary elements, the general array range query problem is to build a data structure that can efficiently answer queries of a given type stated in terms of an interval of the indices. The specific query type might be for the minimum element in the range, the most frequently occurring element, or any of many other possibilities. In addition to being interesting in themselves, array range queries have connections to computational geometry, compressed and succinct data structures, and other areas of computer science. We survey recent and relevant past work on this class of problems.},
	author = {Skala, Matthew},
	booktitle = {Space-Efficient Data Structures, Streams, and Algorithms: Papers in Honor of J. Ian Munro on the Occasion of His 66th Birthday},
	date-added = {2025-01-22 21:01:59 -0600},
	date-modified = {2025-01-22 21:03:06 -0600},
	doi = {10.1007/978-3-642-40273-9_21},
	editor = {Brodnik, Andrej and L{\'o}pez-Ortiz, Alejandro and Raman, Venkatesh and Viola, Alfredo},
	keywords = {range minimum queries, RMQ, LCA},
	pages = {333--350},
	publisher = {Springer},
	title = {Array Range Queries},
	year = {2013},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-40273-9_21}}

@inproceedings{f-osrmq-10,
	abstract = {For a static array A of n totally ordered objects, a range minimum query asks for the position of the minimum between two specified array indices. We show how to preprocess A into a scheme of size 2n{\thinspace}+{\thinspace}o(n) bits that allows to answer range minimum queries on A in constant time. This space is asymptotically optimal in the important setting where access to A is not permitted after the preprocessing step. Our scheme can be computed in linear time, using only n{\thinspace}+{\thinspace}o(n) additional bits for construction. We also improve on LCA-computation in BPS- or DFUDS-encoded trees.},
	arxiv = {0812.2775},
	author = {Fischer, Johannes},
	booktitle = {Proc. 9th Latin Am. Symp. Theor. Inform. (LATIN)},
	date-added = {2025-01-22 20:54:39 -0600},
	date-modified = {2025-01-23 13:30:14 -0600},
	doi = {10.1007/978-3-642-12200-2_16},
	editor = {L{\'o}pez-Ortiz, Alejandro},
	number = {6034},
	pages = {158--169},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Optimal Succinctness for Range Minimum Queries},
	year = {2010},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-12200-2_16}}

@inproceedings{s-sdsft-02,
	abstract = {We propose space-efficient data structures for text retrieval systems that have merits of both theoretical data structures like suffix trees and practical ones like inverted files. Traditional text retrieval systems use the inverted files and support ranking queries based on the tf*idf (term frequency times inverse document frequency) scores of documents that contain given keywords, which cannot be solved by using only the suffix trees. A drawback of the systems is that the scores can be computed for only predetermined keywords. We extend the data structure so that the scores can be computed for any pattern efficiently while keeping the size of the data structures moderate. The size is comparable with the text size, which is an improvement from existing methods using O(n log n) bit space for a text collection of length n.},
	author = {Sadakane, Kunihiko},
	booktitle = {Proc. 13th Int. Symp. Algorithms Comput.},
	comments = {Succinct data structure for RMQ via reduction to LCA},
	date-added = {2025-01-22 20:47:25 -0600},
	date-modified = {2025-01-23 13:30:55 -0600},
	doi = {10.1007/3-540-36136-7_2},
	editor = {Bose, Prosenjit and Morin, Pat},
	keywords = {RMQ, LCA},
	number = {2518},
	pages = {14--24},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Space-Efficient Data Structures for Flexible Text Retrieval Systems},
	year = {2002},
	bdsk-url-1 = {https://doi.org/10.1007/3-540-36136-7_2}}

@article{bv-rspds-93,
	abstract = { This paper introduces a novel parallel data structure called the recursive star-tree (denoted ``\${}^ * \$-tree''). For its definition a generalization of the \$ * \$ functional is used (where for a function \$f * f(n) = \min \{ {i|f^{(i)} (n) \leqslant 1} \}\$ and \$f^{(i)} \$ is the ith iterate of f). Recursive \${}^ * \$-trees are derived by using recursion in the spirit of the inverse Ackermann function.The recursive \${}^ * \$-tree data structure leads to a new design paradigm for parallel algorithms. This paradigm allows for extremely fast parallel computations, specifically, \$O(\alpha (n))\$ time (where \$\alpha (n)\$ is the inverse of the Ackermann function), using an optimal number of processors on the (weakest) concurrent-read, concurrent-write parallel random-access machine (CRCW PRAM).These computations need only constant time, and use an optimal number of processors if the following nonstandard assumption about the model of parallel computation is added to the CRCW PRAM: an extremely small number of processors each can write simultaneously into different bits of the same word.Applications include finding lowest common ancestors in trees by a new algorithm that is considerably simpler than the known algorithms for the problem, restricted domain merging, parentheses matching, and a new parallel reducibility. },
	author = {Berkman, Omer and Vishkin, Uzi},
	comments = {Reduction from LCA to $\pm$1RMQ},
	date-added = {2025-01-22 20:40:59 -0600},
	date-modified = {2025-01-22 20:43:59 -0600},
	doi = {10.1137/0222017},
	journal = {SIAM J. Comput.},
	keywords = {LCA, RMQ},
	number = {2},
	pages = {221--242},
	title = {Recursive Star-Tree Parallel Data Structure},
	volume = {22},
	year = {1993},
	bdsk-url-1 = {https://doi.org/10.1137/0222017}}

@inproceedings{fh-srrie-07,
	abstract = {The Range-Minimum-Query-Problem is to preprocess an array of length n in O(n) time such that all subsequent queries asking for the position of a minimal element between two specified indices can be obtained in constant time. This problem was first solved by Berkman and Vishkin [1], and Sadakane [2] gave the first succinct data structure that uses 4n{\thinspace}+{\thinspace}o(n) bits of additional space. In practice, this method has several drawbacks: it needs O(n logn) bits of intermediate space when constructing the data structure, and it builds on previous results on succinct data structures. We overcome these problems by giving the first algorithm that never uses more than 2n{\thinspace}+{\thinspace}o(n) bits, and does not rely on rank- and select-queries or other succinct data structures. We stress the importance of this result by simplifying and reducing the space consumption of the Enhanced Suffix Array [3], while retaining its capability of simulating top-down-traversals of the suffix tree, used, e.g., to locate all occ positions of a pattern p in a text in optimal O(|p|{\thinspace}+{\thinspace}occ) time (assuming constant alphabet size). We further prove a lower bound of 2n{\thinspace}−{\thinspace}o(n) bits, which makes our algorithm asymptotically optimal.},
	author = {Fischer, Johannes and Heun, Volker},
	booktitle = {Combinatorics, Algorithms, Probabilistic and Experimental Methodologies},
	date-added = {2025-01-22 20:38:26 -0600},
	date-modified = {2025-01-22 20:50:03 -0600},
	doi = {10.1007/978-3-540-74450-4_41},
	editor = {Chen, Bo and Paterson, Mike and Zhang, Guochuan},
	keywords = {RMQ, LCA, succinct},
	number = {4614},
	pages = {459--470},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {A New Succinct Representation of {RMQ}-Information and Improvements in the Enhanced Suffix Array},
	year = {2007},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-540-74450-4_41}}

@incollection{d-sldsc-13,
	abstract = {We revisit the range minimum query problem and present a new O(n)-space data structure that supports queries in O(1) time. Although previous data structures exist whose asymptotic bounds match ours, our goal is to introduce a new solution that is simple, intuitive, and practical without increasing asymptotic costs for query time or space.},
	author = {Durocher, Stephane},
	booktitle = {Space-Efficient Data Structures, Streams, and Algorithms: Papers in Honor of J. Ian Munro on the Occasion of His 66th Birthday},
	date-added = {2025-01-22 20:35:55 -0600},
	date-modified = {2025-01-22 20:37:21 -0600},
	doi = {10.1007/978-3-642-40273-9_5},
	editor = {Brodnik, Andrej and L{\'o}pez-Ortiz, Alejandro and Raman, Venkatesh and Viola, Alfredo},
	keywords = {range minimum queries, LCA},
	number = {8066},
	pages = {48--60},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {A Simple Linear-Space Data Structure for Constant-Time Range Minimum Query},
	year = {2013},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-40273-9_5}}

@article{hlms-edrmq-16,
	abstract = {The Range Minimum Query problem consists in answering efficiently the simple question: ``what is the minimal element between two specified indices of a given array?''. In this paper we present a novel structure that offers a trade-off between time and space. Moreover we show how the structure can be easily maintained whenever an insertion, modification or deletion modifies the input sequence.},
	author = {H{\'e}liou, Alice and L{\'e}onard, Martine and Mouchard, Laurent and Salson, Mikael},
	date-added = {2025-01-22 20:32:12 -0600},
	date-modified = {2025-01-22 20:34:57 -0600},
	doi = {10.1016/j.tcs.2016.07.002},
	journal = {Theor. Comput. Sci.},
	keywords = {Range minimum query, Dynamic structure, Compressed bit vector, Longest common prefix},
	pages = {108--117},
	title = {Efficient dynamic range minimum query},
	url = {https://hal.science/hal-01255499},
	volume = {656},
	year = {2016},
	bdsk-url-1 = {https://hal.science/hal-01255499},
	bdsk-url-2 = {https://doi.org/10.1016/j.tcs.2016.07.002}}

@inproceedings{gbt-srtgp-84,
	abstract = {Three techniques in computational geometry are explored: Scaling solves a problem by viewing it at increasing levels of numerical precision; activation is a restricted type of update operation, useful in sweep algorithms; the Cartesian tree is a data structure for problems involving maximums and minimums. These techniques solve the minimum spanning tree problem in Rk1 and Rk@@@@ in O(n(lg n)rlg lg n) time and O(n) space, where for Rk@@@@ and k ≥ 3, r = k-2; for Rk1, r = 1, 2, 4 for k = 3, 4, 5 and r = k for k > 5. Other problems solved include Rk1and Rk all nearest neighbors, post office and maximum spanning tree; Rk maxima, Rk rectangle searching problems, and Zkp all nearest neighbors (1 ≤ p ≤ @@@@).},
	author = {Gabow, Harold N. and Bentley, Jon Louis and Tarjan, Robert E.},
	booktitle = {Proc. 16th Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-01-21 14:32:59 -0600},
	date-modified = {2025-01-21 14:33:35 -0600},
	doi = {10.1145/800057.808675},
	pages = {135---143},
	title = {Scaling and related techniques for geometry problems},
	year = {1984},
	bdsk-url-1 = {https://doi.org/10.1145/800057.808675}}

@inproceedings{bbgsv-hppea-89,
	author = {Berkman, Omer and Breslauer, Dany and Galil, Zvi and Schieber, Baruch and Vishkin, Uzi},
	booktitle = {Proc. 21st Ann. ACM Symp. Theory Comput. (STOC)},
	date-added = {2025-01-21 14:25:47 -0600},
	date-modified = {2025-01-21 14:26:24 -0600},
	doi = {10.1145/73007.73036},
	pages = {309--319},
	title = {Highly Parallelizable Problems},
	year = {1989},
	bdsk-url-1 = {https://doi.org/10.1145/73007.73036}}

@article{sa-rst-96,
	abstract = {We present a randomized strategy for maintaining balance in dynamically changing search trees that has optimalexpected behavior. In particular, in the expected case a search or an update takes logarithmic time, with the update requiring fewer than two rotations. Moreover, the update time remains logarithmic, even if the cost of a rotation is taken to be proportional to the size of the rotated subtree. Finger searches and splits and joins can be performed in optimal expected time also. We show that these results continue to hold even if very little true randomness is available, i.e., if only a logarithmic number of truely random bits are available. Our approach generalizes naturally to weighted trees, where the expected time bounds for accesses and updates again match the worst-case time bounds of the best deterministic methods.},
	author = {Seidel, Raimund and Aragon*, Cecilia R.},
	date-added = {2025-01-21 14:20:20 -0600},
	date-modified = {2025-01-21 14:20:39 -0600},
	doi = {10.1007/BF01940876},
	journal = {Algorithmica},
	number = {4},
	pages = {464--497},
	title = {Randomized search trees},
	volume = {16},
	year = {1996},
	bdsk-url-1 = {https://doi.org/10.1007/BF01940876}}

@article{adkz-ectco-70,
	author = {Arlazarov, Vladimir L. and Dinitz, Yefim A. and Kronrod, Mikhail A. and Farad{\v z}ev, Igor` A.},
	date-added = {2025-01-21 14:13:31 -0600},
	date-modified = {2025-01-21 14:37:53 -0600},
	journal = {Soviet Math. Doklady},
	keywords = {Four Russians},
	note = {See also \burl{https://www.mathnet.ru/eng/dan/v194/i3/p487}},
	pages = {1209--1210},
	title = {On economical construction of the transitive closure of an oriented graph},
	url = {https://cr.yp.to/bib/entries.html\#1970/arlazarov},
	volume = {11},
	year = {1970},
	bdsk-url-1 = {https://cr.yp.to/bib/entries.html%5C#1970/arlazarov}}

@article{v-ulds-80,
	abstract = {Examples of fruitful interaction between geometrical combinatorics and the design and analysis of algorithms are presented. A demonstration is given of the way in which a simple geometrical construction yields new and efficient algorithms for various searching and list manipulation problems.},
	author = {Vuillemin, Jean},
	date-added = {2025-01-21 14:10:22 -0600},
	date-modified = {2025-01-21 14:10:43 -0600},
	doi = {10.1145/358841.358852},
	journal = {Commun. ACM},
	keywords = {search, permutations, merge, linear list, dictionaries, data structures, analysis of algorithms},
	number = {4},
	pages = {229---239},
	title = {A unifying look at data structures},
	volume = {23},
	year = {1980},
	bdsk-url-1 = {https://doi.org/10.1145/358841.358852}}

@article{sv-flcas-88,
	abstract = { We consider the following problem. Suppose a rooted tree T is available for preprocessing. Answer on-line queries requesting the lowest common ancestor for any pair of vertices in T. We present a linear time and space preprocessing algorithm that enables us to answer each query in \$O(1)\$ time, as in Harel and Tarjan [SIAM J. Comput., 13 (1984), pp. 338--355]. Our algorithm has the advantage of being simple and easily parallelizable. The resulting parallel preprocessing algorithm runs in logarithmic time using an optimal number of processors on an EREW PRAM. Each query is then answered in \$O(1)\$ time using a single processor. },
	author = {Schieber, Baruch and Vishkin, Uzi},
	date-added = {2025-01-21 14:09:03 -0600},
	date-modified = {2025-01-21 14:09:20 -0600},
	doi = {10.1137/0217079},
	journal = {SIAM J. Comput.},
	number = {6},
	pages = {1253--1262},
	title = {On Finding Lowest Common Ancestors: Simplification and Parallelization},
	volume = {17},
	year = {1988},
	bdsk-url-1 = {https://doi.org/10.1137/0217079}}

@inproceedings{bf-pr-00,
	author = {Bender, Michael A. and Farach{-}Colton, Martin},
	booktitle = {Proc. 4th Latin American Symp. Theor. Informatics (LATIN)},
	date-added = {2025-01-21 14:03:31 -0600},
	date-modified = {2025-01-30 11:34:49 -0600},
	doi = {10.1007/10719839\_9},
	number = {1776},
	pages = {88--94},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {The {LCA} Problem Revisited},
	year = {2000},
	bdsk-url-1 = {https://doi.org/10.1007/10719839%5C_9}}

@article{ac-srr-24,
	author = {Afshani, Peyman and Cheng, Pingan},
	date-added = {2025-01-21 10:57:48 -0600},
	date-modified = {2025-02-09 16:19:27 -0600},
	doi = {10.1007/S00454-023-00574-1},
	journal = {Discrete Comput. Geom.},
	number = {1},
	pages = {4--39},
	title = {On Semialgebraic Range Reporting},
	volume = {71},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1007/S00454-023-00574-1}}

@article{dd-lhwmg-24,
	arxiv = {2204.01665},
	author = {Dhar, Manik and Dvir, Zeev},
	date-added = {2025-01-21 10:44:06 -0600},
	date-modified = {2025-02-09 16:49:00 -0600},
	doi = {10.46298/THEORETICS.24.8},
	journal = {TheoretiCS},
	number = {8},
	title = {Linear Hashing with {$\ell_\infty$} guarantees and two-sided {Kakeya} bounds},
	volume = {3},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.46298/THEORETICS.24.8}}

@article{chmpw-dqodi-24,
	author = {Chen, Jingbang and He, Meng and Munro, J. Ian and Peng, Richard and Wu, Kaiyu and Zhang, Daniel J.},
	date-added = {2025-01-21 10:42:23 -0600},
	date-modified = {2025-01-21 10:42:32 -0600},
	doi = {10.1016/J.COMGEO.2024.102103},
	journal = {Comput. Geom.},
	pages = {102103},
	title = {Distance queries over dynamic interval graphs},
	volume = {122},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1016/J.COMGEO.2024.102103}}

@article{gj-hprqw-23,
	author = {Gitik, Rivka and Joskowicz, Leo},
	date-added = {2025-01-21 10:41:56 -0600},
	date-modified = {2025-01-21 10:42:09 -0600},
	doi = {10.1016/J.COMGEO.2023.102021},
	journal = {Comput. Geom.},
	pages = {102021},
	title = {Half-plane point retrieval queries with independent and dependent geometric uncertainties},
	volume = {115},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1016/J.COMGEO.2023.102021}}

@article{lt-rurqm-23,
	author = {Lu, Shangqi and Tao, Yufei},
	date-added = {2025-01-21 10:41:35 -0600},
	date-modified = {2025-01-21 10:41:49 -0600},
	doi = {10.1016/J.COMGEO.2023.102030},
	journal = {Comput. Geom.},
	pages = {102030},
	title = {Range updates and range sum queries on multidimensional points with monoid weights},
	volume = {115},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1016/J.COMGEO.2023.102030}}

@article{bs-ddsen-23,
	author = {de Berg, Sarita and Staals, Frank},
	date-added = {2025-01-21 10:40:47 -0600},
	date-modified = {2025-01-21 10:41:02 -0600},
	doi = {10.1016/J.COMGEO.2022.101976},
	journal = {Comput. Geom.},
	pages = {101976},
	title = {Dynamic data structures for \emph{k}-nearest neighbor queries},
	volume = {111},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1016/J.COMGEO.2022.101976}}

@article{ak-rsorr-23,
	author = {Afshani, Peyman and Killmann, Rasmus},
	date-added = {2025-01-21 10:40:22 -0600},
	date-modified = {2025-01-21 10:40:39 -0600},
	doi = {10.1016/J.COMGEO.2022.101959},
	journal = {Comput. Geom.},
	pages = {101959},
	title = {Rectangle stabbing and orthogonal range reporting lower bounds in moderate dimensions},
	volume = {111},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1016/J.COMGEO.2022.101959}}

@article{aesz-tseci-23,
	author = {Aronov, Boris and Ezra, Esther and Sharir, Micha and Zigdon, Guy},
	date-added = {2025-01-21 10:39:19 -0600},
	date-modified = {2025-01-21 10:39:44 -0600},
	doi = {10.1016/J.COMGEO.2022.101963},
	journal = {Comput. Geom.},
	pages = {101963},
	title = {Time and space efficient collinearity indexing},
	volume = {110},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1016/J.COMGEO.2022.101963}}

@article{w-ursa-23,
	author = {Wang, Haitao},
	date-added = {2025-01-21 10:33:35 -0600},
	date-modified = {2025-01-21 10:33:46 -0600},
	doi = {10.20382/JOCG.V14I1A13},
	journal = {J. Comput. Geom.},
	number = {1},
	pages = {343--394},
	title = {Unit-disk range searching and applications},
	volume = {14},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.20382/JOCG.V14I1A13}}

@article{mos-idubtv-76,
	author = {Maurer, Hermann A. and Ottmann, Thomas and Six, Hans-Werner},
	comments = {k-trees: balanced binary search trees with height (1+ε)lg n},
	date-added = {2025-01-20 11:34:51 -0600},
	date-modified = {2025-02-09 16:32:36 -0600},
	doi = {10.1016/0020-0190(76)90094-6},
	journal = {Inf. Process. Lett.},
	keywords = {Dictionary, binary tree, balanced tree, searching, updating},
	number = {1},
	pages = {11--14},
	title = {Implementing dictionaries using binary trees of very small height},
	volume = {5},
	year = {1976},
	bdsk-url-1 = {https://doi.org/10.1016/0020-0190(76)90094-6}}

@inproceedings{mo-tmp-77,
	abstract = {We discuss the use of tree-structures for finding efficient solutions for the well-known dictionary problem and generalizations thereof. In doing so, we present a number of known techniques together with recent developments. In particular, we mention recent results concerning trees of very small height suitable for implementing dictionaries, results concerning the non-uniform dictionary problem and new results on one-sided AVL trees.},
	author = {Maurer, Hermann A. and Ottmann, Thomas},
	booktitle = {Proc. 6th Symp. Math. Found. Comput. Sci.},
	date-added = {2025-01-20 11:29:27 -0600},
	date-modified = {2025-01-20 11:32:04 -0600},
	pages = {108--121},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Tree-structures for set manipulation problems},
	volume = {53},
	year = {1977}}

@article{bgs-siwcp-23,
	abstract = {Given a string S of length n, the classic string indexing problem is to preprocess S into a compact data structure that supports efficient subsequent pattern queries. In this article, we consider the basic variant where the pattern is given in compressed form and the goal is to achieve query time that is fast in terms of the compressed size of the pattern. This captures the common client-server scenario, where a client submits a query and communicates it in compressed form to a server. Instead of the server decompressing the query before processing it, we consider how to efficiently process the compressed query directly. Our main result is a novel linear space data structure that achieves near-optimal query time for patterns compressed with the classic Lempel-Ziv 1977 (LZ77) compression scheme. Along the way, we develop several data structural techniques of independent interest, including a novel data structure that compactly encodes all LZ77 compressed suffixes of a string in linear space and a general decomposition of tries that reduces the search time from logarithmic in the size of the trie to logarithmic in the length of the pattern.},
	arxiv = {1909.11930},
	author = {Bille, Philip and G\o{}rtz, Inge Li and Steiner, Teresa Anna},
	date-added = {2025-01-20 09:21:05 -0600},
	date-modified = {2025-01-20 09:21:45 -0600},
	doi = {10.1145/3607141},
	journal = {ACM Trans. Algorithms},
	keywords = {String indexing},
	number = {4},
	pages = {32:1--32:19},
	title = {String Indexing with Compressed Patterns},
	url = {https://doi.org/10.1145/3607141},
	volume = {19},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3607141}}

@article{bcikl-costt-23,
	abstract = {We consider the design of adaptive data structures for searching elements of a tree-structured space. We use a natural generalization of the rotation-based online binary search tree model in which the underlying search space is the set of vertices of a tree. This model is based on a simple structure for decomposing graphs, previously known under several names including elimination trees, vertex rankings, and tubings. The model is equivalent to the classical binary search tree model exactly when the underlying tree is a path. We describe an online O(log log n)-competitive search tree data structure in this model, where n is the number of vertices. This matches the best-known competitive ratio of binary search trees. Our method is inspired by Tango trees, an online binary search tree algorithm, but critically needs several new notions including one that we call Steiner-closed search trees, which may be of independent interest. Moreover, our technique is based on a novel use of two levels of decomposition, first from search space to a set of Steiner-closed trees and, second, from these trees into paths.},
	arxiv = {1908.00848},
	author = {Bose, Prosenjit and Cardinal, Jean and Iacono, John and Koumoutsos, Grigorios and Langerman, Stefan},
	date-added = {2025-01-20 09:19:30 -0600},
	date-modified = {2025-01-20 09:20:27 -0600},
	doi = {10.1145/3595180},
	journal = {ACM Trans. Algorithms},
	keywords = {dynamic optimality, tango trees, Search trees on trees},
	number = {3},
	pages = {25:1--25:19},
	title = {Competitive Online Search Trees on Trees},
	volume = {19},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3595180}}

@article{w-ltchwob-23,
	abstract = {We consider a natural variation of cuckoo hashing proposed by Lehman and Panigrahy (2009). Each of cn objects is assigned k = 2 intervals of size ℓ in a linear hash table of size n and both starting points are chosen independently and uniformly at random. Each object must be placed into a table cell within its intervals, but each cell can only hold one object. Experiments suggested that this scheme outperforms the variant with blocks in which intervals are aligned at multiples of ℓ. In particular, the load threshold is higher, i.e., the load c that can be achieved with high probability. For instance, Lehman and Panigrahy (2009) empirically observed the threshold for ℓ = 2 to be around 96.5\% as compared to roughly 89.7\% using blocks. They pinned down the asymptotics of the thresholds for large ℓ, but the precise values resisted rigorous analysis. We establish a method to determine these load thresholds for all ℓ ≥ 2, and, in fact, for general k ≥ 2. For instance, for k = ℓ = 2, we get ≈ 96.4995\%. We employ a theorem due to Leconte, Lelarge, and Massouli\'{e} (2013), which adapts methods from statistical physics to the world of hypergraph orientability. In effect, the orientability thresholds for our graph families are determined by belief propagation equations for certain graph limits. As a side note, we provide experimental evidence suggesting that placements can be constructed in linear time using an adapted version of an algorithm by Khosla (2013).},
	author = {Walzer, Stefan},
	date-added = {2025-01-20 09:18:25 -0600},
	date-modified = {2025-01-20 09:18:49 -0600},
	doi = {10.1145/3589558},
	journal = {ACM Trans. Algorithms},
	keywords = {randomised algorithms, load thresholds, hypergraph orientability, unaligned blocks, Cuckoo hashing},
	number = {3},
	pages = {24:1--24:22},
	title = {Load Thresholds for Cuckoo Hashing with Overlapping Blocks},
	volume = {19},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3589558}}

@article{sstv-rdrem-23,
	abstract = {The ranked (or top-k) document retrieval problem is defined as follows: preprocess a collection {T1,T2,{\ldots} ,Td} of d strings (called documents) of total length n into a data structure, such that for any given query (P,k), where P is a string (called pattern) of length p ≥ 1 and k ∈ [1,d] is an integer, the identifiers of those k documents that are most relevant to P can be reported, ideally in the sorted order of their relevance. The seminal work by Hon et&nbsp;al. [FOCS 2009 and Journal of the ACM 2014] presented an O(n)-space (in words) data structure with O(p+k log k) query time. The query time was later improved to O(p+k) [SODA 2012] and further to O(p/ log σn+k) [SIAM Journal on Computing 2017] by Navarro and Nekrich, where σ is the alphabet size. We revisit this problem in the external memory model and present three data structures. The first one takes O(n)-space and answer queries in O(p/B + log B n + k/B+ log * (n/B)) I/Os, where B is the block size. The second one takes O(n log * (n/B)) space and answer queries in optimal O(p/B + log B n + k/B) I/Os. In both cases, the answers are reported in the unsorted order of relevance. To handle sorted top-k document retrieval, we present an O(n log (d/B)) space data structure with optimal query cost.},
	author = {Shah, Rahul and Sheng, Cheng and Thankachan, Sharma and Vitter, Jeffrey},
	date-added = {2025-01-20 09:16:11 -0600},
	date-modified = {2025-01-20 09:16:36 -0600},
	doi = {10.1145/3559763},
	journal = {ACM Trans. Algorithms},
	keywords = {Data structures, text indexing, external memory},
	number = {1},
	pages = {5:1--5:12},
	title = {Ranked Document Retrieval in External Memory},
	volume = {19},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1145/3559763}}

@article{mryy-cdd-24,
	abstract = {Data-structure dynamization is a general approach for making static data structures dynamic. It is used extensively in geometric settings and in the guise of so-called merge (or compaction) policies in big-data databases such as LevelDB and Google Bigtable. Previous theoretical work is based on worst-case analyses for uniform inputs---insertions of one item at a time and non-varying read rate. In practice, merge policies must not only handle batch insertions and varying read/write ratios, they can take advantage of such non-uniformity to reduce cost on a per-input basis. To model this, we initiate the study of data-structure dynamization through the lens of competitive analysis via two new online set-cover problems. For each, the input is a sequence of disjoint sets of weighted items. The sets are revealed one at a time. The algorithm must respond to each with a set cover that covers all items revealed so far. It obtains the cover incrementally from the previous cover by adding one or more sets and optionally removing existing sets. For each new set the algorithm incurs build cost equal to the weight of the items in the set. In the first problem the objective is to minimize total build cost plus total query cost, where the algorithm incurs a query cost at each time  (t)  equal to the current cover size. In the second problem, the objective is to minimize the build cost while keeping the query cost from exceeding  (k)  (a given parameter) at any time. We give deterministic online algorithms for both variants, with competitive ratios of  (Theta(log^{*}n))  and  (k) , respectively. The latter ratio is optimal for the second variant.},
	arxiv = {2011.02615},
	author = {Mathieu, Claire and Rajaraman, Rajmohan and Young, Neal E. and Yousefi, Arman},
	date-added = {2025-01-20 09:14:00 -0600},
	date-modified = {2025-01-20 09:19:04 -0600},
	doi = {10.1145/3672614},
	journal = {ACM Trans. Algorithms},
	keywords = {Online algorithms, competitive analysis, data-structure dynamization, log-structured merge-tree, compaction},
	number = {4},
	pages = {37:1--37:28},
	title = {Competitive Data-Structure Dynamization},
	volume = {20},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3672614}}

@article{cz-hpstf-24,
	abstract = {We revisit Hopcroft's problem and related fundamental problems about geometric range searching. Given n points and n lines in the plane, we show how to count the number of point-line incidence pairs or the number of point-above-line pairs in O(n4/3) time, which matches the conjectured lower bound and improves the best previous time bound of  (n^{4/3}2^{O(log ^*n)})  obtained almost 30 years ago by Matou\v{s}ek&nbsp;[58].We describe two interesting and different ways to achieve the result: The first is randomized and uses a new two-dimensional version of fractional cascading for arrangements of lines; the second is deterministic and uses decision trees in a manner inspired by the sorting technique of Fredman [42]. The second approach extends to any constant dimension.Many consequences follow from these new ideas: For example, we obtain an O(n4/3)-time algorithm for line segment intersection counting in the plane, O(n4/3)-time randomized algorithms for distance selection in the plane and bichromatic closest pair and Euclidean minimum spanning tree in three or four dimensions, and a randomized data structure for halfplane range counting in the plane with O(n4/3) preprocessing time and space and  (O(n^{1/3}))  query time.},
	arxiv = {2111.03744},
	author = {Chan, Timothy M. and Zheng, Da Wei},
	date-added = {2025-01-20 09:12:17 -0600},
	date-modified = {2025-01-20 09:19:04 -0600},
	doi = {10.1145/3591357},
	journal = {ACM Trans. Algorithms},
	keywords = {Range searching, geometric data structures, incidences, fractional cascading, decision trees},
	number = {3},
	pages = {24:1--24:27},
	title = {Hopcroft's Problem, Log* Shaving, Two-dimensional Fractional Cascading, and Decision Trees},
	volume = {20},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3591357}}

@inproceedings{nr-rrpmm-23,
	arxiv = {2211.03161},
	author = {Nekrich, Yakov and Rahul, Saladi},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 09:10:29 -0600},
	date-modified = {2025-01-20 09:11:09 -0600},
	doi = {10.1137/1.9781611977554.CH71},
	pages = {1862--1876},
	title = {{4D} Range Reporting in the Pointer Machine Model in Almost-Optimal Time},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH71}}

@inproceedings{gsw-mqrig-23,
	arxiv = {2211.02951},
	author = {Gudmundsson, Joachim and Seybold, Martin P. and Wong, Sampson},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 09:09:20 -0600},
	date-modified = {2025-01-20 09:10:22 -0600},
	doi = {10.1137/1.9781611977554.CH53},
	pages = {1464--1492},
	title = {Map matching queries on realistic input graphs under the {Fr{\'{e}}chet} distance},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH53}}

@inproceedings{cz-srsrs-23,
	arxiv = {2210.10172},
	author = {Chan, Timothy M. and Zheng, Da Wei},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 09:08:19 -0600},
	date-modified = {2025-02-09 16:44:55 -0600},
	doi = {10.1137/1.9781611977554.CH54},
	editor = {Bansal, Nikhil and Nagarajan, Viswanath},
	pages = {1493--1511},
	title = {Simplex Range Searching Revisited: {How} to Shave Logs in Multi-Level Data Structures},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH54}}

@article{oob-gnsac-24,
	abstract = {The suffix array is arguably one of the most important data structures in sequence analysis and consequently there is a multitude of suffix sorting algorithms. However, to this date the GSACA algorithm introduced in 2015 is the only known non-recursive linear-time suffix array construction algorithm (SACA). Despite its interesting theoretical properties, there has been little effort in improving GSACA's non-competitive real-world performance. There is a super-linear algorithm DSH, which relies on the same sorting principle and is faster than DivSufSort, the fastest SACA for over a decade. The purpose of this article is twofold: We analyse the sorting principle used in GSACA and DSH and exploit its properties to give an optimised linear-time algorithm, and we show that it can be very elegantly used to compute both the original extended Burrows-Wheeler transform (eBWT) and a bijective version of the Burrows-Wheeler transform (BBWT) in linear time. We call the algorithm ``generic,'' since it can be used to compute the regular suffix array and the variants used for the BBWT and eBWT. Our suffix array construction algorithm is not only significantly faster than GSACA but also outperforms DivSufSort and DSH. Our BBWT-algorithm is faster than or competitive with all other tested BBWT construction implementations on large or repetitive data, and our eBWT-algorithm is faster than all other programs on data that is not extremely repetitive.},
	author = {Olbrich, Jannik and Ohlebusch, Enno and B\"{u}chler, Thomas},
	date-added = {2025-01-20 09:06:58 -0600},
	date-modified = {2025-01-20 09:07:33 -0600},
	doi = {10.1145/3641854},
	journal = {ACM Trans. Algorithms},
	keywords = {Suffix array, suffix sorting, string algorithms, bijective Burrows-Wheeler transform},
	number = {2},
	pages = {18:1--18:42},
	title = {Generic Non-recursive Suffix Array Construction},
	volume = {20},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3641854}}

@article{blt-sfh-25,
	abstract = {We present the strict Fibonacci heap, the first pointer-based heap implementation with time bounds matching those of Fibonacci heaps in the worst case. Strict Fibonacci heaps support make-heap, insert, find-min, meld and decrease-key in worst-case  (O(1))  time, and delete and delete-min in worst-case  (O(lg n))  time, where  (n)  is the size of the heap. The data structure uses linear space.A previous solution achieving the same time bounds in the RAM model made essential use of arrays and extensive use of redundant counter schemes to maintain balance. Our solution uses neither. Our key simplification is to discard the structure of the smaller heap when doing a meld, and to use the pigeonhole principle in place of the redundant counter mechanism to maintain balance.},
	author = {Brodal, Gerth St{\o}lting and Lagogiannis, George and Tarjan, Robert E.},
	date-added = {2025-01-20 09:02:36 -0600},
	date-modified = {2025-02-09 16:56:33 -0600},
	doi = {10.1145/3707692},
	journal = {ACM Trans. Algorithms},
	keywords = {Data structures, heaps, meld, decrease-key, worst-case complexity},
	number = {2},
	pages = {15:1--15:18},
	title = {Strict {Fibonacci} Heaps},
	volume = {21},
	year = {2025},
	bdsk-url-1 = {https://doi.org/10.1145/3707692}}

@article{bcfkt-tp-24,
	abstract = {This paper introduces a new data-structural object that we call the tiny pointer. In many applications, traditional  (log n) -bit pointers can be replaced with  (o(log n)) -bit tiny pointers at the cost of only a constant-factor time overhead and a small probability of failure. We develop a comprehensive theory of tiny pointers, and give optimal constructions for both fixed-size tiny pointers (i.e., settings in which all of the tiny pointers must be the same size) and variable-size tiny pointers (i.e., settings in which the average tiny-pointer size must be small, but some tiny pointers can be larger). If a tiny pointer references an item in an array filled to load factor  (1-delta) , then the optimal tiny-pointer size is  (Theta(logloglog n+logdelta^{-1}))  bits in the fixed-size case, and  (Theta(logdelta^{-1}))  expected bits in the variable-size case.Our tiny-pointer constructions also require us to revisit several classic problems having to do with balls and bins; these results may be of independent interest.Using tiny pointers, we apply tiny pointers to five classic data-structure problems. We show that:

A data structure storing  (n)   (v) -bit values for  (n)  keys with constant-factor time modifications/queries can be implemented to take space  (nv+O(nlog^{(r)}n))  bits, for any constant  (rgt0) , as long as the user stores a tiny pointer of expected size  (O(1))  with each key---here,  (log^{(r)}n)  is the  (r) -th iterated logarithm.
Any binary search tree can be made succinct, meaning that it achieves  ((1+o(1)))  times the optimal space, with constant-factor time overhead, and can even be made to be within  (O(n))  bits of optimal if we allow for  (O(log^{*}n)) -time modifications---this holds even for rotation-based trees such as the splay tree and the red-black tree.
Any fixed-capacity key-value dictionary can be made stable (i.e., items do not move once inserted) with constant-factor time overhead and  ((1+o(1))) -factor space overhead.
Any key-value dictionary that requires uniform-size values can be made to support arbitrary-size values with constant-factor time overhead and with an additional space consumption of  (log^{(r)}n+O(log j))  bits per  (j) -bit value for an arbitrary constant  (rgt0)  of our choice.
Given an external-memory array  (A)  of size  ((1+varepsilon)n)  containing a dynamic set of up to  (n)  key-value pairs, it is possible to maintain an internal-memory stash of size  (O(nlogvarepsilon^{-1}))  bits so that the location of any key-value pair in  (A)  can be computed in constant time (and with no IOs).In each case tiny pointers allow for us to take a natural space-inefficient solution that uses pointers and make it space-efficient for free.},
	arxiv = {2111.12800},
	author = {Bender, Michael A. and Conway, Alex and Farach-Colton, Mart{\'\i}n and Kuszmaul, William and Tagliavini, Guido},
	date-added = {2025-01-20 09:00:59 -0600},
	date-modified = {2025-02-09 16:47:55 -0600},
	doi = {10.1145/3700594},
	journal = {ACM Trans. Algorithms},
	keywords = {pointers, space-efficient, balanced allocation, balls and bins, hashing, load balancing, randomized algorithms, retrieval},
	title = {Tiny Pointers},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3700594}}

@article{st-esh-24,
	abstract = {Since the invention of the pairing heap by Fredman, Sedgewick, Sleator, and Tarjan [8], it has been an open question whether this or any other simple ``self-adjusting'' heap supports decrease-key operations in  (mathrm{O}(loglog n))  time, where  (n)  is the number of heap items. Using powerful new techniques, we answer this question in the affirmative. We prove that both slim and smooth heaps, recently introduced self-adjusting heaps, support heap operations in the following amortized time bounds:  (mathrm{O}(log n))  for delete-min and delete,  (mathrm{O}(loglog n))  for decrease-key, and  (mathrm{O}(1))  for all other heap operations, including insert and meld, where  (n)  is the number of heap items that are eventually deleted: Items inserted but never deleted do not count in the bounds. We also analyze the multipass pairing heap, a variant of pairing heaps. For this heap implementation, we obtain the same bounds except for decrease-key, for which our bound is  (mathrm{O}(loglog ncdotlogloglog n)) , where again items that are never deleted do not count in  (n) . Our bounds significantly improve the best previously known bounds for all three data structures. For slim and smooth heaps our bounds are tight, since they match lower bounds of Iacono and \"{O}zkan [13].},
	arxiv = {2307.02772},
	author = {Sinnamon, Corwin and Tarjan, Robert E.},
	date-added = {2025-01-20 08:58:46 -0600},
	date-modified = {2025-01-20 09:01:25 -0600},
	doi = {10.1145/3708989},
	journal = {ACM Trans. Algorithms},
	keywords = {Heap, Priority Queue, Analysis of Algorithms, Amortized Analysis, Pairing Heap, Multipass Pairing Heap, Slim Heap, Smooth Heap},
	title = {Efficiency of Self-Adjusting Heaps},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1145/3708989}}

@inproceedings{st-namph-23,
	author = {Sinnamon, Corwin and Tarjan, Robert E.},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:57:40 -0600},
	date-modified = {2025-01-20 08:57:54 -0600},
	doi = {10.1137/1.9781611977554.CH23},
	pages = {535--548},
	title = {A Nearly-Tight Analysis of Multipass Pairing Heaps},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH23}}

@inproceedings{st-tashs-23,
	author = {Sinnamon, Corwin and Tarjan, Robert E.},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	comments = {Arxiv version 2108.04458 withdrawn due to major error},
	date-added = {2025-01-20 08:51:18 -0600},
	date-modified = {2025-01-20 08:57:30 -0600},
	doi = {10.1137/1.9781611977554.CH24},
	pages = {549--567},
	title = {A Tight Analysis of Slim Heaps and Smooth Heaps},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH24}}

@inproceedings{cl-s3ilb-23,
	arxiv = {2203.09334},
	author = {Chung, Eldon and Larsen, Kasper Green},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:50:37 -0600},
	date-modified = {2025-02-09 16:55:54 -0600},
	doi = {10.1137/1.9781611977554.CH19},
	pages = {444--455},
	title = {Stronger {3SUM}-Indexing Lower Bounds},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH19}}

@inproceedings{bksw-dmwba-23,
	arxiv = {2207.07438},
	author = {Bhattacharya, Sayan and Kiss, Peter and Saranurak, Thatchaphol and Wajc, David},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:49:19 -0600},
	date-modified = {2025-01-20 08:50:13 -0600},
	doi = {10.1137/1.9781611977554.CH5},
	pages = {100--128},
	title = {Dynamic Matching with Better-than-2 Approximation in Polylogarithmic Update Time},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH5}}

@inproceedings{cz-fdwfd-23,
	author = {Chechik, Shiri and Zhang, Tianyi},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:48:38 -0600},
	date-modified = {2025-01-20 08:48:57 -0600},
	doi = {10.1137/1.9781611977554.CH4},
	pages = {87--99},
	title = {Faster Deterministic Worst-Case Fully Dynamic All-Pairs Shortest Paths via Decremental Hop-Restricted Shortest Paths},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH4}}

@inproceedings{ghnst-fdeec-23,
	arxiv = {2302.05951},
	author = {Goranci, Gramoz and Henzinger, Monika and Nanongkai, Danupon and Saranurak, Thatchaphol and Thorup, Mikkel and Wulff-Nilsen, Christian},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:47:20 -0600},
	date-modified = {2025-01-20 08:48:16 -0600},
	doi = {10.1137/1.9781611977554.CH3},
	pages = {70--86},
	title = {Fully Dynamic Exact Edge Connectivity in Sublinear Time},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH3}}

@inproceedings{hkgw-medsc-23,
	arxiv = {2204.02519},
	author = {Hua, Yiding and Kyng, Rasmus and Gutenberg, Maximilian Probst and Wu, Zihang},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:46:16 -0600},
	date-modified = {2025-01-20 08:46:52 -0600},
	doi = {10.1137/1.9781611977554.CH2},
	pages = {48--69},
	title = {Maintaining Expander Decompositions via Sparse Cuts},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.ch2}}

@inproceedings{bks-dapmw-23,
	arxiv = {2207.07519},
	author = {Bhattacharya, Sayan and Kiss, Peter and Saranurak, Thatchaphol},
	booktitle = {Proc. 34th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:44:35 -0600},
	date-modified = {2025-01-20 08:46:00 -0600},
	doi = {10.1137/1.9781611977554.CH1},
	pages = {1--47},
	title = {Dynamic Algorithms for Packing-Covering LPs via Multiplicative Weight Updates},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977554.CH1}}

@inproceedings{bfnp-dgawp-24,
	arxiv = {2307.09961},
	author = {van den Brand, Jan and Forster, Sebastian and Nazari, Yasamin and Polak, Adam},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:29:20 -0600},
	date-modified = {2025-01-20 08:30:10 -0600},
	doi = {10.1137/1.9781611977912.126},
	pages = {3534--3557},
	title = {On Dynamic Graph Algorithms with Predictions},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.126}}

@inproceedings{ci-dspgb-24,
	arxiv = {2312.04235},
	author = {Collette, S{\'{e}}bastien and Iacono, John},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:28:18 -0600},
	date-modified = {2025-01-20 08:29:13 -0600},
	doi = {10.1137/1.9781611977912.95},
	pages = {2657--2678},
	title = {Distances and shortest paths on graphs of bounded highway dimension: {Simple}, fast, dynamic},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.95}}

@inproceedings{bbghj-damsm-24,
	arxiv = {2306.00959},
	author = {Banihashem, Kiarash and Biabani, Leyla and Goudarzi, Samira and Hajiaghayi, MohammadTaghi and Jabbarzade, Peyman and Monemizadeh, Morteza},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:27:29 -0600},
	date-modified = {2025-01-20 08:28:07 -0600},
	doi = {10.1137/1.9781611977912.125},
	pages = {3485--3533},
	title = {Dynamic Algorithms for Matroid Submodular Maximization},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.125}}

@inproceedings{lhgjr-fdckc-24,
	author = {{\L}{\k a}cki, Jakub and Haeupler, Bernhard and Grunau, Christoph and Jayaram, Rajesh and Rozho{\v n}, V{\'a}clav},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:25:19 -0600},
	date-modified = {2025-01-20 08:26:16 -0600},
	doi = {10.1137/1.9781611977912.124},
	pages = {3463--3484},
	title = {Fully Dynamic Consistent $k$-Center Clustering},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.124}}

@inproceedings{cfgns-dakg-24,
	arxiv = {2307.15557},
	author = {Cruciani, Emilio and Forster, Sebastian and Goranci, Gramoz and Nazari, Yasamin and Skarlatos, Antonis},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:24:32 -0600},
	date-modified = {2025-01-20 08:25:07 -0600},
	doi = {10.1137/1.9781611977912.123},
	pages = {3441--3462},
	title = {Dynamic algorithms for $k$-center on graphs},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.123}}

@inproceedings{bcps-nlcds-24,
	arxiv = {2311.03267},
	author = {Bhattacharya, Sayan and Costa, Mart{\'\i}n and Panski, Nadav and Solomon, Shay},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:23:34 -0600},
	date-modified = {2025-01-20 08:31:42 -0600},
	doi = {10.1137/1.9781611977912.122},
	pages = {3393--3440},
	title = {Nibbling at Long Cycles: {Dynamic} (and Static) Edge Coloring in Optimal Time},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.122}}

@inproceedings{abr-fdmap-24,
	arxiv = {2307.08772},
	author = {Azarmehr, Amir and Behnezhad, Soheil and Roghani, Mohammad},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:21:34 -0600},
	date-modified = {2025-01-20 08:23:12 -0600},
	doi = {10.1137/1.9781611977912.109},
	pages = {3040--3061},
	title = {Fully Dynamic Matching: $(2-\sqrt{2})$-Approximation in Polylog Update Time},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.109}}

@inproceedings{ab-fdspr-24,
	arxiv = {2304.07403},
	author = {Alokhina, Anastasiia and van den Brand, Jan},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:20:36 -0600},
	date-modified = {2025-01-20 08:21:17 -0600},
	doi = {10.1137/1.9781611977912.108},
	pages = {3027--3039},
	title = {Fully Dynamic Shortest Path Reporting Against an Adaptive Adversary},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.108}}

@inproceedings{jst-fdmss-24,
	arxiv = {2401.09700},
	author = {Jin, Wenyu and Sun, Xiaorui and Thorup, Mikkel},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:19:36 -0600},
	date-modified = {2025-01-20 08:20:29 -0600},
	doi = {10.1137/1.9781611977912.107},
	pages = {2999--3026},
	title = {Fully Dynamic Min-Cut of Superconstant Size in Subpolynomial Time},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.107}}

@inproceedings{knps-fdasp-24,
	arxiv = {2310.20623},
	author = {Korhonen, Tuukka and Nadara, Wojciech and Pilipczuk, Michal and Sokolowski, Marek},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:18:47 -0600},
	date-modified = {2025-01-20 08:19:25 -0600},
	doi = {10.1137/1.9781611977912.12},
	pages = {296--313},
	title = {Fully dynamic approximation schemes on planar and apex-minor-free graphs},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.12}}

@inproceedings{meho-dmpht-24,
	arxiv = {2311.01115},
	author = {di Montesano, Sebastiano Cultrera and Edelsbrunner, Herbert and Henzinger, Monika and Ost, Lara},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:17:45 -0600},
	date-modified = {2025-01-20 08:18:36 -0600},
	doi = {10.1137/1.9781611977912.11},
	pages = {243--295},
	title = {Dynamically Maintaining the Persistent Homology of Time Series},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.11}}

@inproceedings{bfvkk-ddtw-24,
	author = {Bringmann, Karl and Fischer, Nick and {van der Hoog}, Ivor and Kipouridis, Evangelos and Kociumaka, Tomasz and Rotenberg, Eva},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:17:06 -0600},
	date-modified = {2025-01-20 08:17:27 -0600},
	doi = {10.1137/1.9781611977912.10},
	pages = {208--242},
	title = {Dynamic Dynamic Time Warping},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.10}}

@inproceedings{llyz-ddwsw-24,
	arxiv = {2310.20536},
	author = {Li, Tianxiao and Liang, Jingxun and Yu, Huacheng and Zhou, Renfei},
	booktitle = {Proc. 35th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 08:15:47 -0600},
	date-modified = {2025-01-20 08:27:31 -0600},
	doi = {10.1137/1.9781611977912.9},
	pages = {171--207},
	title = {Dynamic Dictionary with Subconstant Wasted Bits per Key},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977912.9}}

@inproceedings{bfkk-mhms-24,
	author = {Bender, Michael A. and Farach-Colton, Mart{\'\i}n and Kuszmaul, John and Kuszmaul, William},
	booktitle = {Proc. 7th Symp. Simplicity in Algorithms (SOSA)},
	date-added = {2025-01-20 06:08:25 -0600},
	date-modified = {2025-01-20 06:09:14 -0600},
	doi = {10.1137/1.9781611977936.33},
	editor = {Parter, Merav and Pettie, Seth},
	pages = {363--373},
	title = {Modern Hashing Made Simple},
	year = {2024},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611977936.33}}

@inproceedings{k-scapc-25,
	abstract = { Abstract The Chernoff bound is one of the most widely used tools in theoretical computer science. It's rare to find a randomized algorithm that doesn't employ a Chernoff bound in its analysis. The standard proofs of Chernoff bounds are beautiful but in some ways not very intuitive. In this paper, I'll show you a different proof that has four features: * the proof offers a strong intuition for why Chernoff bounds look the way that they do; * the proof is user-friendly and (almost) algebra-free; * the proof comes with matching lower bounds, up to constant factors in the exponent; * the proof extends to establish generalizations of Chernoff bounds in other settings. The ultimate goal is that, once you know this proof (and with a bit of practice), you should be able to confidently reason about Chernoff-style bounds in your head, extending them to other settings, and convincing yourself that the bounds you're obtaining are tight (up to constant factors in the exponent). },
	arxiv = {2501.03488},
	author = {Kuszmaul, William},
	booktitle = {Proc. 8th Symp. Simplicity in Algorithms (SOSA)},
	date-added = {2025-01-20 06:03:05 -0600},
	date-modified = {2025-01-20 06:05:58 -0600},
	doi = {10.1137/1.9781611978315.6},
	pages = {77--93},
	title = {A Simple and Combinatorial Approach to Proving {Chernoff} Bounds and Their Generalizations},
	year = {2025},
	bdsk-url-1 = {https://epubs.siam.org/doi/abs/10.1137/1.9781611978315.6},
	bdsk-url-2 = {https://doi.org/10.1137/1.9781611978315.6}}

@inproceedings{p-opqwa-25,
	abstract = { Abstract We revisit the classic border tree data structure [Gu, Farach, Beigel, SODA 1994] that answers the following prefix-suffix queries on a string T of length n over an integer alphabet Σ = [0,σ ): for any i,j ∈ [0,n ) return all occurrences of T in T [0 .. i]T [j .. n --- 1]. The border tree of T can be constructed in O (n ) time and answers prefix-suffix queries in O (log n + Occ) time, where Occ is the number of occurrences of T in T [0.. i ]T [ j .. n --- 1]. Our contribution here is the following. We present a completely different and remarkably simple data structure that can be constructed in the optimal O (n/ logσ n ) time and supports queries in the optimal O (1) time. Our result is based on a new structural lemma that lets us encode the output of any query in constant time and, space. We also show a new direct application of our result in pattern matching on node-labeled graphs. },
	arxiv = {2411.03784},
	author = {Pissis, Solon P.},
	booktitle = {Proc. 8th Symp. Simplicity in Algorithms (SOSA)},
	date-added = {2025-01-20 06:01:41 -0600},
	date-modified = {2025-01-20 06:03:46 -0600},
	doi = {10.1137/1.9781611978315.13},
	pages = {166--171},
	title = {Optimal prefix-suffix queries with applications},
	year = {2025},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611978315.13}}

@inproceedings{kps-3pufs-25,
	abstract = { Abstract We revisit the 3SUM problem in the preprocessed universes setting. We present an algorithm that, given three sets A, B, C of n integers, preprocesses them in quadratic time, so that given any subsets A' ⊆ A, B' ⊆ B, C' ⊆ C, it can decide if there exist a ∈ A`, b ∈ B`, c ∈ C` with a + b = c in time O(n1.5 log n). In contrast to both the first subquadratic {\~O} (n13/7)-time algorithm by Chan and Lewenstein (STOC 2015) and the current fastest {\~O} (n11/6)-time algorithm by Chan, Vassilevska Williams, and Xu (STOC 2023), which are based on the Balog-Szemer{\'e}di-Gowers theorem from additive combinatorics, our algorithm uses only standard 3SUM-related techniques, namely FFT and linear hashing modulo a prime. It is therefore not only faster but also simpler. Just as the two previous algorithms, ours not only decides if there is a single 3SUM solution but it actually determines for each c ∈ C` if there is a solution containing it. We also modify the algorithm to still work in the scenario where the set C is unknown at the time of preprocessing. Finally, even though the simplest version of our algorithm is randomized, we show how to make it deterministic losing only polylogarithmic factors in the running time. * Work supported by European Research Council (ERC) under the EU's Horizon 2020 research and innovation programme (Grant agreement No. 101019547). The full version of the paper can be accessed at https://arxiv.org/abs/2410.16784 },
	arxiv = {2410.16784},
	author = {Kasliwal, Shashwat and Polak, Adam and Sharma, Pratyush},
	booktitle = {Proc. 8th Symp. Simplicity in Algorithms (SOSA)},
	date-added = {2025-01-20 05:59:59 -0600},
	date-modified = {2025-01-20 06:01:17 -0600},
	doi = {10.1137/1.9781611978315.12},
	pages = {158--165},
	title = {{3SUM} in Preprocessed Universes: {Faster} and Simpler},
	year = {2025},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611978315.12}}

@inproceedings{as-cplbp-25,
	abstract = { Abstract We study the predecessor search problem in the classical PRAM model of computation. In this problem, the input is a set of n ℓ-bit integers and the goal is to store the input in a data structure of size S (n ) such that given a query value q, the predecessor of q can be found efficiently. This is a very classical problem with an extensive history. We prove a lower bound for this problem in the strongest CRCW PRAM model. A simplified version of the lower bound states that in a K-processor PRAM model with O (log n )-bit registers, the query requires Ω(logK log n ) worst-case time under the realistic setting where the space is near-linear. },
	author = {Afshani, Peyman and Sitchinava, Nodari},
	booktitle = {Proc. 36th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 05:49:47 -0600},
	date-modified = {2025-01-20 05:50:19 -0600},
	doi = {10.1137/1.9781611978322.136},
	pages = {3998--4008},
	title = {A Cell Probe Lower Bound for the Predecessor Search Problem in {PRAM}},
	year = {2025},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611978322.136}}

@inproceedings{km-edchh-25,
	abstract = { Abstract A d-ary cuckoo hash table is an open-addressed hash table that stores each key x in one of d random positions h1 (x ), h 2(x ),{\ldots}, hd(x ). In the offline setting, where all items are given and keys need only be matched to locations, it is possible to support a load factor of 1 --- ϵ while using hashes. The online setting, where keys are moved as new keys arrive sequentially, has the additional challenge of the time to insert new keys, and it has not been known whether one can use d = O (ln ϵ-1) hashes to support poly(ϵ-1) expected-time insertions. In this paper, we introduce bubble-up cuckoo hashing, an implementation of d-ary cuckoo hashing that achieves all of the following properties simultaneously: * uses hash locations per item for an arbitrarily small positive constant a. * achieves expected insertion time O (δ-1) for any insertion taking place at load factor 1 --- δ ≤ 1 --- ϵ. * achieves expected positive query time O (1), independent of d and ϵ. The first two properties give an essentially optimal value of d without compromising insertion time. The third property is interesting even in the offline setting: it says that, even though negative queries must take time d , positive queries can actually be implemented in O (1) expected time, even when d is large. },
	arxiv = {2501.02312},
	author = {Kuszmaul, William and Mitzenmacher, Michael},
	booktitle = {Proc. 36th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 05:48:24 -0600},
	date-modified = {2025-01-20 05:49:19 -0600},
	doi = {10.1137/1.9781611978322.133},
	pages = {3931--3952},
	title = {Efficient $d$-ary Cuckoo Hashing at High Load Factors by Bubbling Up},
	year = {2025},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611978322.133}}

@inproceedings{bc-fsdaa-25,
	abstract = { Abstract We develop simple and general techniques to obtain faster (near-linear time) static approximation algorithms, as well as efficient dynamic data structures, for four fundamental geometric optimization problems: minimum piercing set (MPS), maximum independent set (MIS), minimum vertex cover (MVC), and maximum-cardinality matching (MCM). Highlights of our results include the following: * For n axis-aligned boxes in any constant dimension d, we give an O (log log n)-approximation algorithm for MPS that runs in O (n1+ δ ) time for an arbitrarily small constant δ > 0. This significantly improves the previous O (log log n )-approximation algorithm by Agarwal, Har-Peled, Raychaudhury, and Sintos (SODA 2024), which ran in O (nd/2 polylog n ) time. * Furthermore, we show that our algorithm can be made fully dynamic with O (nδ ) amortized update time. Previously, Agarwal et al. (SODA 2024) obtained dynamic results only in ℝ2 and achieved only amortized expected update time. * For n axis-aligned rectangles in ℝ2, we give an O (1)-approximation algorithm for MIS that runs in O (n1+δ ) time. Our result significantly improves the running time of the celebrated algorithm by Mitchell (FOCS 2021) (which was about O (n21)), and answers one of his open questions. Our algorithm can also be made fully dynamic with O (nδ ) amortized update time. * For n (unweighted or weighted) fat objects in any constant dimension, we give a dynamic O (1)- approximation algorithm for MIS with O (nδ ) amortized update time. Previously, Bhore, N{\"o}llenburg, Toth, and Wulms (SoCG 2024) obtained efficient dynamic O (1)-approximation algorithms only for disks in ℝ2 and only in the unweighted setting. * For n axis-aligned rectangles in ℝ2, we give a dynamic -approximation algorithm for MVC with O (polylog n ) amortized update time for any constant ε > 0. Our static result improves the running time of Bar-Yehuda, Hermelin, and Rawitz (2011). For disks in ℝ2 or hypercubes in any constant dimension, we give the first fully dynamic (1 + ε )-approximation algorithm for MVC with O (polylog n ) amortized update time. * For (monochromatic or bichromatic) disks in ℝ2 or hypercubes in any constant dimension, we give the first fully dynamic (1 + ε )-approximation algorithm for MCM with O (polylog n ) amortized update time. Work supported in part by NSF Grant CCF-2224271. },
	author = {Bhore, Sujoy and Chan, Timothy M.},
	booktitle = {Proc. 36th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 05:46:48 -0600},
	date-modified = {2025-01-20 05:47:28 -0600},
	doi = {10.1137/1.9781611978322.79},
	pages = {2357--2386},
	title = {Fast Static and Dynamic Approximation Algorithms for Geometric Optimization Problems: Piercing, Independent Set, Vertex Cover, and Matching},
	year = {2025},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611978322.79}}

@inproceedings{cp-fdags-25,
	abstract = { Abstract A t-spanner of an undirected n-vertex graph G is a sparse subgraph H of G that preserves all pairwise distances between its vertices to within multiplicative factor t, also called the stretch. Spanners play an important role in the design of efficient algorithms for distance-based graph optimization problems, as they allow one to sparsify the graph, while approximately preserving all distances. It is well known that any n-vertex graph admits a (2k --- 1)-spanner with O (n1+1/k) edges, and that this stretch-size tradeoff is optimal assuming the Erdos Girth Conjecture. In this paper we investigate the problem of efficiently maintaining spanners in the fully dynamic setting with an adaptive adversary. Despite a long and intensive line of research, this problem is still poorly understood: for example, no algorithm achieving a sublogarithmic stretch, with a sublinear in n update time, and a strongly subquadratic in n bound on the size of the spanner is currently known in this setting. One of our main results is a deterministic (and therefore, adaptive-adversary) algorithm, that, for any 512 ≤ k ≤ (log n )1/49 and 1/k ≤ δ ≤ 1/400, maintains a spanner H of a fully dynamic graph with stretch poly(k ) · 2o (1/δ6) and size |E (H )| ≤ O (n 1+O (1/k )), with worst-case update time n O(δ ) and recourse n O(1/k ). Our algorithm relies on a new technical tool that we develop, and that we believe to be of independent interest, called low-diameter router decomposition. Specifically, we design a deterministic algorithm that maintains a decomposition of a fully dynamic graph into edge-disjoint clusters with bounded vertex overlap, where each cluster C is guaranteed to be a bounded-diameter router, meaning that any reasonable multicommodity demand over the vertices of C can be routed along short paths and with low congestion inside C. A similar graph decomposition notion was introduced by [Haeupler et al., STOC 2022] and recently strengthened by [Haeupler et al., FOCS 2024]; the latter result was already used to obtain fast algorithms for multicommodity flows [Haeupler et al., STOC 2024] and dynamic distance oracles [Haeupler et al., FOCS 2024]. However, in contrast to these and other prior works, the decomposition that our algorithm maintains is guaranteed to be proper, in the sense that the routing paths between the pairs of vertices of each cluster C are contained inside C (rather than in the entire graph G ). Additionally, our algorithm maintains, for each cluster C of the decomposition, a subgraph C′ ⊆ C of a prescribed density, that also has strong routing properties. We show additional applications of our low-diameter router decomposition, by obtaining new deterministic dynamic algorithms for fault-tolerant spanners and low-congestion spanners. Several of these applications crucially rely on the fact that our router decomposition is proper. * Supported in part by NSF grant CCF-2402283 and NSF HDR TRIPODS award 2216899. †This project is funded by the European Research Council (ERC) under the European Unions Horizon 2020 research and innovation programme (grant agreement No. 949083). },
	author = {Chuzhoy, Julia and Parter, Merav},
	booktitle = {Proc. 36th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 05:43:44 -0600},
	date-modified = {2025-01-20 05:44:24 -0600},
	doi = {10.1137/1.9781611978322.23},
	pages = {785--823},
	title = {Fully Dynamic Algorithms for Graph Spanners via Low-Diameter Router Decomposition},
	year = {2025},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611978322.23}}

@inproceedings{ehl-fdamc-25,
	abstract = { Abstract Dynamically maintaining the minimum cut in a graph G under edge insertions and deletion is a fundamental problem in dynamic graph algorithms for which no conditional lower bound on the time per operation exists. In an n-node graph the best known (1 + o (1))-approximate algorithm takes update time [14]. If the minimum cut is guaranteed to be (log n )o (1), a deterministic exact algorithm with n o (1) update time exists [8]. We present the first fully dynamic algorithm for (1 + o (1))-approximate minimum cut with n o(1) update time. Our main technical contribution is to show that it suffices to consider small-volume cuts in suitably contracted graphs. },
	arxiv = {2412.15069},
	author = {El-Hayek, Antoine and Henzinger, Monika and Li, Jason},
	booktitle = {Proc. 36th Ann. ACM-SIAM Symp. Discrete Algorithms (SODA)},
	date-added = {2025-01-20 05:39:24 -0600},
	date-modified = {2025-01-20 05:42:46 -0600},
	doi = {10.1137/1.9781611978322.22},
	pages = {750--784},
	title = {Fully Dynamic Approximate Minimum Cut in Subpolynomial Time per Operation},
	year = {2025},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611978322.22}}

@inproceedings{aapfo-aiht-23,
	abstract = { We revisit the problem of building static hash tables on the GPU and present an efficient implementation of bucketed hash tables. By decoupling the probing scheme from the hash table in-memory representation, we offer an implementation where the number of probes and the bucket size are the only factors limiting performance. Our analysis sweeps through the hash table parameter space for two probing schemes: cuckoo and iceberg hashing. We show that a bucketed cuckoo hash table (BCHT) that uses three hash functions outperforms alternative methods that use iceberg hashing and a cuckoo hash table that uses a bucket size of one. At load factors as high as 0.99, BCHT enjoys an average probe count of 1.43 during insertion. Using three hash functions only, positive and negative queries require at most 1.39 and 2.8 average probes per key, respectively. },
	author = {Awad, Muhammad A. and Ashkiani, Saman and Porumbescu, Serban D. and Farach-Colton, Mart{\'\i}n and Owens, John D.},
	booktitle = {Proc. 4th Symp. Algorithmic Principles Comput. Sys. (APOCS)},
	date-added = {2025-01-20 05:31:25 -0600},
	date-modified = {2025-02-10 08:21:24 -0600},
	doi = {10.1137/1.9781611977578.ch3},
	pages = {33--50},
	title = {Analyzing and Implementing {GPU} Hash Tables},
	year = {2023},
	bdsk-url-1 = {https://epubs.siam.org/doi/abs/10.1137/1.9781611977578.ch3},
	bdsk-url-2 = {https://doi.org/10.1137/1.9781611977578.ch3}}

@article{ow-btatr-80,
	abstract = {1-2 brother trees are binary search trees which have similarities to both height balanced search trees and 2-3 trees. Firstly, 0(log2n) insertion and deletion algorithms are demonstrated and their similarities with those for brother trees are noted. Secondly, it is proved that the space utilisation of (random) 1-2 brother trees is much better than that for (random) 2-3 trees. Thirdly, the close relationship between 1-2 brother trees and height balanced trees is demonstrated, and as this also holds for their right-sided counterparts it leads to 0(log2n) insertion and deletion algorithms for right-sided height balanced trees. Finally, this demonstrates that the insertion and deletion algorithms for right-sided height balanced trees were already available, but hidden, in the corresponding algorithms for right brother trees.},
	author = {Ottmann, Thomas and Wood, Derick},
	date-added = {2025-01-19 16:16:04 -0600},
	date-modified = {2025-01-19 16:16:59 -0600},
	doi = {10.1093/comjnl/23.3.248},
	eprint = {https://academic.oup.com/comjnl/article-pdf/23/3/248/1066348/23-3-248.pdf},
	issn = {0010-4620},
	journal = {Computer J.},
	number = {3},
	pages = {248--255},
	title = {1-2 Brother Trees or {AVL} Trees Revisited},
	volume = {23},
	year = {1980},
	bdsk-url-1 = {https://doi.org/10.1093/comjnl/23.3.248}}

@article{osw-rbt-78,
	author = {Ottmann, Thomas and Six, Hans-Werner and Wood, Derick},
	date-added = {2025-01-19 16:12:06 -0600},
	date-modified = {2025-01-19 16:12:29 -0600},
	doi = {10.1145/359588.359607},
	journal = {Commun. {ACM}},
	number = {9},
	pages = {769--776},
	title = {Right Brother Trees},
	volume = {21},
	year = {1978},
	bdsk-url-1 = {https://doi.org/10.1145/359588.359607}}

@article{osw-cbatb-79,
	author = {Ottmann, Thomas and Six, Hans-Werner and Wood, Derick},
	date-added = {2025-01-19 16:06:41 -0600},
	date-modified = {2025-01-19 16:07:15 -0600},
	doi = {10.1007/BF02252612},
	journal = {Computing},
	number = {1},
	pages = {43--54},
	title = {On the correspondence between {AVL} trees and brother trees},
	volume = {23},
	year = {1979},
	bdsk-url-1 = {https://doi.org/10.1007/BF02252612}}

@incollection{l-cdo-76,
	author = {van Leeuwen, Jan},
	booktitle = {Foundations of Computer Science II: Part 1},
	date-added = {2025-01-19 15:59:23 -0600},
	date-modified = {2025-01-19 16:02:58 -0600},
	editor = {de Bakker, Jaco W. and Apt, Krzysztof R.},
	number = {81},
	series = {Mathematical Center Tracts},
	title = {The complexity of data organization},
	url = {https://ir.cwi.nl/pub/13103/},
	year = {1976},
	bdsk-url-1 = {https://ir.cwi.nl/pub/13103/}}

@inproceedings{k-smd-16,
	annote = {Keywords: dictionary, mergeable, data structure, merge, split},
	author = {Karczmarz*, Adam},
	booktitle = {Proc. 15th Scand. Symp. and Workshops Algorithm Theory (SWAT)},
	comments = {Karczmarz PhD 2019 Warsaw (Sankowski)},
	date-added = {2025-01-19 15:32:47 -0600},
	date-modified = {2025-01-19 15:36:40 -0600},
	doi = {10.4230/LIPIcs.SWAT.2016.7},
	pages = {7:1--7:13},
	publisher = {Schloss Dagstuhl--Leibniz-Zentrum f{\"u}r Informatik},
	series = {Leibniz Int. Proc. Informatics},
	title = {A Simple Mergeable Dictionary},
	volume = {53},
	year = {2016},
	bdsk-url-1 = {https://doi.org/10.4230/LIPIcs.SWAT.2016.7}}

@inproceedings{io-md-10,
	abstract = {A data structure is presented for the Mergeable Dictionary abstract data type, which supports the operations Predecessor-Search, Split, and Merge on a collection of disjoint sets of totally ordered data. While in a typical mergeable dictionary (e.g. 2-4 Trees), the Merge operation can only be performed on sets that span disjoint intervals in keyspace, the structure here has no such limitation. A data structure which can handle arbitrary Merge operations in O(log n) amortized time in the absence of Split operations was presented by Brown and Tarjan [2]. A data structure which can handle both Split and Merge operations in {\$}{\{}{\backslash}mathcal O{\}}({\{}{\backslash}rm log^2{\}}{\_}n){\$}amortized time was presented by Farach and Thorup [4]. In contrast, our data structure supports all operations, including Split and Merge, in {\$}{\{}{\backslash}mathcal O{\}}({\{}{\backslash}rm log{\}}{\_}n){\$}amortized time, thus showing that interleaved Merge operations can be supported at no additional cost vis-{\`a}-vis disjoint Merge operations.},
	arxiv = {1002.4248},
	author = {Iacono, John and {\"O}zkan*, {\"O}zg{\"u}r},
	booktitle = {Proc. 37th Int. Colloq. Automata Lang. Prog. (ICALP)},
	comments = {{\"O}zkan PhD 2013 NYU Poly (Iacono)},
	date-added = {2025-01-19 15:23:08 -0600},
	date-modified = {2025-01-19 15:34:23 -0600},
	doi = {10.1007/978-3-642-14165-2_15},
	pages = {164--175},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Mergeable Dictionaries},
	volume = {6198},
	year = {2010},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-14165-2_15}}

@article{bt-fma-79,
	author = {Brown*, Mark R. and Tarjan, Robert E.},
	comments = {Previously a 1977 Stanford TR. Brown's PhD: Stanford 1979 (Knuth).},
	date-added = {2025-01-19 15:15:22 -0600},
	date-modified = {2025-01-19 15:21:52 -0600},
	doi = {10.1145/322123.322127},
	journal = {J. Assoc. Comput. Mach.},
	number = {2},
	pages = {211--226},
	title = {A fast merging algorithm},
	volume = {26},
	year = {1979},
	bdsk-url-1 = {https://doi.org/10.1145/322123.322127}}

@techreport{p-slc-89,
	author = {Pugh, William},
	date-added = {2025-01-19 15:03:47 -0600},
	date-modified = {2025-01-19 15:08:32 -0600},
	institution = {UMIACS, Univ. Maryland},
	number = {CS--TR--2286.1 and UMIACS--TR--89--72.1},
	title = {A Skip List Cookbook},
	url = {http://hdl.handle.net/1903/544},
	year = {1989},
	bdsk-url-1 = {http://hdl.handle.net/1903/544}}

@phdthesis{o-pfds-96,
	author = {Okasaki, Chris},
	date-added = {2025-01-07 12:47:26 -0600},
	date-modified = {2025-01-07 12:48:07 -0600},
	school = {School of Computer Science, CMU},
	title = {Purely Functional Data Structures},
	url = {http://reports-archive.adm.cs.cmu.edu/anon/anon/1996/CMU-CS-96-177.pdf},
	year = {1996},
	bdsk-url-1 = {http://reports-archive.adm.cs.cmu.edu/anon/anon/1996/CMU-CS-96-177.pdf}}

@book{o-pfds-99,
	author = {Okasaki, Chris},
	date-added = {2025-01-07 12:45:16 -0600},
	date-modified = {2025-01-07 12:46:01 -0600},
	publisher = {Cambridge Univ. Press},
	title = {Purely Functional Data Structures},
	year = {1999}}

@inproceedings{b-wcepq-96,
	author = {Brodal, Gerth St\o{}lting},
	booktitle = {Proc. 7th Ann. ACM-SIAM Symp. Discrete Algorithms},
	comments = {No registered DOI},
	date-added = {2025-01-07 12:41:55 -0600},
	date-modified = {2025-01-07 12:43:53 -0600},
	pages = {520---58},
	title = {Worst-case efficient priority queues},
	url = {https://dl.acm.org/doi/10.5555/313852.313883},
	year = {1996},
	bdsk-url-1 = {https://dl.acm.org/doi/10.5555/313852.313883}}

@inproceedings{kt-pfrcs-96,
	author = {Kaplan, Haim and Tarjan, Robert E.},
	booktitle = {Proc. 28th Ann. ACM Symp. Theory Compu.},
	date-added = {2025-01-07 12:39:37 -0600},
	date-modified = {2025-01-07 12:40:25 -0600},
	doi = {10.1145/237814.237865},
	pages = {202---211},
	title = {Purely functional representations of catenable sorted lists},
	year = {1996},
	bdsk-url-1 = {https://doi.org/10.1145/237814.237865}}

@misc{oeis-lbr-25,
	author = {Inc., OEIS Foundation},
	date-added = {2025-01-07 12:34:09 -0600},
	date-modified = {2025-01-07 12:37:35 -0600},
	howpublished = {Entry A089591 in The Online Encyclopedia of Integer Sequences},
	title = {Lazy binary representation},
	url = {https://oeis.org/A089591},
	year = {2025},
	bdsk-url-1 = {https://oeis.org/A089591}}

@techreport{a-srnrpd-60,
	author = {Avi{\v z}ienis, Algirdas Anthony},
	date-added = {2025-01-07 12:20:41 -0600},
	date-modified = {2025-01-07 12:24:57 -0600},
	institution = {University of Illinois},
	title = {A Study of Redundant Number Representations for Parallel Digital Computers},
	type = {{Ph.D.} dissertation},
	url = {https://www.ideals.illinois.edu/items/57191},
	year = {1960},
	bdsk-url-1 = {https://www.ideals.illinois.edu/items/57191}}

@article{a-sdnrf-61,
	author = {Avi{\v z}ienis, Algirdas},
	date-added = {2025-01-07 12:09:46 -0600},
	date-modified = {2025-01-07 12:16:56 -0600},
	doi = {10.1109/TEC.1961.5219227},
	journal = {IRE Trans. Electronic Computers},
	keywords = {Concurrent computing, Digital arithmetic, Adders, Propulsion},
	number = {3},
	pages = {389--400},
	title = {Signed-Digit Number Representations for Fast Parallel Arithmetic},
	volume = {EC-10},
	year = {1961},
	bdsk-url-1 = {https://doi.org/10.1109/TEC.1961.5219227}}

@techreport{ck-pps-77,
	author = {Clancy, Michael J. and Knuth, Donald E.},
	date-added = {2025-01-07 12:02:13 -0600},
	date-modified = {2025-01-07 12:31:04 -0600},
	institution = {Deptartment of Computer Science, Stanford University},
	number = {CS-TR-77-606},
	title = {A programming and problem-solving seminar},
	url = {http://i.stanford.edu/TR/CS-TR-77-606.html},
	year = {1977},
	bdsk-url-1 = {http://i.stanford.edu/TR/CS-TR-77-606.html}}

@misc{i-iubph-11,
	arxiv = {1110.4428},
	author = {Iacono, John},
	date-added = {2024-03-15 13:59:40 -0500},
	date-modified = {2024-03-15 14:01:03 -0500},
	howpublished = {Preprint},
	month = {October},
	note = {Updated version of \cite{i-iubph-00}},
	title = {Improved Upper Bounds for Pairing Heaps},
	year = {2011}}

@inproceedings{c-qhsaf-13,
	author = {Chan, Timothy M.},
	booktitle = {Space-Efficient Data Structures, Streams, and Algorithms: Papers in Honor of J. Ian Munro on the Occasion of His 66th Birthday},
	date-added = {2024-03-15 13:37:15 -0500},
	date-modified = {2024-03-15 13:38:01 -0500},
	doi = {10.1007/978-3-642-40273-9_3},
	editor = {Brodnik, Andrej and L{\'{o}}pez{-}Ortiz, Alejandro and Raman, Venkatesh and Viola, Alfredo},
	pages = {27--32},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Quake Heaps: {A} Simple Alternative to {Fibonacci} Heaps},
	volume = {8066},
	year = {2013},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-40273-9%5C_3}}

@inproceedings{p-tfaph-05,
	author = {Pettie, Seth},
	booktitle = {Proc. 46th Ann. {IEEE} Symp. Found. Comput. Sci.},
	date-added = {2024-03-15 13:32:05 -0500},
	date-modified = {2024-03-15 13:32:42 -0500},
	doi = {10.1109/SFCS.2005.75},
	pages = {174--183},
	title = {Towards a Final Analysis of Pairing Heaps},
	year = {2005},
	bdsk-url-1 = {https://doi.org/10.1109/SFCS.2005.75}}

@inproceedings{i-iubph-00,
	author = {Iacono*, John},
	booktitle = {Proc. 7th Scand. Workshop Algorithm Theory},
	date-added = {2024-03-15 13:29:44 -0500},
	date-modified = {2025-02-09 22:46:38 -0600},
	doi = {10.1007/3-540-44985-X\_5},
	number = {1851},
	pages = {32--45},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Improved Upper Bounds for Pairing Heaps},
	year = {2000},
	bdsk-url-1 = {https://doi.org/10.1007/3-540-44985-X%5C_5}}

@article{fsst-phnfs-86,
	author = {Fredman, Michael L. and Sedgewick, Robert and Sleator, Daniel Dominic and Tarjan, Robert Endre},
	date-added = {2024-03-15 13:23:01 -0500},
	date-modified = {2024-03-15 13:23:23 -0500},
	doi = {10.1007/BF01840439},
	journal = {Algorithmica},
	number = {1},
	pages = {111--129},
	title = {The Pairing Heap: {A} New Form of Self-Adjusting Heap},
	volume = {1},
	year = {1986},
	bdsk-url-1 = {https://doi.org/10.1007/BF01840439}}

@article{ft-fhuin-87,
	author = {Fredman, Michael L. and Tarjan, Robert Endre},
	date-added = {2024-03-15 13:19:24 -0500},
	date-modified = {2025-02-09 17:33:06 -0600},
	doi = {10.1145/28869.28874},
	journal = {J. {ACM}},
	number = {3},
	pages = {596--615},
	title = {{Fibonacci} heaps and their uses in improved network optimization algorithms},
	volume = {34},
	year = {1987},
	bdsk-url-1 = {https://doi.org/10.1145/28869.28874}}

@article{v-dsmpq-78,
	abstract = {A data structure is described which can be used for representing a collection of priority queues. The primitive operations are insertion, deletion, union, update, and search for an item of earliest priority.},
	author = {Vuillemin, Jean},
	date-added = {2024-03-15 13:16:18 -0500},
	date-modified = {2024-03-15 13:17:14 -0500},
	doi = {10.1145/359460.359478},
	journal = {Commun. ACM},
	keywords = {binomial heaps},
	number = {4},
	pages = {309--315},
	title = {A data structure for manipulating priority queues},
	volume = {21},
	year = {1978},
	bdsk-url-1 = {https://doi.org/10.1145/359460.359478}}

@inproceedings{o-atcds-05,
	author = {Okasaki, Chris},
	booktitle = {Proc. 36th {SIGCSE} Tech. Symp. Comput. Sci. Education},
	date-added = {2024-03-15 13:12:41 -0500},
	date-modified = {2024-03-15 13:13:21 -0500},
	doi = {10.1145/1047344.1047407},
	pages = {162--165},
	title = {Alternatives to two classic data structures},
	year = {2005},
	bdsk-url-1 = {https://doi.org/10.1145/1047344.1047407}}

@book{c-llpqb-80,
	author = {Crane*, Clark Allan},
	date-added = {2024-03-15 13:01:15 -0500},
	date-modified = {2024-03-15 13:07:09 -0500},
	publisher = {Garland Pub.},
	series = {Outstanding Dissertations in the Computer Sciences},
	title = {Linear Lists and Priority Queues as Balanced Binary Trees},
	year = {1980}}

@phdthesis{c-llpqb-72,
	author = {Crane*, Clark Allan},
	date-added = {2024-03-15 12:57:50 -0500},
	date-modified = {2024-03-15 13:07:05 -0500},
	note = {Tech. Rep. STAN-CS-72-259},
	school = {Stanford University},
	title = {Linear Lists and Priority Queues as Balanced Binary Trees},
	year = {1972}}

@inproceedings{gssd-chfsh-08,
	abstract = {We present a route planning technique solely based on the concept of node contraction. The nodes are first ordered by `importance'. A hierarchy is then generated by iteratively contracting the least important node. Contracting a node v means replacing shortest paths going through v by shortcuts. We obtain a hierarchical query algorithm using bidirectional shortest-path search. The forward search uses only edges leading to more important nodes and the backward search uses only edges coming from more important nodes. For fastest routes in road networks, the graph remains very sparse throughout the contraction process using rather simple heuristics for ordering the nodes. We have five times lower query times than the best previous hierarchical Dijkstra-based speedup techniques and a negative space overhead, i.e., the data structure for distance computation needs less space than the input graph. CHs can be combined with many other route planning techniques, leading to improved performance for many-to-many routing, transit-node routing, goal-directed routing or mobile and dynamic scenarios.},
	author = {Geisberger, Robert and Sanders, Peter and Schultes, Dominik and Delling, Daniel},
	booktitle = {Proc. 7th Int. Workshop Experimental Algorithmics},
	date-added = {2023-03-08 19:54:06 -0600},
	date-modified = {2023-03-08 19:55:46 -0600},
	doi = {10.1007/978-3-540-68552-4_24},
	number = {5038},
	pages = {319--333},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Contraction Hierarchies: {Faster} and Simpler Hierarchical Routing in Road Networks},
	year = {2008},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-540-68552-4_24}}

@phdthesis{w-dadsd-06,
	author = {Werneck, Renato},
	date-added = {2023-03-08 19:44:17 -0600},
	date-modified = {2023-03-08 19:45:48 -0600},
	month = {April},
	note = {Tech. Rep. TR-750-06},
	school = {Dept. Comput. Sci., Princeton Univ.},
	title = {Design and Analysis of Data Structures for Dynamic Trees},
	url = {https://www.cs.princeton.edu/research/techreps/TR-750-06},
	year = {2006},
	bdsk-url-1 = {https://www.cs.princeton.edu/research/techreps/TR-750-06}}

@article{fw-sitbf-93,
	author = {Fredman, Michael L. and Willard, Dan E.},
	date-added = {2019-11-05 16:57:31 -0600},
	date-modified = {2019-11-05 16:58:11 -0600},
	doi = {10.1016/0022-0000(93)90040-4},
	journal = {J. Comput. Syst. Sci.},
	number = {3},
	pages = {424--436},
	title = {Surpassing the information theoretic bound with fusion trees},
	volume = {48},
	year = {1993},
	bdsk-url-1 = {https://doi.org/10.1016/0022-0000(93)90040-4}}

@inproceedings{bdlrr-drmqf-12,
	author = {Brodal, Gerth St{\o}lting and Davoodi, Pooya and Lewenstein, Moshe and Raman, Rajeev and Rao, Satti Srinivasa},
	booktitle = {Proc. 20th Ann. European Symp. Algorithms},
	date-added = {2016-12-04 13:49:51 +0000},
	date-modified = {2016-12-04 13:51:46 +0000},
	doi = {10.1007/978-3-642-33090-2_20},
	pages = {217--228},
	publisher = {Springer},
	read = {1},
	series = {Lecture Notes Comput. Sci.},
	title = {Two Dimensional Range Minimum Queries and {Fibonacci} Lattices},
	volume = {7501},
	year = {2012},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-33090-2_20}}

@inproceedings{kt-tb2is-98,
	author = {Koutsoupias, Elias and Taylor, David Scot},
	booktitle = {Proc. 17th Ann. ACM Symp. Principles Database Syst.},
	date-added = {2016-12-02 22:57:56 +0000},
	date-modified = {2025-02-09 16:33:56 -0600},
	doi = {10.1145/275487.275494},
	pages = {52--58},
	read = {1},
	title = {Tight bounds for 2-dimensional indexing schemes},
	year = {1998},
	bdsk-url-1 = {https://doi.org/10.1145/275487.275494}}

@inproceedings{cgkms-sbstw-15,
	arxiv = {1503.03105},
	author = {Chalermsook, Parinya and Goswami, Mayank and Kozma, L{\'a}szl{\'o} and Mehlhorn, Kurt and Saranurak, Thatchaphol},
	booktitle = {Proc. 23rd Eur. Symp. Algorithms},
	date-added = {2015-09-09 17:22:14 +0000},
	date-modified = {2015-09-09 17:27:33 +0000},
	title = {Self-Adjusting Binary Search Trees: {What} Makes Them Tick?},
	year = {2015, to appear}}

@incollection{i-pdoc-13,
	arxiv = {1306.0207},
	author = {Iacono, John},
	booktitle = {Space-Efficient Data Structures, Streams, and Algorithms},
	date-added = {2015-09-09 15:56:04 +0000},
	date-modified = {2025-02-09 15:35:03 -0600},
	doi = {doi.org/10.1007/978-3-642-40273-9_16},
	editor = {Brodnik, Andrej and L{\'o}pez-Ortiz, Alejandro and Raman, Venkatesh and Viola, Alfredo},
	number = {8066},
	pages = {236--250},
	publisher = {Springer-Verlag},
	series = {Lecture Notes Comput. Sci.},
	title = {In Pursuit of the Dynamic Optimality Conjecture},
	year = {2013},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-642-40273-9_16}}

@inproceedings{bdl-doslb-08,
	author = {Bose, Prosenjit and Dou{\"\i}eb*, Karim and Langerman, Stefan},
	booktitle = {Proc. 19th Ann. ACM-SIAM Symp. Discrete Algorithms},
	date-added = {2015-09-09 15:50:07 +0000},
	date-modified = {2015-09-09 15:50:52 +0000},
	pages = {1106--1114},
	read = {1},
	title = {Dynamic optimality for skip lists and {B}-trees},
	year = {2008},
	bdsk-url-1 = {http://dl.acm.org/citation.cfm?id=1347082.1347203}}

@article{g-strlp-04,
	author = {Georgakopoulos, George F.},
	date-added = {2015-09-09 15:46:21 +0000},
	date-modified = {2015-09-09 15:47:21 +0000},
	journal = {J. Algorithms},
	number = {1},
	pages = {64--76},
	read = {1},
	title = {Splay Trees: {A} Reweighing Lemma and a Proof of Competitiveness vs. Dynamic Balanced Trees},
	volume = {51},
	year = {2004}}

@article{bck-sodsl-03,
	author = {Blum, Avrim and Chawla*, Shuchi and Kalai*, Adam},
	date-added = {2015-09-09 15:43:01 +0000},
	date-modified = {2015-09-09 15:44:05 +0000},
	journal = {Algorithmica},
	number = {3},
	pages = {249--260},
	read = {1},
	title = {Static Optimality and Dynamic Search-Optimality in Lists and Trees.},
	volume = {36},
	year = {2003}}

@inproceedings{at-twbds-00,
	author = {Andersson, Arne A. and Thorup, Mikkel},
	booktitle = {Proc. 32nd Ann. ACM Symp. Theory Comput.},
	date-added = {2014-07-20 15:25:48 +0000},
	date-modified = {2014-07-20 15:25:48 +0000},
	pages = {335--342},
	title = {Tight(Er) Worst-case Bounds on Dynamic Searching and Priority Queues},
	year = {2000}}

@misc{e-tlmfp-13,
	author = {Eisenstat, David},
	date-added = {2013-11-04 21:11:41 +0000},
	date-modified = {2013-11-04 21:19:06 +0000},
	keywords = {code},
	month = {June},
	title = {Trickle: Linear-time maximum flow in planar graphs with unit capacities},
	url = {http://www.davideisenstat.com/trickle/},
	year = {2013},
	bdsk-url-1 = {http://www.davideisenstat.com/trickle/}}

@misc{e-mmspb-13,
	author = {Eisenstat, David},
	comments = {C implementation of Cabello-Chambers-Erickson},
	date-added = {2013-11-04 21:08:08 +0000},
	date-modified = {2013-11-04 21:19:18 +0000},
	keywords = {code},
	month = {June},
	title = {Mississippi: Multiple-source shortest paths and betweenness centrality in planar graphs},
	url = {http://www.davideisenstat.com/mississippi/},
	year = {2013},
	bdsk-url-1 = {http://www.davideisenstat.com/mississippi/}}

@misc{e-ddtcd-13,
	author = {Eisenstat, David},
	comments = {C++ implementation of link-cut trees},
	date-added = {2013-11-04 21:02:51 +0000},
	date-modified = {2013-11-04 21:19:21 +0000},
	keywords = {code},
	month = {October},
	title = {DTree: {Dynamic} trees {\`a} la carte},
	url = {http://www.davideisenstat.com/dtree/},
	year = {2013},
	bdsk-url-1 = {http://www.davideisenstat.com/dtree/}}

@inproceedings{p-stdsd-08,
	author = {Pettie, Seth},
	booktitle = {Proc. 19th Ann. ACM-SIAM Symp. Discrete Algorithms},
	date-added = {2013-10-11 16:47:48 +0000},
	date-modified = {2013-10-11 16:48:43 +0000},
	pages = {1115--1124},
	title = {Splay trees, {Davenport}-{Schinzel} sequences, and the deque conjecture},
	year = {2008}}

@inproceedings{dhikp-gbst-09,
	author = {Demaine, Erik D. and Harmon*, Dion and Iacono, John and Kane*, Daniel and P{\v a}tra{\c s}cu, Mihai},
	booktitle = {Proc. 20th Ann. ACM-SIAM Symp. Discrete Algorithms},
	comments = {No DOI (thanks, ACM)},
	date-added = {2013-10-11 16:45:43 +0000},
	date-modified = {2025-02-16 15:39:05 -0600},
	pages = {496--505},
	title = {The Geometry of Binary Search Trees},
	url = {https://dl.acm.org/doi/10.5555/1496770.1496825},
	year = {2009},
	bdsk-url-1 = {https://dl.acm.org/doi/10.5555/1496770.1496825}}

@article{g-ctapl-08,
	author = {Georgakopoulos, George F.},
	date-added = {2013-10-11 16:44:09 +0000},
	date-modified = {2025-02-09 16:32:34 -0600},
	journal = {Inf. Process. Lett.},
	number = {1},
	pages = {37--43},
	title = {Chain-splay trees, or, how to achieve and prove {$\log\log N$}-competitiveness by splaying},
	volume = {106},
	year = {2008}}

@article{tw-dtp-09,
	author = {Tarjan, Robert E. and Werneck, Renato F.},
	date-added = {2013-07-05 16:06:48 +0000},
	date-modified = {2023-03-01 10:26:39 -0600},
	doi = {10.1145/1498698.1594231},
	journal = {J. Exper. Algorithmics},
	pages = {5:1--5:21},
	title = {Dynamic Trees in Practice},
	volume = {14},
	year = {2009},
	bdsk-url-1 = {https://doi.org/10.1145/1498698.1594231}}

@article{w-dsorq-85,
	author = {Willard, Dan E.},
	comments = {orthogonal emptiness: O(n log n) space, O(log n) query time, pointer machine},
	date-added = {2013-01-30 00:39:40 +0000},
	date-modified = {2013-01-30 00:43:22 +0000},
	journal = {SIAM J. Comput.},
	number = {1},
	pages = {232--253},
	title = {New data structures for orthogonal range queries},
	volume = {14},
	year = {1985}}

@article{c-fsaqa-86,
	author = {Chazelle, Bernard},
	comments = {orthogonal emptiness: O(n log n / log log n) space, O(log n) query time},
	date-added = {2013-01-30 00:32:07 +0000},
	date-modified = {2013-01-30 00:33:11 +0000},
	journal = {SIAM J. Comput.},
	pages = {703--724},
	title = {Filtering search: a enw approach to query answering},
	volume = {15},
	year = {1986}}

@article{c-fadsm-88,
	author = {Chazelle, Bernard},
	comments = {orthogonal emptiness: O(n) space, O(log n) query time},
	date-added = {2013-01-30 00:18:03 +0000},
	date-modified = {2013-01-30 00:31:07 +0000},
	journal = {SIAM J. Comput.},
	pages = {427--462},
	title = {A functional approach to data structures and its use in multidimensional searching},
	volume = {17},
	year = {1988}}

@inproceedings{clp-orsr-11,
	arxiv = {1103.5510},
	author = {Chan, Timothy M. and Larsen, Kasper Green and P{\u a}tra{\c s}cu, Mihai},
	booktitle = {Proc. 27th Ann. Symp. Comput. Geom.},
	comments = {O(n log log n) space, O(lg lg n) query time [rank space] -or- O(n) space, O(log^eps n) query time},
	date-added = {2013-01-29 23:31:58 +0000},
	date-modified = {2013-01-30 05:33:52 +0000},
	pages = {1--10},
	title = {Orthogonal Range Searching on the {RAM}, revisited},
	year = {2011}}

@article{c-asdi-88,
	author = {Chazelle, Bernard},
	date-added = {2013-01-29 21:55:12 +0000},
	date-modified = {2013-01-29 21:55:12 +0000},
	journal = {Algorithmica},
	pages = {205--221},
	title = {An algorithm for segment-dragging and its implementation},
	volume = {3},
	year = {1988}}

@book{clrs-ia-09,
	author = {Cormen, Thomas H. and Leiseron, Charles E. and Rivest, Ronald L. and Stein, Clifford},
	date-added = {2011-05-24 10:44:23 -0500},
	date-modified = {2011-05-24 10:46:17 -0500},
	edition = {3rd},
	keywords = {textbook},
	publisher = {MIT Press},
	title = {Introduction to Algorithms},
	year = {2009}}

@book{o-ddds-83,
	author = {Overmars*, Mark H.},
	date-added = {2011-01-22 15:07:12 -0600},
	date-modified = {2025-02-01 14:31:12 -0600},
	doi = {10.1007/BFb0014927},
	number = {156},
	publisher = {Springer-Verlag},
	series = {Lecture Notes Comput. Sci.},
	title = {The Design of Dynamic Data Structures},
	year = {1983},
	bdsk-url-1 = {https://doi.org/10.1007/BFb0014927}}

@article{b-mbstu-75,
	author = {Bentley, Jon L.},
	date-added = {2011-01-22 15:05:19 -0600},
	date-modified = {2024-03-15 13:17:04 -0500},
	journal = {Commun. ACM},
	keywords = {kd-tree},
	pages = {509--517},
	title = {Multidimensional binary search trees used for associative searching},
	volume = {18},
	year = {1975}}

@article{av-oemim-03,
	author = {Arge, Lars and Vitter, Jeffrey Scott},
	date-added = {2011-01-22 15:01:16 -0600},
	date-modified = {2011-01-22 15:02:30 -0600},
	journal = {SIAM J. Comput.},
	number = {6},
	pages = {1488--1508},
	title = {Optimal external memory interval management},
	volume = {32},
	year = {2003}}

@article{a-gbt-99,
	author = {Andersson, Arne},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2025-02-09 14:21:15 -0600},
	doi = {10.1006/jagm.1998.0967},
	journal = {J. Algorithms},
	number = {1},
	pages = {1--28},
	title = {General balanced trees},
	volume = {30},
	year = {1999},
	bdsk-url-1 = {https://doi.org/10.1006/jagm.1998.0967}}

@inproceedings{a-iprus-89,
	author = {Andersson*, Arne},
	booktitle = {Proc. Workshop on Algorithms and Data Structures},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2025-02-01 15:21:38 -0600},
	doi = {10.1007/3-540-51542-9_33},
	pages = {393--402},
	publisher = {Springer-Verlag},
	series = {Lecture Notes Comput. Sci.},
	title = {Improving Partial Rebuilding by Using Simple Balance Criteria},
	volume = {382},
	year = {1989},
	bdsk-url-1 = {https://doi.org/10.1007/3-540-51542-9_33}}

@inproceedings{bd-sdus-04,
	author = {B\u{a}diou*, Mihai and Demaine, Erik D.},
	booktitle = {Proc. 6th Latin American Sympos. Theoretical Informatics},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2011-01-22 15:00:16 -0600},
	pages = {466-473},
	publisher = {Springer-Verlag},
	series = {Lecture Notes Comput. Sci.},
	title = {A Simplified and Dynamic Unified Structure},
	volume = {2976},
	year = 2004}

@article{bs-dsp1s-80,
	author = {Bentley, Jon L. and Saxe*, James B.},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2025-02-01 14:30:10 -0600},
	doi = {10.1016/0196-6774(80)90015-2},
	journal = {J. Algorithms},
	number = {4},
	pages = {301--358},
	title = {Decomposable searching problems {I}: {S}tatic-to-dynamic transformation},
	volume = {1},
	year = {1980},
	bdsk-url-1 = {https://doi.org/10.1016/0196-6774(80)90015-2}}

@misc{cd-ads3-05,
	author = {Cohen*, Jeff and Demaine, Erik},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2011-01-22 15:00:16 -0600},
	month = {February 8},
	title = {6.897: Advanced Data Structures {(Spring 2005)}, {Lecture 3}},
	url = {http://theory.csail.mit.edu/classes/6.897/spring05/lec.html},
	year = {2005},
	bdsk-url-1 = {http://theory.csail.mit.edu/classes/6.897/spring05/lec.html}}

@article{cmss-dfcst-00,
	author = {Cole, Richard and Mishra, Bud and Schmidt, Jeanette and Siegel, Alan},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2011-01-22 15:00:16 -0600},
	journal = {SIAM J. Comput.},
	number = 1,
	pages = {1--43},
	title = {On the Dynamic Finger Conjecture for Splay Trees. {Part I}: {Splay} Sorting $\log n$-Block Sequences},
	volume = 30,
	year = 2000}

@article{c-dfcst-00,
	author = {Cole, Richard},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2011-01-22 15:00:16 -0600},
	journal = {SIAM J. Comput.},
	number = 1,
	pages = {44--85},
	title = {On the Dynamic Finger Conjecture for Splay Trees. {Part II}: {The} proof},
	volume = 30,
	year = 2000}

@inproceedings{dhip-doa-04,
	author = {Demaine, Erik D. and Harmon*, Dion and Iacono, John and P\u{a}tra\c{s}cu**, Mihai},
	booktitle = {Proc. 45th Ann. IEEE Symp. Found. Comput. Sci. (FOCS)},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2025-03-20 16:48:49 -0500},
	doi = {10.1109/FOCS.2004.23},
	pages = {484--490},
	title = {Dynamic Optimality---Almost},
	year = {2004},
	bdsk-url-1 = {https://doi.org/10.1109/FOCS.2004.23}}

@techreport{dsw-lbfbs-05,
	author = {Derryberry*, Jonathan and Sleator, Daniel Dominic and Wang*, Chengwen Chris},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2011-01-22 15:00:16 -0600},
	day = 22,
	institution = {Carnegie Mellon Univ.},
	month = nov,
	number = {CMU-CS-05-187},
	title = {A Lower Bound Framework for Binary Search Trees with Rotations},
	url = {http://reports-archive.adm.cs.cmu.edu/anon/2005/CMU-CS-05-187.pdf},
	year = 2005,
	bdsk-url-1 = {http://reports-archive.adm.cs.cmu.edu/anon/2005/CMU-CS-05-187.pdf}}

@inproceedings{gr-st-93,
	author = {Galperin*, Igal and Rivest, Ronald R.},
	booktitle = {Proc. 4th Annu. ACM-SIAM Symp. Discrete Algorithms},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2015-09-09 17:24:42 +0000},
	pages = {165--174},
	title = {Scapegoat trees},
	year = {1993}}

@inproceedings{i-astlw-01,
	author = {Iacono*, John},
	booktitle = {Proc. 12th Annu. ACM-SIAM Symp. Discrete Algorithms},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2015-09-09 17:24:50 +0000},
	pages = {516--522},
	title = {Alternatives to splay trees with {$O(\log n)$} worst-case access times},
	year = {2001}}

@article{ol-wcoid-81,
	author = {Overmars*, Mark H. and van Leeuwen, Jan},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2025-02-09 16:32:30 -0600},
	doi = {10.1016/0020-0190(81)90093-4},
	journal = {Inf. Process. Lett.},
	number = {4},
	pages = {168--173},
	title = {Worst-case optimal insertion and deletion methods for decomposable searching problems},
	volume = {12},
	year = {1981},
	bdsk-url-1 = {https://doi.org/10.1016/0020-0190(81)90093-4}}

@article{st-sabst-85,
	author = {Sleator, Daniel D. and Tarjan, Robert E.},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2025-02-09 15:18:30 -0600},
	doi = {10.1145/3828.3835},
	journal = {J. ACM},
	keywords = {splay trees},
	number = {3},
	pages = {652--686},
	title = {Self-Adjusting Binary Search Trees},
	volume = {32},
	year = {1985},
	bdsk-url-1 = {https://doi.org/10.1145/3828.3835}}

@article{s-dcsa-92,
	author = {Sundar*, Rajamani},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2011-01-22 15:00:16 -0600},
	journal = {Combinatorica},
	number = 1,
	pages = {95--124},
	title = {On the {Deque} conjecture for the splay algorithm},
	volume = 12,
	year = 1992}

@article{t-sastt-85,
	author = {Tarjan, Robert E.},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2011-01-22 15:00:16 -0600},
	journal = {Combinatorica},
	number = 5,
	pages = {367--378},
	title = {Sequential access in splay trees takes linear time},
	volume = 5,
	year = 1985}

@book{t-dsna-83,
	author = {Tarjan, Robert Endre},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2025-01-24 17:51:48 -0600},
	doi = {10.1137/1.9781611970265},
	keywords = {textbook},
	publisher = {SIAM},
	series = {{CBMS-NSF} Regional Conference Series in Applied Mathematics},
	title = {Data Structures and Network Algorithms},
	volume = 44,
	year = {1983},
	bdsk-url-1 = {https://doi.org/10.1137/1.9781611970265}}

@inproceedings{wds-llcdb-06,
	author = {Wang*, Chengwen Chris and Derryberry*, Jonathan and Sleator, Daniel Dominic},
	booktitle = {Proc. 17th Ann. ACM-SIAM Symp. Discrete Algorithms},
	comments = {No DOI; thanks, ACM},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2025-02-09 15:32:37 -0600},
	keywords = {multisplay trees},
	pages = {374--383},
	title = {{$O(\log \log n)$}-competitive dynamic binary search trees},
	url = {https://dl.acm.org/doi/10.5555/1109557.1109600},
	year = {2006},
	bdsk-url-1 = {https://dl.acm.org/doi/10.5555/1109557.1109600}}

@article{w-lbabs-87,
	author = {Wilber*, Robert E.},
	date-added = {2011-01-22 15:00:16 -0600},
	date-modified = {2025-02-01 15:26:41 -0600},
	doi = {10.1137/0218004},
	journal = {SIAM J. Comput.},
	number = 1,
	pages = {56--67},
	title = {Lower Bounds for Accessing Binary Search Trees with Rotations},
	volume = 18,
	year = 1987,
	bdsk-url-1 = {https://doi.org/10.1137/0218004}}

@article{dsst-mdsp-89,
	author = {Driscoll, James R. and Sarnak, Niel and Sleator, Daniel D. and Tarjan, Robert E.},
	date-added = {2010-05-14 08:56:21 -0500},
	date-modified = {2025-03-23 14:51:35 -0500},
	doi = {10.1016/0022-0000(89)90034-2},
	journal = {J. Comput. Syst. Sci.},
	number = {1},
	pages = {86--123},
	title = {Making Data Structures Persistent},
	volume = {38},
	year = {1989},
	bdsk-url-1 = {https://doi.org/10.1016/0022-0000(89)90034-2}}

@article{at-opafn-00,
	author = {Alstrup, Stephen and Thorup, Mikkel},
	date-added = {2010-05-12 16:18:50 -0500},
	date-modified = {2010-05-12 16:19:16 -0500},
	journal = {J. Algorithms},
	number = {2},
	pages = {169--188},
	title = {Optimal Pointer Algorithms for Finding Nearest Common Ancestors in Dynamic Trees},
	volume = {35},
	year = {2000},
	bdsk-url-1 = {http://www.sciencedirect.com/science/article/B6WH3-45FC2S8-X/2/7738e58c4ccf6e12e722c549befbf1df},
	bdsk-url-2 = {http://dx.doi.org/10.1006/jagm.2000.1079}}

@article{ggt-udtns-91,
	author = {Goldberg, Andrew V. and Grigoriadis, Michael D. and Tarjan, Robert E.},
	date-added = {2010-05-11 17:50:14 -0500},
	date-modified = {2010-05-11 17:50:14 -0500},
	journal = {Math. Program.},
	pages = {277--290},
	title = {Use of dynamic trees in a network simplex algorithm for the maximum flow problem},
	volume = {50},
	year = {1991}}

@inproceedings{k-msspp-05,
	author = {Klein, Philip N.},
	booktitle = {Proc. 16th Ann. ACM-SIAM Symp. Discrete Algorithms},
	date-added = {2010-04-25 23:15:29 -0500},
	date-modified = {2010-04-25 23:15:41 -0500},
	pages = {146--155},
	title = {Multiple-source shortest paths in planar graphs},
	year = {2005}}

@inproceedings{a-feim-80,
	author = {Alt, Helmut},
	booktitle = {Proc. 7th Int. Colloq. Automata Lang. Prog. (ICALP)},
	date-added = {2009-07-27 01:25:49 -0500},
	date-modified = {2025-01-30 11:26:23 -0600},
	doi = {10.1007/3-540-10003-2_57},
	number = {85},
	pages = {30--37},
	publisher = {Springer},
	series = {Lecture Notes Comput. Sci.},
	title = {Functions Equivalent to Integer Multiplication},
	year = {1980},
	bdsk-url-1 = {https://doi.org/10.1007/3-540-10003-2_57}}

@article{a-cccaf-88,
	author = {Alt, Helmut},
	date-added = {2009-07-27 01:21:07 -0500},
	date-modified = {2009-07-27 01:21:37 -0500},
	journal = {J. Assoc. Comput. Mach.},
	number = {2},
	pages = {447--460},
	title = {Comparing the combinational complexities of arithmetic functions},
	volume = {35},
	year = {1988},
	bdsk-url-1 = {http://doi.acm.org.proxy2.library.uiuc.edu/10.1145/42282.214084}}

@article{ss-smgz-71,
	author = {Sch{\"o}nhage, Arnold and Strassen, Volker},
	date-added = {2009-07-27 01:18:16 -0500},
	date-modified = {2009-07-27 01:19:30 -0500},
	journal = {Computing},
	pages = {281--292},
	title = {Schnelle {Multiplikation} gro{\ss}er {Zahlen}},
	volume = {7},
	year = {1971}}

@inproceedings{abhvw-dsaad-04,
	author = {Acar, Umut A. and Blelloch, Guy E. and Harper, Robert and Vittes, Jorge L. and Woo, Shan Leung Maverick},
	booktitle = {Proc. 15th Ann. ACM-SIAM Symp. Discrete Algorithms},
	date-added = {2009-07-06 05:53:45 -0500},
	date-modified = {2009-07-06 05:54:48 -0500},
	pages = {531--540},
	title = {Dynamizing static algorithms, with applications to dynamic trees and history independence},
	year = {2004}}

@article{hk-rfdga-99,
	author = {Henzinger, Monika R. and King, Valerie},
	date-added = {2008-12-10 02:44:28 -0600},
	date-modified = {2025-02-16 15:57:35 -0600},
	doi = {10.1145/320211.32021},
	journal = {J. ACM},
	number = {4},
	pages = {502--516},
	title = {Randomized fully dynamic graph algorithms with polylogarithmic time per operation},
	volume = {46},
	year = {1999},
	bdsk-url-1 = {https://doi.org/10.1145/320211.32021}}

@inproceedings{tw-satt-05,
	author = {Tarjan, Robert E. and Werneck, Renato F.},
	booktitle = {Proc. 16th Ann. ACM-SIAM Symp. Discrete Algorithms},
	comments = {No DOI --- https://dl.acm.org/doi/10.5555/1070432.1070547},
	date-added = {2008-12-10 02:41:39 -0600},
	date-modified = {2025-02-24 22:53:40 -0600},
	pages = {813--822},
	title = {Self-adjusting top trees},
	url = {https://dl.acm.org/doi/10.5555/1070432.1070547},
	year = {2005},
	bdsk-url-1 = {https://dl.acm.org/doi/10.5555/1070432.1070547}}

@article{ahlt-mifdt-05,
	author = {Alstrup, Stephen and Holm, Jacob and {De Lichtenberg}, Kristian and Thorup, Mikkel},
	date-added = {2008-12-10 02:38:56 -0600},
	date-modified = {2008-12-10 02:41:20 -0600},
	journal = {ACM Trans. Algorithms},
	number = {2},
	pages = {243--264},
	title = {Maintaining information in fully dynamic trees with top trees},
	volume = {1},
	year = {2005}}

@article{bgh-dsmd-99,
	author = {Basch, Julian and Guibas, Leonidas J. and Hershberger, John},
	date-added = {2008-12-09 18:07:00 -0600},
	date-modified = {2008-12-09 18:08:06 -0600},
	journal = {J. Algorithms},
	number = {1},
	pages = {1--28},
	title = {Data Structures for Mobile Data},
	volume = {31},
	year = {1999}}

@article{ht-fafnc-84,
	author = {Harel, Dov and Tarjan, Robert Endre},
	date-added = {2008-11-24 13:38:33 -0600},
	date-modified = {2008-11-24 13:38:33 -0600},
	journal = {SIAM J. Comput.},
	number = 2,
	pages = {338--355},
	title = {Fast algorithms for finding nearest common ancestors},
	volume = 13,
	year = 1984}

@article{st-dsdt-83,
	author = {Sleator, Daniel D. and Tarjan, Robert Endre},
	date-added = {2008-11-24 13:37:37 -0600},
	date-modified = {2025-02-16 16:06:14 -0600},
	doi = {10.1016/0022-0000(83)90006-5},
	journal = {J. Comput. Syst. Sci.},
	number = {3},
	pages = {362--391},
	title = {A data structure for dynamic trees},
	volume = {26},
	year = {1983},
	bdsk-url-1 = {https://doi.org/10.1016/0022-0000(83)90006-5}}
