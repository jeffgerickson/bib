%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Jeff Erickson at 2023-02-28 22:18:28 -0600 


%% Saved with string encoding Unicode (UTF-8) 



@misc{p-pc-23,
	author = {Poulsen, Seth},
	date-added = {2023-02-28 20:19:20 -0600},
	date-modified = {2023-02-28 22:18:28 -0600},
	month = {February},
	title = {Personal communication},
	year = {2023}}

@article{gghhklz-iidci-08,
	abstract = {A Delphi process is a structured multi-step process that uses a group of experts to achieve a consensus opinion. We present the results of three Delphi processes to identify topics that are important and difficult in each of three introductory computing subjects: discrete math, programming fundamentals, and logic design. The topic rankings can be used to guide both the coverage of standardized tests of student learning (i.e., concept inventories) and can be used by instructors to identify what topics merit emphasis.},
	author = {Goldman, Ken and Gross, Paul and Heeren, Cinda and Herman, Geoffrey and Kaczmarczyk, Lisa and Loui, Michael C. and Zilles, Craig},
	date-added = {2023-02-28 19:36:47 -0600},
	date-modified = {2023-02-28 20:11:40 -0600},
	doi = {10.1145/1352322.1352226},
	journal = {{ACM} {SIGCSE} Bulletin},
	keywords = {delphi, discrete math, curriculum, logic design, programming fundamentals, concept inventory},
	number = {1},
	pages = {256--260},
	title = {Identifying Important and Difficult Concepts in Introductory Computing Courses Using a {Delphi} Process},
	volume = {40},
	year = {2008},
	bdsk-url-1 = {https://doi.org/10.1145/1352322.1352226}}

@book{c-cteef-23,
	author = {{National Student Clearinghouse Research Center}},
	date-added = {2023-02-27 20:24:39 -0600},
	date-modified = {2023-02-28 01:08:47 -0600},
	month = {February 2,},
	title = {Current Term Enrollment Estimates: Fall 2022 Expanded Edition},
	url = {https://nscresearchcenter.org/current-term-enrollment-estimates/},
	year = {2023},
	bdsk-url-1 = {https://nscresearchcenter.org/current-term-enrollment-estimates/}}

@book{c-gcsue-17,
	author = {{Computing Research Association}},
	date-added = {2023-02-27 20:10:50 -0600},
	date-modified = {2023-02-27 20:24:39 -0600},
	title = {Generation CS: Computer Science Undergraduate Enrollments Surge Since 2006},
	url = {https://cra.org/data/Generation-CS/},
	year = {2017},
	bdsk-url-1 = {https://cra.org/data/Generation-CS/}}

@book{n-argcs-18,
	address = {Washington, DC},
	author = {{National Academies of Sciences, Engineering, and Medicine}},
	date-added = {2023-02-27 19:58:15 -0600},
	date-modified = {2023-02-27 19:59:03 -0600},
	doi = {https://doi.org/10.17226/24926},
	publisher = {National Academies Press},
	title = {Assessing and Responding to the Growth of Computer Science Undergraduate Enrollments},
	year = {2018},
	bdsk-url-1 = {https://doi.org/10.17226/24926}}

@book{cm-esipg-16,
	author = {Clark, Ruth C. and Meyer, Richard E.},
	comments = {spiffy mass-marketed book for mass-marketers},
	date-added = {2023-02-27 18:28:28 -0600},
	date-modified = {2023-02-27 18:31:55 -0600},
	edition = {4th},
	publisher = {Wiley},
	title = {e-Learning and the Science of Instruction: Proven Guidelines for Consumers and Designers of Multimedia Learning},
	year = {2016}}

@article{f-fbpip-03,
	abstract = {Problem Solving has long been advocated as a skill necessary for developing and writing programs. Few problem-solving skills are included in introductory textbooks and when they are included, they usually assume a certain level of capability on the part of the student to understand the problem. Students have a difficult time handling problems presented in a narrative fashion; story problems. This work presents a method that begins the problem solving task by first analyzing the story with the intent of identifying the problem buried in the narrative format. This method separates facts necessary for the problem from the facts included to make the story interesting and believable. Evaluating these facts enables the student to identify the problem before commencing with problem solving.},
	author = {Eastman, E. Grant},
	date-added = {2023-02-27 18:26:58 -0600},
	date-modified = {2023-02-27 18:27:14 -0600},
	journal = {J. Comput. Sci. Coll.},
	number = {2},
	pages = {18--29},
	title = {Fact-Based Problem Identification Precedes Problem Solving},
	volume = {19},
	year = {2003}}

@article{dab-cfabp-12,
	abstract = {Improving the novice's experience with learning to program has been an important research topic for some time. Appropriate programming environments for novices have been one research area. For example, many departments have adopted visual environments to teach programming as opposed to a command line environment at the beginning stages of a CS curriculum.Standard command line environments tend to possess less assistive features for programming than visual environments. In contrast, highly assistive visual environments could constrict a novice to learn a fixed set of foundational programming skills that exclude exposure to syntax checking, compilation and file systems. Therefore, novices may need to move to a less assistive environment to round out their skill set.A study was conducted in a CS1-laboratory class by examining three Python programming environments with varying levels of feature assistance (IDLE, PyScripter and Notepad). This study showed that students struggled with using a low assistive environment regardless of their prior experience and confidence with programming. Students were able to use moderately assistive environments more effectively.},
	author = {Dillon, Edward and Anderson, Monica and Brown, Marcus},
	date-added = {2023-02-27 18:24:08 -0600},
	date-modified = {2023-02-27 18:24:28 -0600},
	issn = {1937-4771},
	journal = {J. Comput. Sci. Coll.},
	number = {5},
	pages = {69--77},
	title = {Comparing Feature Assistance between Programming Environments and Their "Effect" on Novice Programmers},
	volume = {27},
	year = {2012}}

@article{heees-ritlr-18,
	abstract = {Recursion is one of the most important and hardest topics in lower division computer science courses. As it is an advanced programming skill, the best way to learn it is through targeted practice exercises. But the best practice problems are time consuming to manually grade by an instructor. As a consequence, students historically have completed only a small number of recursion programming exercises as part of their coursework. We present a new way for teaching such programming skills. Students view examples and visualizations, then practice a wide variety of automatically assessed, small-scale programming exercises that address the sub-skills required to learn recursion. The basic recursion tutorial (RecurTutor) teaches material typically encountered in CS2 courses. Students who used RecurTutor had significantly better grades on recursion exam questions than did students who used typical instruction. Students who experienced RecurTutor spent significantly more time on solving recursive programming exercises than students who experienced typical instruction, and came out with a significantly higher confidence level.},
	author = {Hamouda, Sally and Edwards, Stephen H. and Elmongui, Hicham G. and Ernst, Jeremy V. and Shaffer, Clifford A.},
	date-added = {2023-02-27 18:19:25 -0600},
	date-modified = {2023-02-27 18:20:08 -0600},
	doi = {10.1145/3218328},
	journal = {ACM Trans. Comput. Educ.},
	keywords = {interactive online tutorial, misconceptions, Recursion, eTextbook},
	number = {1},
	pages = {1:1--1:25},
	title = {{RecurTutor}: {An} Interactive Tutorial for Learning Recursion},
	volume = {19},
	year = {2018},
	bdsk-url-1 = {https://doi.org/10.1145/3218328}}

@article{c-rrrac-19,
	abstract = {Traditional pedagogical approaches towards recursion leave much to be desired. This paper presents a retrospective analysis of a three-year continuous improvement cycle conducted in a Data Structures course, where recursion was one of the major course learning outcomes (CLOs) needing dramatic improvement. While less than one-quarter of the students were achieving the recursion CLO at the outset of the cycle, the proposed pedagogical changes resulted in over eighty percent achieving the CLO during the final two semesters. An empirical analysis of over one thousand undergraduates during the course of the study demonstrates the efficacy of these very easy and practical changes.},
	author = {Cazalas, Jonathan M.},
	comments = {"Quality practice problems require significant time to grade."},
	date-added = {2023-02-27 18:14:27 -0600},
	date-modified = {2023-02-27 18:19:00 -0600},
	journal = {J. Comput. Sci. Coll.},
	number = {3},
	pages = {134--142},
	title = {Recursion Refined: {Results} from an {ABET} Continuous Improvement Cycle},
	volume = {35},
	year = {2019}}

@inproceedings{sr-citgp-20,
	abstract = {It is essential that students learn to write code that is not only correct, but also efficient. To that end, algorithmic complexity analysis techniques, such as Big-O analysis, are typically an important part of courses on algorithm design. However, students often hold fundamental misconceptions about how Big-O analysis works. This paper presents Compigorithm, an interactive tool for helping students practice Big-O analysis. Compigorithm scaffolds student learning by breaking down the analysis process into five concrete steps and walking students through each of these steps. When students make mistakes, they are provided with automated hints and allowed to re-attempt until they get the correct answer. Compigorithm was piloted in an introductory algorithms course and evaluated using a controlled experiment. The experimental group trained by analyzing algorithms using Compigorithm, while the control group analyzed the same algorithms by hand. On the subsequent post-test, the experimental group outperformed the control group by a significant margin (p &lt; 0.00001; Cohen's d = 0.84).},
	author = {Smith, Rebecca and Rixner, Scott},
	booktitle = {Proc. 51st. ACM Conference on Innovation and Technology in Computer Science Education (SIGCSE)},
	date-added = {2023-02-27 18:11:42 -0600},
	date-modified = {2023-02-27 18:12:25 -0600},
	doi = {10.1145/3341525.3387390},
	keywords = {interactive learning, educational tools, algorithmic complexity},
	pages = {363--369},
	title = {Compigorithm: {An} Interactive Tool for Guided Practice of Complexity Analysis},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.1145/3341525.3387390}}

@inproceedings{fkss-eeaav-17,
	abstract = {Algorithm Visualizations (AVs) have been used for years as an interactive method to convey data structures and algorithms concepts. However, AVs have traditionally focused on illustrating the mechanics of how an algorithm works. We have developed visualizations that we name Algorithm Analysis Visualizations (AAVs), that focus on conveying algorithm analysis concepts. We present our findings from an initial evaluation study of the effectiveness of AAVs when applied to a semester long Data Structures course. AAVs were evaluated in terms of student engagement, student satisfaction, and student performance. Results indicate that the intervention group students spent significantly more time with the AAVs than did the control group students who used primarily textual content. Students gave positive feedback regarding the usefulness of the AAVs in illustrating algorithm analysis concepts. Students from the intervention group had better performance on the algorithm analysis part of the final exam than did control group students.},
	author = {Farghally, Mohammed F. and Koh, Kyu Han and Shahin, Hossameldin and Shaffer, Clifford A.},
	booktitle = {Proc. 48th ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-27 18:08:00 -0600},
	date-modified = {2023-02-27 18:08:45 -0600},
	doi = {10.1145/3017680.3017698},
	keywords = {performance evaluation, algorithm analysis visualizations, log data analysis},
	pages = {201--206},
	title = {Evaluating the Effectiveness of Algorithm Analysis Visualizations},
	year = {2017},
	bdsk-url-1 = {https://doi.org/10.1145/3017680.3017698}}

@article{k-bobob-76,
	author = {Knuth, Donald E.},
	date-added = {2023-02-26 22:27:22 -0600},
	date-modified = {2023-02-26 22:27:41 -0600},
	doi = {10.1145/1008328.1008329},
	journal = {SIGACT News},
	number = {2},
	pages = {18--24},
	title = {Big Omicron and Big Omega and Big Theta},
	volume = {8},
	year = {1976},
	bdsk-url-1 = {https://doi.org/10.1145/1008328.1008329}}

@article{mspck22-sscp-17,
	abstract = {
                SymPy is an open source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provide additional examples and further outline details of the architecture and features of SymPy.
             },
	author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and \v{C}ert\'{i}k, Ond\v{r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, AMiT and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou\v{c}ka, \v{S}t\v{e}p\'{a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},
	date-added = {2023-02-26 22:05:17 -0600},
	date-modified = {2023-02-28 01:09:50 -0600},
	doi = {10.7717/peerj-cs.103},
	journal = {PeerJ Computer Science},
	keywords = {Python, Computer algebra system, Symbolics},
	pages = {e103},
	title = {{SymPy:} {Symbolic} computing in {Python}},
	volume = {3},
	year = {2017},
	bdsk-url-1 = {https://doi.org/10.7717/peerj-cs.103}}

@inproceedings{yw-dadsa-18,
	abstract = {Explanations of data structures and algorithms are complex interactions of several notations, including natural language, mathematics, pseudocode, and diagrams. Currently, such explanations are created ad hoc using a variety of tools and the resulting artifacts are static, reducing explanatory value. We envision a domain-specific language for developing rich, interactive explanations of data structures and algorithms. In this paper, we analyze this domain to sketch requirements for our language. We perform a grounded theory analysis to generate a qualitative coding system for explanation artifacts collected online. This coding system implies a common structure among explanations of algorithms and data structures. We believe this structure can be reused as the semantic basis of a domain-specific language for creating interactive explanation artifacts. This work is part of our effort to develop the paradigm of explanation-oriented programming, which shifts the focus of programming from computing results to producing rich explanations of how those results were computed.},
	author = {Young, Jeffrey and Walkingshaw, Eric},
	booktitle = {Proc. 49th ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-26 21:51:23 -0600},
	date-modified = {2023-02-26 21:51:53 -0600},
	doi = {10.1145/3159450.3159477},
	keywords = {domain specific language, grounded theory, explanation-oriented programming},
	pages = {870--875},
	title = {A Domain Analysis of Data Structure and Algorithm Explanations in the Wild},
	year = {2018},
	bdsk-url-1 = {https://doi.org/10.1145/3159450.3159477}}

@inproceedings{fhlmw-salii-16,
	abstract = {Traditionally, theoretical foundations in data structures and algorithms (DSA) courses have been covered through lectures followed by tutorials, where students practise their understanding on pen-and-paper tasks. In this paper, we present findings from a pilot study on using the interactive e-book OpenDSA as the main material in a DSA course. The goal was to redesign an already existing course by building on active learning and continuous examination through the use of OpenDSA. In addition to presenting the study setting, we describe findings from four data sources: final exam, OpenDSA log data, pre and post questionnaires as well as an observation study. The results indicate that students performed better on the exam than during previous years. Students preferred OpenDSA over traditional textbooks and worked actively with the material, although a large proportion of them put off the work until the due date approaches.},
	author = {F\"{a}rnqvist, Tommy and Heintz, Fredrik and Lambrix, Patrick and Mannila, Linda and Wang, Chunyan},
	booktitle = {Proc. 47th ACM Technical Symposium on Computing Science Education (SIGCSE)},
	date-added = {2023-02-26 21:44:08 -0600},
	date-modified = {2023-02-26 21:44:41 -0600},
	doi = {10.1145/2839509.2844653},
	pages = {663--668},
	title = {Supporting Active Learning by Introducing an Interactive Teaching Tool in a Data Structures and Algorithms Course},
	year = {2016},
	bdsk-url-1 = {https://doi.org/10.1145/2839509.2844653}}

@article{a-rpcda-06,
	abstract = {This paper discusses the role of proofs in a course on design and analysis of algorithms. It argues that correctness proofs should always be considered as an integral part of algorithmic solutions, which should otherwise be considered as incomplete. Proofs and proof strategies should be emphasized in such a course, and active proof production should be required of students. Such an emphasis can improve mathematical as well as algorithmic skills, and can demonstrate the important and unique role of mathematics within computer science.},
	author = {Armoni, Michal},
	date-added = {2023-02-26 21:31:51 -0600},
	date-modified = {2023-02-26 21:32:27 -0600},
	doi = {10.1145/1189136.1189165},
	journal = {{ACM} {SIGCSE} Bulletin},
	keywords = {proof, algorithms, correctness},
	number = {4},
	pages = {39--42},
	title = {On the Role of Proofs in a Course on Design and Analysis of Algorithms},
	volume = {38},
	year = {2006},
	bdsk-url-1 = {https://doi.org/10.1145/1189136.1189165}}

@inproceedings{c-tbudp-14,
	abstract = {Dynamic programming is a standard "trick" for improving the running time of an algorithm by remembering intermediate results; whence its inclusion in most intermediate algorithms courses.Standard textbook presentations of dynamic programming appear to suggest that it is the conversion of a recursive algorithm into an iterative calculation that fills a C-style array with results of sub-problems. Frequently the resulting code completely obscures the original recursive relation. Students are left with the impression that there is some virtue in avoiding recursion, that dynamic programming relates to problems with integral domains, and that dynamic programming is quite complicated.We argue that it is time to change the presentation of dynamic programming to undergraduates. In particular, modern languages have data-structure libraries whose use removes some of the burdens of converting a recursive algorithm to a dynamic programming approach. We present a recursive memoization approach to mechanically converting recursive algorithms into dynamic programming algorithms, which we claim is simultaneously easier and more flexible than the standard textbook presentation.},
	author = {Casperson, David},
	booktitle = {Proc. Western Canadian Conference on Computing Education},
	date-added = {2023-02-26 21:18:29 -0600},
	date-modified = {2023-02-26 21:19:21 -0600},
	doi = {10.1145/2597959.2597968},
	keywords = {Recursive memoization, heresy},
	pages = {3:1--3:5},
	title = {Towards a Better Presentation of Dynamic Programming},
	year = {2014},
	bdsk-url-1 = {https://doi.org/10.1145/2597959.2597968}}

@inproceedings{a-dwtra-99,
	abstract = {Algorithms have come to be recognized as the cornerstone of computing. Surprisingly, there has been little research or discussion of general techniques for designing algorithms. Though several such techniques have been identified, there are serious shortcomings in the existing taxonomy. The paper points out these shortcomings, reevaluates some of the techniques, and proposes a new, hierarchical classification scheme by grouping techniques according to their level of generality. A variety of examples from different areas of computing are used to demonstrate the power and flexibility of the taxonomy being proposed.},
	author = {Levitin, Anany},
	booktitle = {Proc. 30th ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-26 21:03:01 -0600},
	date-modified = {2023-02-26 21:04:08 -0600},
	doi = {10.1145/299649.299747},
	pages = {179--183},
	title = {Do We Teach the Right Algorithm Design Techniques?},
	year = {1999},
	bdsk-url-1 = {https://doi.org/10.1145/299649.299747}}

@inproceedings{l-daar-00,
	abstract = {The paper elucidates two views (models) of algorithmic problem solving. The first one is static; it is based on the identification of several principal dimensions of algorithmic problem solving. The second one is dynamic, i.e., it catalogs main steps in the process of solving a problem with a computer. The models are used to identify several important issues in teaching design and analysis of algorithms and to suggest ways of rectifying the shortcomings identified.},
	author = {Levitin, Anany},
	booktitle = {Proc. 31st ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-26 21:00:32 -0600},
	date-modified = {2023-02-26 21:03:40 -0600},
	doi = {10.1145/330908.331802},
	pages = {16--20},
	title = {Design and Analysis of Algorithms Reconsidered},
	year = {2000},
	bdsk-url-1 = {https://doi.org/10.1145/330908.331802}}

@article{amr-terl-10,
	arxiv = {0907.5058},
	author = {Almeida, Marco and Moreira, Nelma and Reis, Rog{\'{e}}rio},
	date-added = {2023-02-26 14:54:04 -0600},
	date-modified = {2023-02-26 14:54:23 -0600},
	doi = {10.25596/jalc-2010-007},
	journal = {Journal of Automata, Languages and Combinatorics},
	number = {1--2},
	pages = {7--25},
	title = {Testing the Equivalence of Regular Languages},
	volume = {15},
	year = {2010},
	bdsk-url-1 = {https://doi.org/10.25596/jalc-2010-007}}

@inproceedings{kk-dpacc-12,
	abstract = {Dynamic programming is one of the important algorithmic techniques often not appropriately covered in the core undergraduate CS courses, and there is no sufficient emphasize on application of advanced techniques to practical problems. As a result, students are not becoming fully familiar with this extremely important concept. We present our experience in integrating dynamic programming algorithmic technique in various core and elective undergraduate computer science courses, such as introductory programming, cryptography and bioinformatics. Examples are based on the real world scenarios and motivate students to learn in order to solve practical problems. The reported work was partially funded by the National Science Foundation, NSF CPATH award #0939120 and NSF I3 award #0930242},
	author = {Kortsarts, Yana and Kolchenko, Vasily},
	booktitle = {Proc. 43rd ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-26 14:39:44 -0600},
	date-modified = {2023-02-26 14:40:18 -0600},
	doi = {10.1145/2157136.2157392},
	pages = {671},
	title = {Dynamic Programming across the {CS} Curriculum (Abstract Only)},
	year = {2012},
	bdsk-url-1 = {https://doi.org/10.1145/2157136.2157392}}

@inproceedings{zrzz-smdp-18,
	abstract = {Dynamic Programming (DP) is considered to be one of the most difficult topics for students to understand in theoretical CS. Prior work suggests that misconceptions arise even when students have completed a course in which there is considerable focus on learning how to solve DP problems. We conducted think-aloud interviews with students who have completed the DP portion of the Algorithms course at a top North American research university. We report on three themes and their misconceptions discovered through this process. The first theme delves into students' struggles defining the notion of a subproblem and identifying particular subproblems. The second theme focuses on the understanding and usage of DP solution techniques compared to other algorithmic approaches. The third theme is composed of misconceptions related to defining and using recurrences. Analysis of each misconception provides insight into student thinking and offers ideas for improving the education of DP to university students.},
	author = {Zehra, Shamama and Ramanathan, Aishwarya and Zhang, Larry Yueli and Zingaro, Daniel},
	booktitle = {Proc. 49th ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-26 13:13:07 -0600},
	date-modified = {2023-02-26 13:13:43 -0600},
	doi = {10.1145/3159450.3159528},
	keywords = {dynamic programming, algorithms, misconceptions},
	pages = {556--561},
	title = {Student Misconceptions of Dynamic Programming},
	year = {2018},
	bdsk-url-1 = {https://doi.org/10.1145/3159450.3159528}}

@inproceedings{v-smoa-19,
	abstract = {There are ongoing efforts to identify students' misconceptions of computing topics, including algorithms. The paper addresses students' misconceptions of optimization problems and their corresponding algorithms. Optimization problems are an important class of problems in computer science, thus their associated misconceptions may form a relevant subset of misconceptions on algorithms. The findings presented are based on a number of evaluations conducted in past years. Assignment reports elaborated by students were used as primary materials for qualitative analysis. We present 8 misunderstandings, structured into 5 general themes. As it could be expected, some themes refer to optimization algorithms or to specific algorithm design techniques, but we also identified misconceptions of two more general themes, namely basic concepts of optimization, and basic concepts of problems and algorithms. We discuss implications of the findings for algorithm instruction and curricula.},
	author = {Vel\'{a}zquez-Iturbide, J. \'{A}ngel},
	booktitle = {Proc. 24th ACM Conference on Innovation and Technology in Computer Science Education (ITiCSE)},
	date-added = {2023-02-26 13:10:07 -0600},
	date-modified = {2023-02-26 13:12:34 -0600},
	doi = {10.1145/3304221.3319749},
	pages = {464--470},
	title = {Students' Misconceptions of Optimization Algorithms},
	year = {2019},
	bdsk-url-1 = {https://doi.org/10.1145/3304221.3319749}}

@inproceedings{dvhkm3-utacs-17,
	author = {Danielsiek, Holger and Vahrenhold, Jan and Hubwieser, Peter and Krugel, Johannes and Magenheim, Johannes and Ohrndorf, Laura and Ossenschmidt, Daniel and Schaper, Niclas},
	booktitle = {Proc. 8th IEEE Global Engineering Education Conference (EDUCON)},
	date-added = {2023-02-26 13:06:39 -0600},
	date-modified = {2023-02-26 13:08:01 -0600},
	doi = {10.1109/EDUCON.2017.7942927},
	pages = {718-725},
	title = {Undergraduate teaching assistants in computer science: Teaching-related beliefs, tasks, and competences},
	year = {2017},
	bdsk-url-1 = {https://doi.org/10.1109/EDUCON.2017.7942927}}

@article{pgk-esuca-05,
	abstract = {How do we know if our students are beginning to think like computer scientists? In this study we have defined four levels of abstraction in the thinking of computer science students about the concept of algorithm. We constructed a list of questions about algorithms to measure the answering level as an indication for the thinking level. This list was presented to various groups of Bachelor Computer Science students. The mean answering level increased between successive year groups as well as within year groups during the year, mainly from the second to the third level. Little relation was found between answering levels and test results on algorithm oriented courses. The study was inspired by the tradition of mathematics education research.},
	author = {Perrenet, Jacob and Groote, Jan Friso and Kaasenbrood, Eric},
	date-added = {2023-02-26 13:03:53 -0600},
	date-modified = {2023-02-26 13:04:38 -0600},
	doi = {10.1145/1067445.1067467},
	journal = {{ACM} {SIGCSE} Bulletin},
	number = {3},
	pages = {64--68},
	title = {Exploring Students' Understanding of the Concept of Algorithm: {Levels} of Abstraction},
	volume = {37},
	year = {2005},
	bdsk-url-1 = {https://doi.org/10.1145/1067445.1067467}}

@article{g-adoap-22,
	author = {Ginat, David},
	date-added = {2023-02-26 13:00:37 -0600},
	date-modified = {2023-02-26 13:00:57 -0600},
	doi = {10.15388/infedu.2021.25},
	journal = {Informatics in Education},
	number = {4},
	pages = {567--582},
	title = {Abstraction, Declarative Observations and Algorithmic Problem Solving},
	volume = {20},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.15388/infedu.2021.25}}

@article{pk-lasuc-06,
	abstract = {In a former, mainly quantitative, study we defined four levels of abstraction in Computer Science students' thinking about the concept of algorithm. We constructed a list of questions about algorithms to measure the answering level as an indication for the thinking level. The answering level generally increased between successive year groups of Bachelor students as well as within year groups during the year, mainly from the second to the third level. The reliability of the instrument appeared to be good, but the validity remained unclear. In this current study, more qualitative methods are used to investigate the validity; the results indicate that the validity is good too. The study uses a theoretical perspective from Mathematics Education research and points at the fruitfulness of combining quantitative methods with qualitative methods.},
	author = {Perrenet, Jacob and Kaasenbrood, Eric},
	date-added = {2023-02-26 12:52:48 -0600},
	date-modified = {2023-02-26 12:57:02 -0600},
	doi = {10.1145/1140124.1140196},
	journal = {{ACM} {SIGCSE} Bulletin},
	number = {3},
	pages = {270--274},
	title = {Levels of Abstraction in Students' Understanding of the Concept of Algorithm: The Qualitative Perspective},
	volume = {38},
	year = {2006},
	bdsk-url-1 = {https://doi.org/10.1145/1140124.1140196}}

@inproceedings{gb-mlaap-17,
	abstract = {The notion of abstraction repeatedly appears, in various ways, at all levels of computer science. It involves the aspects of leaving out details and comprehending concepts and mechanisms. It also involves the aspect of recognizing relationships between task elements. The latter aspect was not yet studied with respect to abstraction levels and algorithm design. We study it here. We analyze senior students' algorithmic solutions according to accepted interpretations of multiple abstraction levels, and offer guidelines for enhancing abstraction in students' algorithmics.},
	author = {Ginat, David and Blau, Yoav},
	booktitle = {Proc. 48th ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-26 12:42:36 -0600},
	date-modified = {2023-02-26 12:44:45 -0600},
	doi = {10.1145/3017680.3017801},
	pages = {237---242},
	title = {Multiple Levels of Abstraction in Algorithmic Problem Solving},
	year = {2017},
	bdsk-url-1 = {https://doi.org/10.1145/3017680.3017801}}

@inproceedings{dtv-iasia-17,
	abstract = {We report on the development and validation of an instrument to assess self-efficacy in an introductory algorithms course. The instrument was designed based upon previous work by Ramalingam and Wiedenbeck and evaluated in a multi-institutional setup. We performed statistical evaluations of the scores obtained using this instrument and compared our findings with validated psychometric measures. These analyses show our findings to be consistent with self-efficacy theory and thus suggest construct validity.},
	author = {Danielsiek, Holger and Toma, Laura and Vahrenhold, Jan},
	booktitle = {Proc. 13th ACM Conference on International Computing Education Research (ICER)},
	date-added = {2023-02-26 12:34:54 -0600},
	date-modified = {2023-02-26 12:36:07 -0600},
	doi = {10.1145/3105726.3106171},
	pages = {217--225},
	title = {An Instrument to Assess Self-Efficacy in Introductory Algorithms Courses},
	year = {2017},
	bdsk-url-1 = {https://doi.org/10.1145/3105726.3106171}}

@inproceedings{dpv-dusmr-12,
	abstract = {We describe the first results of our work towards a concept inventory for Algorithms and Data Structures. Based on expert interviews and the analysis of 400 exams we were able to identify several core topics which are prone to error. In a pilot study, we verified misconceptions known from the literature and identified previously unknown misconceptions related to Algorithms and Data Structures. In addition to this, we report on methodological issues and point out the importance of a two-pronged approach to data collection.},
	author = {Danielsiek, Holger and Paul, Wolfgang and Vahrenhold, Jan},
	booktitle = {Proc. 43rd ACM Technical Symposium on Computer Science Education (SIGSCE)},
	date-added = {2023-02-26 12:31:33 -0600},
	date-modified = {2023-02-26 12:32:15 -0600},
	doi = {10.1145/2157136.2157148},
	keywords = {concept inventories, misconceptions, CS1/2},
	pages = {21--26},
	title = {Detecting and Understanding Students' Misconceptions Related to Algorithms and Data Structures},
	year = {2012},
	bdsk-url-1 = {https://doi.org/10.1145/2157136.2157148}}

@inproceedings{pv-hhlid-13,
	abstract = {We present the result of assessing first-year students' misconceptions related to algorithms and data structures. Our study confirms findings from previous small-scale studies but additionally broadens the scope of the topics and methods investigated. The evaluation of our experiments sheds light on dependencies between active and passive knowledge as well as on the instruments used; in particular, we conclude that there is no "one size fits all" instrument but that instruments should be selected depending on the topic at hand.},
	author = {Paul, Wolfgang and Vahrenhold, Jan},
	booktitle = {Proc. 44th ACM Technical Symposium on Computer Science Education (SIGSCE)},
	date-added = {2023-02-26 12:24:58 -0600},
	date-modified = {2023-02-26 12:26:33 -0600},
	doi = {10.1145/2445196.2445212},
	pages = {29--34},
	title = {Hunting High and Low: {Instruments} to Detect Misconceptions Related to Algorithms and Data Structures},
	year = {2013},
	bdsk-url-1 = {https://doi.org/10.1145/2445196.2445212}}

@inproceedings{ztpcllw-isdbd-18,
	abstract = {To be effective instructors and CS education researchers, we must identify and understand student difficulties surrounding core computing topics. This study examines student difficulties with the basic data structures commonly found in CS2 courses. Initial exploration of student thinking began with think-aloud interviews with students. These interviews centered on open-ended questions that were iteratively improved upon based on analysis of interview transcripts. The revised open-ended questions were then posed to 249 students during an end-of-term final exam study session. Using the explanations and justifications included by students, responses to the questions were coded and summarized. This work characterizes the difficulties revealed by student responses, and provides details of their prevalence among the examined student population.},
	author = {Zingaro, Daniel and Taylor, Cynthia and Porter, Leo and Clancy, Michael and Lee, Cynthia and Nam Liao, Soohyun and Webb, Kevin C.},
	booktitle = {Proc. 14th ACM Conference on International Computing Education Research (ICER)},
	date-added = {2023-02-26 12:21:08 -0600},
	date-modified = {2023-02-26 12:35:36 -0600},
	doi = {10.1145/3230977.3231005},
	pages = {169---177},
	series = {ICER '18},
	title = {Identifying Student Difficulties with Basic Data Structures},
	year = {2018},
	bdsk-url-1 = {https://doi.org/10.1145/3230977.3231005}}

@article{spmrk12-smdpr-22,
	author = {Shindler, Michael and Pinpin, Natalia and Markovic, Mia and Reiber, Frederick and Kim, Jee Hoon and Carlos, Giles Pierre Nunez and Dogucu, Mine and Hong, Mark and Luu, Michael and Anderson, Brian and Cote, Aaron and Ferland, Matthew and Jain, Palak and LaBonte, Tyler and Mathur, Leena and Moreno, Ryan and Sakuma, Ryan},
	date-added = {2023-02-26 12:14:56 -0600},
	date-modified = {2023-02-26 12:16:54 -0600},
	doi = {10.1080/08993408.2022.2079865},
	journal = {Comput. Sci. Educ.},
	number = {3},
	pages = {288--312},
	title = {Student misconceptions of dynamic programming: {A} replication study},
	volume = {32},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1080/08993408.2022.2079865}}

@phdthesis{b-gelce-06,
	author = {Br{\"a}ndle, Markus A.},
	date-added = {2023-02-26 12:11:07 -0600},
	date-modified = {2023-02-26 12:12:11 -0600},
	doi = {10.3929/ethz-a-005128663},
	keywords = {COMPLEXITY CLASSES (THEORETICAL COMPUTER SCIENCE); ELEKTRONISCHES LERNEN + COMPUTERUNTERST{\"U}TZTES LERNEN (COMPUTERUNTERST{\"U}TZTER UNTERRICHT); COMPUTER SCIENCE INSTRUCTION (SPECIAL SUBJECTS); E-LEARNING + COMPUTER ASSISTED LEARNING (COMPUTER-AIDED INSTRUCTION); ALGORITHMISCHE KOMPLEXIT{\"A}T (MATHEMATIK); ALGORITHMIC COMPLEXITY (MATHEMATICS); INFORMATIKUNTERRICHT (FACHUNTERRICHT); KOMPLEXIT{\"A}TSKLASSEN (THEORETISCHE INFORMATIK)},
	school = {ETH Z{\"u}rich},
	title = {{GraphBench}: {Exploring} the Limits of Complexity with Educational Software. Exploring the limits of complexity with educational software},
	type = {Doctoral Thesis},
	year = {2006},
	bdsk-url-1 = {https://doi.org/10.3929/ethz-a-005128663}}

@article{zz-ltmus-11,
	author = {Zerr, Jessica M. and Zerr, Ryan J.},
	date-added = {2023-02-26 12:09:35 -0600},
	date-modified = {2023-02-26 12:10:00 -0600},
	doi = {10.1080/10511970903386915},
	journal = {PRIMUS},
	number = {6},
	pages = {530--544},
	title = {Learning from Their Mistakes: {Using} Students' Incorrect Proofs as a Pedagogical Tool},
	volume = {21},
	year = {2011},
	bdsk-url-1 = {https://doi.org/10.1080/10511970903386915}}

@article{ek-iimdt-17,
	abstract = {When compared to earlier programming and data structure experiences that our students might have, the perspective changes on computers and programming when introducing theoretical computer science into the picture. Underlying computational models need to be addressed, and mathematical tools employed, to understand the quality criteria of theoretical computer science. Focus shifts from doing to proving. Over several years, we have tried to make this perspective transition smoother for the students of a third-year mandatory algorithms, data structures, and computational complexity course. The concepts receiving extra attention in this work are NP-completeness, one of the most central concepts in computer science, and dynamic programming, an algorithm construction method that is powerful but somewhat unintuitive for some students.The major difficulties that we attribute to NP-completeness are that the tasks look similar but have a different purpose than in algorithm construction exercises. Students do not immediately see the usefulness of the concept, and hence motivation could be one issue. One line of attacking NP-completeness has been to emphasize its algorithmic aspects using typical tools for teaching algorithms.Some potential difficulties associated with dynamic programming are that the method is based on a known difficult concept---recursion---and that there are many ingredients in a dynamic programming solution to a problem.For both dynamic programming and NP-completeness, we have invented several new activities and structured the teaching differently, forcing students to think and adopt a standpoint, and practice the concepts in programming assignments. Student surveys show that these activities are appreciated by the students, and our evaluations indicate that they have positive effects on learning. We believe that these activities could be useful in any similar course.The approach to improving the course is action research, and the evaluation has been done using course surveys, self-efficacy surveys, rubrics-like grading protocols, and grades. We have also interviewed teaching assistants about their experiences.},
	author = {Enstr{\"o}m, Emma and Kann, Viggo},
	date-added = {2023-02-25 17:51:15 -0600},
	date-modified = {2023-02-26 14:48:21 -0600},
	doi = {10.1145/3018109},
	journal = {ACM Trans. Comput. Educ.},
	keywords = {proofs, pattern-oriented instruction, NP-completeness, dynamic programming, Algorithm visualization, assessment, self-efficacy},
	number = {1},
	pages = {4:1--4:38},
	title = {Iteratively Intervening with the ``Most Difficult'' Topics of an Algorithms and Complexity Course},
	volume = {17},
	year = {2017},
	bdsk-url-1 = {https://doi.org/10.1145/3018109}}

@incollection{wds-iapcs-02,
	abstract = {Publisher Summary
This chapter discusses, improving the academic performance of college students with brief attributional interventions. Attribution theory originated in the late 1950s and these theorists advocated a phenomenological approach to the study of human behavior. Consistent with a phenomenological approach, the focus is on the way the students perceive the causes of their poor performance because these attributions are believed to have important consequences that are independent of the actual causes. Attribution theory assumes that within this range of abilities, the explanation people make for their performance is crucial. The chapter reviews attempts to use attribution therapy to help college students improve their academic performance, beginning with a brief review of the history of attribution therapy. Re-attribution approach arose from a confluence of different research traditions. The chapter concludes that, re-attribution is a technique that attempts to change people's explanations about the dysfunctional behavior itself, regardless of whether that behavior is accompanied by physiological arousal.},
	author = {Wilson, Timothy D. and Damiani, Michelle and Shelton, Nicole},
	booktitle = {Improving Academic Achievement},
	chapter = {5},
	date-added = {2023-02-12 16:49:33 -0600},
	date-modified = {2023-02-12 16:50:12 -0600},
	doi = {https://doi.org/10.1016/B978-012064455-1/50008-7},
	editor = {Aronson, Joshua},
	pages = {89--108},
	publisher = {Academic Press},
	series = {Educational Psychology},
	title = {Improving the Academic Performance of College Students with Brief Attributional Interventions},
	year = {2002},
	bdsk-url-1 = {https://doi.org/10.1016/B978-012064455-1/50008-7}}

@article{yd-mprws-12,
	author = {Yeager, David Scott and Dweck, Carol S.},
	date-added = {2023-02-12 16:45:08 -0600},
	date-modified = {2023-02-12 16:45:35 -0600},
	doi = {10.1080/00461520.2012.722805},
	journal = {Educational Psychologist},
	number = {4},
	pages = {302--314},
	title = {Mindsets That Promote Resilience: {When} Students Believe That Personal Characteristics Can Be Developed},
	volume = {47},
	year = {2012},
	bdsk-url-1 = {https://doi.org/10.1080/00461520.2012.722805}}

@book{d-mps-06,
	author = {Dweck, Carol S.},
	date-added = {2023-02-12 16:42:25 -0600},
	date-modified = {2023-02-12 16:43:44 -0600},
	publisher = {Random House},
	title = {Mindset: The New Psychology of Success},
	year = {2006}}

@inproceedings{xz-ucgsa-23,
	author = {Xia, Jason and Zilles, Craig},
	booktitle = {Proc. 54th ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-11 18:17:42 -0600},
	date-modified = {2023-02-28 00:21:58 -0600},
	doi = {10.1145/3545945.3569728},
	title = {Using Context-Free Grammars to Scaffold and Automate Feedback in Precise Mathematical Writing},
	url = {https://hdl.handle.net/2142/114361},
	year = {2023, to appear},
	bdsk-url-1 = {https://hdl.handle.net/2142/114361},
	bdsk-url-2 = {https://doi.org/10.1145/3545945.3569728}}

@inproceedings{lfrah-wacsr-23,
	author = {Luu, Michael and Ferland, Matthew and Rao, Varun Nagaraj and Arora, Arushi and Huynh, Randy and Reiber, Frederick and Wong-Ma, Jennifer and Shindler, Michael},
	booktitle = {Proc. 54th ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-11 18:11:27 -0600},
	date-modified = {2023-02-26 12:51:21 -0600},
	doi = {10.1145/3545945.3569820},
	title = {What is an Algorithms Course? {Survey} Results of Introductory Undergraduate Algorithms Courses in the {U.S.}},
	url = {https://www.ics.uci.edu/~mikes/papers/What\_is\_Algorithms\_Course.pdf},
	year = {2023, to appear},
	bdsk-url-1 = {https://www.ics.uci.edu/~mikes/papers/What%5C_is%5C_Algorithms%5C_Course.pdf},
	bdsk-url-2 = {https://doi.org/10.1145/3545945.3569820}}

@misc{bfhmn-efics-20,
	arxiv = {2012.01546},
	author = {Bez{\'a}kov{\'a}, Ivona and Fluet, Kimberly and Hemaspaandra, Edith and Miller, Hannah and Narv{\'a}ez, David E.},
	date-added = {2023-02-11 17:47:39 -0600},
	date-modified = {2023-02-12 22:22:22 -0600},
	doi = {10.48550/ARXIV.2012.01546},
	howpublished = {Preprint},
	month = {December},
	title = {Effective Feedback for Introductory {CS} Theory: {A} {JFLAP} Extension and Student Persistence},
	url = {https://arxiv.org/abs/2012.01546},
	year = {2020},
	bdsk-url-1 = {https://arxiv.org/abs/2012.01546},
	bdsk-url-2 = {https://doi.org/10.48550/ARXIV.2012.01546}}

@inproceedings{bfhmn-wfics-21,
	abstract = {Computing theory analyzes abstract computational models to rigorously study the computational difficulty of various problems. Introductory computing theory can be challenging for undergraduate students, and the overarching goal of our research is to help students learn these computational models. The most common pedagogical tool for interacting with these models is the Java Formal Languages and Automata Package (JFLAP). We developed a JFLAP server extension, which accepts homework submissions from students, evaluates the submission as correct or incorrect, and provides a witness string when the submission is incorrect. Our extension currently provides witness feedback for deterministic finite automata, nondeterministic finite automata, regular expressions, context-free grammars, and pushdown automata.In Fall 2019, we ran a preliminary investigation on two synchronized sections (Control and Study) of the required undergraduate course Introduction to Computer Science Theory. The Study section (n=29) used our extension for five targeted homework questions, and the Control section (n=35) submitted these problems using traditional means. The Study section strongly outperformed the Control section with respect to the percent of perfect homework grades for the targeted homework questions. Our most interesting result was student persistence: with only the short witness string as feedback, students voluntarily persisted in submitting attempts until correct.},
	author = {Bez\'{a}kov\'{a}, Ivona and Fluet, Kimberly and Hemaspaandra, Edith and Miller, Hannah and Narv\'{a}ez, David E.},
	booktitle = {Proc. 52nd ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-11 17:44:31 -0600},
	date-modified = {2023-02-26 12:50:50 -0600},
	doi = {10.1145/3408877.3439585},
	pages = {1300},
	title = {Witness Feedback for Introductory {CS} Theory Assignments},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1145/3408877.3439585}}

@inproceedings{bfhmn-esfic-22,
	abstract = {Computing theory is often perceived as challenging by students, and verifying the correctness of a student's automaton or grammar is time-consuming for instructors. Aiming to provide benefits to both students and instructors, we designed an automated feedback tool for assignments where students construct automata or grammars. Our tool, built as an extension to the widely popular JFLAP software, determines if a submission is correct, and for incorrect submissions it provides a "witness" string demonstrating the incorrectness.We studied the usage and benefits of our tool in two terms, Fall 2019 and Spring 2021. Each term, students in one section of the Introduction to Computer Science Theory course were required to use our tool for sample homework questions targeting DFAs, NFAs, RegExs, CFGs, and PDAs. In Fall 2019, this was a regular section of the course. We also collected comparison data from another section that did not use our tool but had the same instructor and homework assignments. In Spring 2021, a smaller honors section provided the perspective from this demographic. Overall, students who used the tool reported that it helped them to not only solve the homework questions (and they performed better than the comparison group) but also to better understand the underlying theory concept. They were engaged with the tool: almost all persisted with their attempts until their submission was correct despite not being able to random walk to a solution. This indicates that witness feedback, a succinct explanation of incorrectness, is effective. Additionally, it assisted instructors with assignment grading.},
	author = {Bez\'{a}kov\'{a}, Ivona and Fluet, Kimberly and Hemaspaandra, Edith and Miller, Hannah and Narv\'{a}ez, David E.},
	booktitle = {Proc. 53rd ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-11 17:41:37 -0600},
	date-modified = {2023-02-26 12:51:05 -0600},
	doi = {10.1145/3478431.3499416},
	pages = {976--982},
	title = {Effective Succinct Feedback for Intro {CS} Theory: {A} {JFLAP} Extension},
	volume = {1},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1145/3478431.3499416}}

@inproceedings{dhkr-at-20,
	abstract = {Computer science class enrollments have rapidly risen in the past decade. With current class sizes, standard approaches to grading and providing personalized feedback are no longer possible and new techniques become both feasible and necessary. In this paper, we present the third version of Automata Tutor, a tool for helping teachers and students in large courses on automata and formal languages. The second version of Automata Tutor supported automatic grading and feedback for finite-automata constructions and has already been used by thousands of users in dozens of countries. This new version of Automata Tutor supports automated grading and feedback generation for a greatly extended variety of new problems, including problems that ask students to create regular expressions, context-free grammars, pushdown automata and Turing machines corresponding to a given description, and problems about converting between equivalent models - e.g., from regular expressions to nondeterministic finite automata. Moreover, for several problems, this new version also enables teachers and students to automatically generate new problem instances. We also present the results of a survey run on a class of 950 students, which shows very positive results about the usability and usefulness of the tool.},
	author = {D'Antoni, Loris and Helfrich, Martin and Kretinsky, Jan and Ramneantu, Emanuel and Weininger, Maximilian},
	booktitle = {Proc. 32nd International Conference on Computer Aided Verification (CAV)},
	date-added = {2023-02-11 17:38:02 -0600},
	date-modified = {2023-02-26 12:44:01 -0600},
	doi = {10.1007/978-3-030-53291-8_1},
	number = {12225},
	pages = {3--14},
	publisher = {Springer},
	series = {Lecture Notes in Computer Science},
	title = {Automata Tutor v3},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-030-53291-8_1}}

@book{sf-jiflap-06,
	author = {Rodger, Susan H. and Finley, Thomas W.},
	date-added = {2023-02-11 17:20:11 -0600},
	date-modified = {2023-02-11 17:36:45 -0600},
	publisher = {Jones \& Bartlett},
	title = {JFLAP: An Interactive Formal Languages and Automata Package},
	year = {2006}}

@article{dkagvh-hcafh-15,
	abstract = {In computer-aided education, the goal of automatic feedback is to provide a meaningful explanation of students' mistakes. We focus on providing feedback for constructing a deterministic finite automaton that accepts strings that match a described pattern. Natural choices for feedback are binary feedback (correct/wrong) and a counterexample of a string that is processed incorrectly. Such feedback is easy to compute but might not provide the student enough help. Our first contribution is a novel way to automatically compute alternative conceptual hints. Our second contribution is a rigorous evaluation of feedback with 377 students. We find that providing either counterexamples or hints is judged as helpful, increases student perseverance, and can improve problem completion time. However, both strategies have particular strengths and weaknesses. Since our feedback is completely automatic, it can be deployed at scale and integrated into existing massive open online courses.},
	author = {D'Antoni, Loris and Kini, Dileep and Alur, Rajeev and Gulwani, Sumit and Viswanathan, Mahesh and Hartmann, Bj\"{o}rn},
	date-added = {2023-02-11 17:17:54 -0600},
	date-modified = {2023-02-28 01:10:38 -0600},
	doi = {10.1145/2723163},
	journal = {ACM Trans. Comput.-Hum. Interact.},
	number = {2},
	pages = {9:1--9:24},
	title = {How Can Automatic Feedback Help Students Construct Automata?},
	volume = {22},
	year = {2015},
	bdsk-url-1 = {https://doi.org/10.1145/2723163}}

@inproceedings{adgkvr-agdc-13,
	author = {Alur, Rajeev and D'Antoni, Loris and Gulwani, Sumit and Kini, Dileep and Viswanathan, Mahesh},
	booktitle = {Proc. 23rd International Joint Conference on Artificial Intelligence (IJCAI)},
	date-added = {2023-02-11 17:07:54 -0600},
	date-modified = {2023-02-26 12:43:54 -0600},
	pages = {1976--1982},
	title = {Automated Grading of {DFA} Constructions},
	url = {http://www.aaai.org/ocs/index.php/IJCAI/IJCAI13/paper/view/6759},
	year = {2013},
	bdsk-url-1 = {http://www.aaai.org/ocs/index.php/IJCAI/IJCAI13/paper/view/6759}}

@article{depl-fisdt-94,
	author = {Deci, Edward L. and Eghrari, Haleh and Patrick, Brian C. and Leone, Dean R.},
	date-added = {2023-02-11 16:41:16 -0600},
	date-modified = {2023-02-11 16:44:58 -0600},
	doi = {10.1111/j.1467-6494.1994.tb00797.x},
	journal = {Journal of Personality},
	pages = {119--142},
	title = {Facilitating internalization: {The} self determination theory perspective},
	volume = {62},
	year = {1994},
	bdsk-url-1 = {https://doi.org/10.1111/j.1467-6494.1994.tb00797.x}}

@incollection{dr-sdt-12,
	author = {Deci, Edward L. and Ryan, Richard},
	booktitle = {Handbook of Theories of Social Psychology},
	chapter = {20},
	date-added = {2023-02-11 16:41:16 -0600},
	date-modified = {2023-02-11 17:54:38 -0600},
	doi = {10.4135/9781446249215},
	editor = {van Lange, Paul A. M. and Kruglanski, Arie W. and Higgins, E. Tory},
	pages = {416--436},
	publisher = {Sage Publications Ltd.},
	title = {Self-determination theory},
	volume = {1},
	year = {2012},
	bdsk-url-1 = {https://doi.org/10.4135/9781446249215}}

@article{we-evtam-00,
	abstract = {We discuss the expectancy--value theory of motivation, focusing on an expectancy--value model developed and researched by Eccles, Wigfield, and their colleagues. Definitions of crucial constructs in the model, including ability beliefs, expectancies for success, and the components of subjective task values, are provided. These definitions are compared to those of related constructs, including self-efficacy, intrinsic and extrinsic motivation, and interest. Research is reviewed dealing with two issues: (1) change in children's and adolescents' ability beliefs, expectancies for success, and subjective values, and (2) relations of children's and adolescents' ability-expectancy beliefs and subjective task values to their performance and choice of activities.},
	author = {Wigfield, Allan and Eccles, Jacquelynne S.},
	date-added = {2023-02-11 16:41:16 -0600},
	date-modified = {2023-02-11 17:44:09 -0600},
	doi = {https://doi.org/10.1006/ceps.1999.1015},
	journal = {Contemporary Educational Psychology},
	number = {1},
	pages = {68--81},
	title = {Expectancy--Value Theory of Achievement Motivation},
	volume = {25},
	year = {2000},
	bdsk-url-1 = {https://www.sciencedirect.com/science/article/pii/S0361476X99910159},
	bdsk-url-2 = {https://doi.org/10.1006/ceps.1999.1015}}

@misc{w-fsmd-15,
	author = {Wallace, Evan},
	date-added = {2023-02-11 16:13:09 -0600},
	date-modified = {2023-02-26 18:12:23 -0600},
	howpublished = {Github repository},
	title = {Finite State Machine Designer},
	url = {https://github.com/evanw/fsm},
	urldate = {February 11, 2023},
	year = {2015},
	bdsk-url-1 = {https://github.com/evanw/fsm}}

@misc{e-a-22,
	author = {Evans, Caleb},
	date-added = {2023-02-11 16:11:53 -0600},
	date-modified = {2023-02-26 18:12:12 -0600},
	howpublished = {Github repository},
	title = {Automata},
	url = {https://github.com/caleb531/automata},
	urldate = {February 11, 2023},
	year = {2022},
	bdsk-url-1 = {https://github.com/caleb531/automata}}

@inproceedings{dld-rrpp-20,
	abstract = {Parsons problems are a type of programming exercise where students rearrange jumbled code blocks of a solution program back into its original form. It is usually implemented as a complement or alternative to traditional programming exercises like code-tracing and code-writing. This paper reviews the existing literature on the Parsons problem in introductory CS education. We find that the flexible nature of the design of Parsons problems has led to many variants, and these have been continuously refined to better address student needs. However, the effectiveness of Parsons problems, both as a question type and as a learning tool in CS education, remains uncertain due to a lack of replicated research in the field.},
	author = {Du, Yuemeng and Luxton-Reilly, Andrew and Denny, Paul},
	booktitle = {Proc. 22nd Australasian Computing Education Conference (ACE)},
	date-added = {2023-02-11 16:06:28 -0600},
	date-modified = {2023-02-27 15:55:41 -0600},
	doi = {10.1145/3373165.3373187},
	pages = {195--202},
	title = {A Review of Research on {Parsons} Problems},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.1145/3373165.3373187}}

@misc{pkhw-epcgp-22,
	arxiv = {2204.04196},
	author = {Poulsen, Seth and Kulkarni, Shubhang and Herman, Geoffrey and West, Matthew},
	date-added = {2023-02-11 16:03:49 -0600},
	date-modified = {2023-02-11 19:04:41 -0600},
	howpublished = {Preprint},
	month = {April},
	title = {Efficient Partial Credit Grading of Proof Blocks Problems},
	url = {https://arxiv.org/abs/2204.04196},
	year = {2022},
	bdsk-url-1 = {https://arxiv.org/abs/2204.04196}}

@inproceedings{pkhw-bpcga-22,
	abstract = {Proof Blocks () is a software tool that allows students to practice writing mathematical proofs by dragging and dropping lines instead of writing proofs from scratch. Because of the large solution space, it is computationally expensive to calculate the difference between an incorrect student solution and some correct solution, restricting the ability to automatically assign students partial credit. We benchmark a novel algorithm for finding the edit distance from an arbitrary student submission to some correct solution of a Proof Blocks problem on thousands of student submissions, showing that our novel algorithm can perform over 100 times better than the na\"{\i}ve algorithm on real data. Our new algorithm has further applications in grading Parson's Problems, task planning problems, and any other kind of homework or exam problem where the solution space may be modeled as a directed acyclic graph.},
	author = {Poulsen, Seth and Kulkarni, Shubhang and Herman, Geoffrey and West, Matthew},
	booktitle = {Proc. 23rd International Conference on Artificial Intelligence in Education (AIED), Part II},
	date-added = {2023-02-11 16:02:07 -0600},
	date-modified = {2023-02-26 12:51:13 -0600},
	doi = {10.1007/978-3-031-11647-6_34},
	number = {13356},
	pages = {199--203},
	publisher = {Springer},
	series = {Lecture Notes in Computer Science},
	title = {Benchmarking Partial Credit Grading Algorithms For Proof Blocks Problems},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-031-11647-6_34}}

@article{pvhw-epbpe-22,
	author = {Poulsen, Seth and Viswanathan, Mahesh and Herman, Geoffrey L. and West, Matthew},
	date-added = {2023-02-11 16:00:41 -0600},
	date-modified = {2023-02-11 16:01:25 -0600},
	doi = {10.1145/3514213},
	journal = {ACM Inroads},
	number = {1},
	pages = {41--51},
	title = {Evaluating Proof Blocks Problems as Exam Questions},
	volume = {13},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1145/3514213}}

@inproceedings{ph-pppfe-06,
	abstract = {Mastery of basic syntactic and logical constructs is an essential part of learning to program. Unfortunately, practice exercises for programming basics can be very tedious, making it difficult to motivate students. In this paper we describe Parson's Programming Puzzles, an automated, interactive tool that provides practice with basic programming principles in an entertaining puzzle-like format. Careful design of the items in the puzzles allows the tutor to highlight particular topics and common programming errors. Since each puzzle solution is a complete sample of well-written code, use of the tool exposes students to good programming practice. This paper discusses the motivation of Parson's Programming Puzzles, and gives several examples. We describe the web-based authoring tool used to build the puzzles, and present our plans for future development.},
	author = {Parsons, Dale and Haden, Patricia},
	booktitle = {Proc. 8th Australasian Conference on Computing Education (ACE)},
	comments = {No DOI},
	date-added = {2023-02-11 15:59:32 -0600},
	date-modified = {2023-02-27 15:52:19 -0600},
	pages = {157--163},
	title = {Parson's Programming Puzzles: {A} Fun and Effective Learning Tool for First Programming Courses},
	volume = {52},
	year = {2006}}

@inproceedings{pvhw-epbeq-21,
	abstract = {Proof Blocks is a novel software tool which enables students to write mathematical proofs by dragging and dropping prewritten lines into the correct order, rather than writing a proof completely from scratch. We used Proof Blocks problems as exam questions for a discrete mathematics course with hundreds of students, allowing us to collect thousands of student responses to Proof Blocks problems. Using this data, we provide statistical evidence that Proof Blocks are easier than written proofs, which are typically very difficult. We also show that Proof Blocks problems provide about as much information about student knowledge as written proofs. Survey results show that students believe that the Proof Blocks user interface is easy to use, and that the questions accurately represent their ability to write proofs.},
	author = {Poulsen, Seth and Viswanathan, Mahesh and Herman, Geoffrey L. and West, Matthew},
	booktitle = {Proc. 17th ACM Conference on International Computing Education Research (ICER)},
	date-added = {2023-02-11 15:58:34 -0600},
	date-modified = {2023-02-26 12:27:08 -0600},
	doi = {10.1145/3446871.3469741},
	pages = {157--168},
	title = {Evaluating Proof Blocks Problems as Exam Questions},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1145/3446871.3469741}}

@inproceedings{pvhw-pbasa-22,
	abstract = {In this software tool paper we present Proof Blocks, a tool which enables students to construct mathematical proofs by dragging and dropping prewritten proof lines into the correct order. We present both implementation details of the tool, as well as a rich reflection on our experiences using the tool in courses with hundreds of students. Proof Blocks problems can be graded completely automatically, enabling students to receive rapid feedback. When writing a problem, the instructor specifies the dependency graph of the lines of the proof, so that any correct arrangement of the lines can receive full credit. This innovation can improve assessment tools by increasing the types of questions we can ask students about proofs, and can give greater access to proof knowledge by increasing the amount that students can learn on their own with the help of a computer.},
	arxiv = {2106.11032},
	author = {Poulsen, Seth and Viswanathan, Mahesh and Herman, Geoffrey L. and West, Matthew},
	booktitle = {Proc. 27th ACM Conference on Innovation and Technology in Computer Science Education (ITiCSE '22)},
	date-added = {2023-02-11 15:48:53 -0600},
	date-modified = {2023-02-11 17:50:44 -0600},
	doi = {10.1145/3502718.3524774},
	pages = {428--434},
	title = {Proof Blocks: {Autogradable} Scaffolding Activities for Learning to Write Proofs},
	volume = {1},
	year = {2022},
	bdsk-url-1 = {https://doi.org/10.1145/3502718.3524774}}

@inproceedings{l-dfata-13,
	abstract = {A common approach to teaching algorithms involves describing algorithms first and then proving their correctness afterwards. In this article we advocate a "derivation-first" approach in which algorithms are "derived," either from basic concepts or from simpler algorithms, before they are proved correct. We demonstrate how a number of "classical" algorithms can be derived, providing students with a more intellectually satisfying experience, a deeper intuition into how algorithm design works, and connections between algorithms that can be useful in developing algorithms for other problems.},
	author = {Libeskind-Hadas, Ran},
	booktitle = {Proc. 44th ACM Technical Symposium on Computer Science Education (SIGCSE)},
	date-added = {2023-02-11 15:44:36 -0600},
	date-modified = {2023-02-26 12:43:47 -0600},
	doi = {10.1145/2445196.2445366},
	pages = {573--578},
	title = {A Derivation-First Approach to Teaching Algorithms},
	year = {2013},
	bdsk-url-1 = {https://doi.org/10.1145/2445196.2445366}}

@inproceedings{fcawz-aepeq-21,
	abstract = {Previous research suggests that "Explain in Plain English" (EiPE) code reading activities could play an important role in the development of novice programmers, but EiPE questions aren't heavily used in introductory programming courses because they (traditionally) required manual grading. We present what we believe to be the first automatic grader for EiPE questions and its deployment in a large-enrollment introductory programming course. Based on a set of questions deployed on a computer-based exam, we find that our implementation has an accuracy of 87-89\%, which is similar in performance to course teaching assistants trained to perform this task and compares favorably to automatic short answer grading algorithms developed for other domains. In addition, we briefly characterize the kinds of answers that the current autograder fails to score correctly and the kinds of errors made by students.},
	author = {Fowler, Max and Chen, Binglin and Azad, Sushmita and West, Matthew and Zilles, Craig},
	booktitle = {Proc. 52nd ACM Technical Symposium on Computer Science Education (SIGSCE)},
	date-added = {2023-02-11 15:42:43 -0600},
	date-modified = {2023-02-26 12:50:58 -0600},
	doi = {10.1145/3408877.3432539},
	pages = {1163--1169},
	title = {Autograding `{Explain} in Plain {English}' Questions Using {NLP}},
	year = {2021},
	bdsk-url-1 = {https://doi.org/10.1145/3408877.3432539}}

@inproceedings{cb-cpralo-03,
	author = {Carlson, Patricia A and Berry, Frederick C.},
	booktitle = {Proc. 33rd ASEE/IEEE Frontiers in Education Conference},
	date-added = {2014-01-02 20:22:36 +0000},
	date-modified = {2023-02-26 12:51:39 -0600},
	pages = {F3E1--F3E6},
	title = {Calibrated {Peer} {Review{\texttrademark}} and assessing learning outcomes},
	year = {2003}}

@article{kwlcp-psamoc-13,
	author = {Kulkarni, Chinmay and Wei, Koh Pang and Le, Huy and Chia, Daniel and Papadopoulos, Kathryn and Cheng, Justin and Koller, Daphne and Klemmer, Scott R.},
	date-added = {2014-01-02 17:34:07 +0000},
	date-modified = {2014-01-02 17:35:43 +0000},
	journal = {ACM Trans. Computer-Human Interaction},
	number = {4},
	pages = {article 39},
	title = {Peer and Self Assessment in Massive Online Classes},
	volume = {9},
	year = {2013}}

@inproceedings{phcdnk-tmpam-13,
	arxiv = {1307.2579},
	author = {Piech, Chris and Huang, Jonathan and Chen, Zhengchao and Do, Chuong and Ng, Andrew and Koller, Daphne},
	booktitle = {Proc. 6th International Conference on Educational Data Mining},
	comments = {No DOI :-(},
	date-added = {2014-01-02 17:19:11 +0000},
	date-modified = {2023-02-26 12:27:48 -0600},
	pages = {153--160},
	title = {Tuned Models of Peer Assessment in {MOOCs}},
	url = {http://www.educationaldatamining.org/EDM2013/papers/rn\_paper\_23.pdf},
	year = {2013},
	bdsk-url-1 = {http://www.educationaldatamining.org/EDM2013/papers/rn_paper_23.pdf}}
